{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { GestureConfig, MatCommonModule } from '@angular/material/core';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by MatTooltip.\n * \\@docs-private\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Time in ms to throttle repositioning after scroll events.\n  @type {?} */\n\nconst SCROLL_THROTTLE_MS = 20;\n/** *\n * CSS class that will be attached to the overlay panel.\n  @type {?} */\n\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** *\n * Injection token that determines the scroll handling while a tooltip is visible.\n  @type {?} */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** *\n * Injection token to be used to override the default options for `matTooltip`.\n  @type {?} */\n\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nclass MatTooltip {\n  /**\n   * @param {?} _overlay\n   * @param {?} _elementRef\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewContainerRef\n   * @param {?} _ngZone\n   * @param {?} _platform\n   * @param {?} _ariaDescriber\n   * @param {?} _focusMonitor\n   * @param {?} scrollStrategy\n   * @param {?} _dir\n   * @param {?} _defaultOptions\n   */\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    /**\n     * The default delay in ms before showing the tooltip after show is called\n     */\n\n    this.showDelay = this._defaultOptions.showDelay;\n    /**\n     * The default delay in ms before hiding the tooltip after hide is called\n     */\n\n    this.hideDelay = this._defaultOptions.hideDelay;\n    this._message = '';\n    this._manualListeners = new Map();\n    /**\n     * Emits when the component is destroyed.\n     */\n\n    this._destroyed = new Subject();\n    this._scrollStrategy = scrollStrategy;\n    /** @type {?} */\n\n    const element = _elementRef.nativeElement;\n    /** @type {?} */\n\n    const elementStyle =\n    /** @type {?} */\n    element.style; // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners.set('mouseenter', () => this.show()).set('mouseleave', () => this.hide()).forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    } // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n\n\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\n   * Allows the user to define the position of the tooltip relative to the parent element\n   * @return {?}\n   */\n\n\n  get position() {\n    return this._position;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set position(value) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          /** @type {?} */\n          this._tooltipInstance.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /**\n   * Disables the display of the tooltip.\n   * @return {?}\n   */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n  /**\n   * The message to be displayed in the tooltip\n   * @return {?}\n   */\n\n\n  get message() {\n    return this._message;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message); // If the message is not a string (e.g. number), convert it to a string and trim it.\n\n\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n  /**\n   * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n   * @return {?}\n   */\n\n\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n\n      this._tooltipInstance = null;\n    } // Clean up the event listeners set in the constructor\n\n\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n   * @param {?=} delay\n   * @return {?}\n   */\n\n\n  show(delay = this.showDelay) {\n    if (this.disabled || !this.message || this._isTooltipVisible() && !\n    /** @type {?} */\n    this._tooltipInstance._showTimeoutId && !\n    /** @type {?} */\n    this._tooltipInstance._hideTimeoutId) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n    this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    this._setTooltipClass(this._tooltipClass);\n\n    this._updateTooltipMessage();\n    /** @type {?} */\n\n\n    this._tooltipInstance.show(delay);\n  }\n  /**\n   * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n   * @param {?=} delay\n   * @return {?}\n   */\n\n\n  hide(delay = this.hideDelay) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n  /**\n   * Shows/hides the tooltip\n   * @return {?}\n   */\n\n\n  toggle() {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n  /**\n   * Returns true if the tooltip is currently visible to the user\n   * @return {?}\n   */\n\n\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /**\n   * Handles the keydown events on the host element.\n   * @param {?} e\n   * @return {?}\n   */\n\n\n  _handleKeydown(e) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n  /**\n   * Handles the touchend events on the host element.\n   * @return {?}\n   */\n\n\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n  /**\n   * Create the overlay config and position strategy\n   * @return {?}\n   */\n\n\n  _createOverlay() {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n    /** @type {?} */\n\n\n    const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8);\n    /** @type {?} */\n\n\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n  /**\n   * Detaches the currently-attached tooltip.\n   * @return {?}\n   */\n\n\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n  /**\n   * Updates the position of the current tooltip.\n   * @return {?}\n   */\n\n\n  _updatePosition() {\n    /** @type {?} */\n    const position =\n    /** @type {?} */\n    this._overlayRef.getConfig().positionStrategy;\n    /** @type {?} */\n\n\n    const origin = this._getOrigin();\n    /** @type {?} */\n\n\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([Object.assign({}, origin.main, overlay.main), Object.assign({}, origin.fallback, overlay.fallback)]);\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   * @return {?}\n   */\n\n\n  _getOrigin() {\n    /** @type {?} */\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    /** @type {?} */\n\n    const position = this.position;\n    /** @type {?} */\n\n    let originPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /**\n   * Returns the overlay position and a fallback position based on the user's preference\n   * @return {?}\n   */\n\n\n  _getOverlayPosition() {\n    /** @type {?} */\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    /** @type {?} */\n\n    const position = this.position;\n    /** @type {?} */\n\n    let overlayPosition;\n\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /**\n   * Updates the tooltip message and repositions the overlay according to the new message length\n   * @return {?}\n   */\n\n\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        if (this._tooltipInstance) {\n          /** @type {?} */\n          this._overlayRef.updatePosition();\n        }\n      });\n    }\n  }\n  /**\n   * Updates the tooltip class\n   * @param {?} tooltipClass\n   * @return {?}\n   */\n\n\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /**\n   * Inverts an overlay position.\n   * @param {?} x\n   * @param {?} y\n   * @return {?}\n   */\n\n\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n\n}\n\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8));\n};\n\nMatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostBindings: function MatTooltip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"longpress\", function MatTooltip_longpress_HostBindingHandler() {\n        return ctx.show();\n      })(\"keydown\", function MatTooltip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"touchend\", function MatTooltip_touchend_HostBindingHandler() {\n        return ctx._handleTouchend();\n      });\n    }\n  },\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  },\n  exportAs: [\"matTooltip\"]\n});\n/** @nocollapse */\n\nMatTooltip.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: AriaDescriber\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n  }]\n}];\n\nMatTooltip.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        '(longpress)': 'show()',\n        '(keydown)': '_handleKeydown($event)',\n        '(touchend)': '_handleTouchend()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\n\n\nclass TooltipComponent {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _breakpointObserver\n   */\n  constructor(_changeDetectorRef, _breakpointObserver) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._breakpointObserver = _breakpointObserver;\n    /**\n     * Property watched by the animation framework to show or hide the tooltip\n     */\n\n    this._visibility = 'initial';\n    /**\n     * Whether interactions on the page should close the tooltip\n     */\n\n    this._closeOnInteraction = false;\n    /**\n     * Subject for notifying that the tooltip has been hidden from the view\n     */\n\n    this._onHide = new Subject();\n    /**\n     * Stream that emits whether the user has a handset-sized display.\n     */\n\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n   * @return {?}\n   */\n\n\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null; // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n   * @return {?}\n   */\n\n\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null; // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Returns an observable that notifies when the tooltip has been hidden from view.\n   * @return {?}\n   */\n\n\n  afterHidden() {\n    return this._onHide.asObservable();\n  }\n  /**\n   * Whether the tooltip is being displayed.\n   * @return {?}\n   */\n\n\n  isVisible() {\n    return this._visibility === 'visible';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _animationDone(event) {\n    /** @type {?} */\n    const toState =\n    /** @type {?} */\n    event.toState;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   * @return {?}\n   */\n\n\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   * @return {?}\n   */\n\n\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n}\n\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n};\n\nTooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      let tmp_0_0;\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nTooltipComponent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: BreakpointObserver\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        '(body:click)': 'this._handleBodyInteraction()',\n        'aria-hidden': 'true'\n      },\n      styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatTooltipModule {}\n\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\n\nMatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n    provide: HAMMER_GESTURE_CONFIG,\n    useClass: GestureConfig\n  }],\n  imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: GestureConfig\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function () {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function () {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatTooltip, TooltipComponent, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations };","map":{"version":3,"names":["animate","keyframes","state","style","transition","trigger","AriaDescriber","FocusMonitor","A11yModule","Directionality","coerceBooleanProperty","ESCAPE","BreakpointObserver","Breakpoints","Overlay","OverlayModule","ScrollDispatcher","Platform","ComponentPortal","take","takeUntil","ChangeDetectionStrategy","ChangeDetectorRef","Component","Directive","ElementRef","Inject","InjectionToken","Input","NgZone","Optional","ViewContainerRef","ViewEncapsulation","NgModule","Subject","CommonModule","GestureConfig","MatCommonModule","HAMMER_GESTURE_CONFIG","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_position","_disabled","_message","_manualListeners","Map","_destroyed","_scrollStrategy","element","nativeElement","elementStyle","IOS","ANDROID","set","show","hide","forEach","listener","event","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","monitor","pipe","subscribe","origin","run","value","_overlayRef","_updatePosition","_tooltipInstance","updatePosition","disabled","message","removeDescription","trim","_isTooltipVisible","_updateTooltipMessage","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngOnDestroy","dispose","removeEventListener","clear","next","complete","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","TooltipComponent","attach","instance","afterHidden","toggle","isVisible","_handleKeydown","e","keyCode","stopPropagation","_handleTouchend","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","Object","assign","main","fallback","isLtr","originPosition","originX","originY","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","ɵfac","MatTooltip_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostBindings","MatTooltip_HostBindings","rf","ctx","ɵɵlistener","MatTooltip_longpress_HostBindingHandler","MatTooltip_keydown_HostBindingHandler","$event","MatTooltip_touchend_HostBindingHandler","inputs","exportAs","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Handset","clearTimeout","setTimeout","_animationStart","_animationDone","toState","_handleBodyInteraction","markForCheck","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","TooltipComponent_HostBindings","TooltipComponent_click_HostBindingHandler","ɵɵresolveBody","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","TooltipComponent_Template_div_animation_state_start_0_listener","TooltipComponent_Template_div_animation_state_done_0_listener","ɵɵpipe","ɵɵtext","ɵɵelementEnd","tmp_0_0","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","dependencies","NgClass","AsyncPipe","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","useClass","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/tooltip.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { GestureConfig, MatCommonModule } from '@angular/material/core';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Animations used by MatTooltip.\n * \\@docs-private\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time in ms to throttle repositioning after scroll events.\n  @type {?} */\nconst SCROLL_THROTTLE_MS = 20;\n/** *\n * CSS class that will be attached to the overlay panel.\n  @type {?} */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** *\n * Injection token that determines the scroll handling while a tooltip is visible.\n  @type {?} */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** *\n * Injection token to be used to override the default options for `matTooltip`.\n  @type {?} */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?} _ariaDescriber\n     * @param {?} _focusMonitor\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _defaultOptions\n     */\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        /**\n         * The default delay in ms before showing the tooltip after show is called\n         */\n        this.showDelay = this._defaultOptions.showDelay;\n        /**\n         * The default delay in ms before hiding the tooltip after hide is called\n         */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        this._message = '';\n        this._manualListeners = new Map();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        /** @type {?} */\n        const element = _elementRef.nativeElement;\n        /** @type {?} */\n        const elementStyle = /** @type {?} */ (element.style);\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (!_platform.IOS && !_platform.ANDROID) {\n            this._manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => element.addEventListener(event, listener));\n        }\n        if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n            // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n            // will add some inline styles by default, including `user-select: none`. This is\n            // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n            // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n            // behavior for text fields, we always clear the `user-select` to avoid such issues.\n            elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n        }\n        // Hammer applies `-webkit-user-drag: none` on all elements by default,\n        // which breaks the native drag&drop. If the consumer explicitly made\n        // the element draggable, clear the `-webkit-user-drag`.\n        if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n            elementStyle.webkitUserDrag = '';\n        }\n        _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                _ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                _ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Allows the user to define the position of the tooltip relative to the parent element\n     * @return {?}\n     */\n    get position() { return this._position; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    /** @type {?} */ ((this._tooltipInstance)).show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Disables the display of the tooltip.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n    }\n    /**\n     * The message to be displayed in the tooltip\n     * @return {?}\n     */\n    get message() { return this._message; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        this._message = value != null ? `${value}`.trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._updateTooltipMessage();\n            this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        }\n    }\n    /**\n     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n     * @return {?}\n     */\n    get tooltipClass() { return this._tooltipClass; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        if (!this._platform.IOS) {\n            this._manualListeners.forEach((listener, event) => this._elementRef.nativeElement.removeEventListener(event, listener));\n            this._manualListeners.clear();\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !/** @type {?} */ ((this._tooltipInstance))._showTimeoutId && !/** @type {?} */ ((this._tooltipInstance))._hideTimeoutId)) {\n            return;\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage(); /** @type {?} */\n        ((this._tooltipInstance)).show(delay);\n    }\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /**\n     * Handles the keydown events on the host element.\n     * @param {?} e\n     * @return {?}\n     */\n    _handleKeydown(e) {\n        if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n            e.stopPropagation();\n            this.hide(0);\n        }\n    }\n    /**\n     * Handles the touchend events on the host element.\n     * @return {?}\n     */\n    _handleTouchend() {\n        this.hide(this._defaultOptions.touchendHideDelay);\n    }\n    /**\n     * Create the overlay config and position strategy\n     * @return {?}\n     */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8);\n        /** @type {?} */\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n        strategy.withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        return this._overlayRef;\n    }\n    /**\n     * Detaches the currently-attached tooltip.\n     * @return {?}\n     */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /**\n     * Updates the position of the current tooltip.\n     * @return {?}\n     */\n    _updatePosition() {\n        /** @type {?} */\n        const position = /** @type {?} */ (((this._overlayRef)).getConfig().positionStrategy);\n        /** @type {?} */\n        const origin = this._getOrigin();\n        /** @type {?} */\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign({}, origin.main, overlay.main),\n            Object.assign({}, origin.fallback, overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n    _getOrigin() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @return {?}\n     */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    /** @type {?} */ ((this._overlayRef)).updatePosition();\n                }\n            });\n        }\n    }\n    /**\n     * Updates the tooltip class\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /**\n     * Inverts an overlay position.\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8)); };\nMatTooltip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostBindings: function MatTooltip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"longpress\", function MatTooltip_longpress_HostBindingHandler() { return ctx.show(); })(\"keydown\", function MatTooltip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"touchend\", function MatTooltip_touchend_HostBindingHandler() { return ctx._handleTouchend(); });\n    } }, inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, exportAs: [\"matTooltip\"] });\n/** @nocollapse */\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] }\n];\nMatTooltip.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    '(longpress)': 'show()',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(touchend)': '_handleTouchend()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nclass TooltipComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _breakpointObserver\n     */\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /**\n         * Property watched by the animation framework to show or hide the tooltip\n         */\n        this._visibility = 'initial';\n        /**\n         * Whether interactions on the page should close the tooltip\n         */\n        this._closeOnInteraction = false;\n        /**\n         * Subject for notifying that the tooltip has been hidden from the view\n         */\n        this._onHide = new Subject();\n        /**\n         * Stream that emits whether the user has a handset-sized display.\n         */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n    afterHidden() {\n        return this._onHide.asObservable();\n    }\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    /**\n     * @return {?}\n     */\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationDone(event) {\n        /** @type {?} */\n        const toState = /** @type {?} */ (event.toState);\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     * @return {?}\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\n/** @nocollapse */\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-tooltip-component', template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matTooltipAnimations.tooltipState], host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                }, styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"] }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n        { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig },\n    ], imports: [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [\n                    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig },\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}