{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n/**\n * \\@docs-private\n */\n\nclass MatBadgeBase {}\n/** @type {?} */\n\n\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\n\n\nclass MatBadge extends _MatBadgeMixinBase {\n  /**\n   * @param {?} _document\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _ariaDescriber\n   * @param {?=} _renderer\n   */\n  constructor(_document, _ngZone, _elementRef, _ariaDescriber, _renderer) {\n    super();\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    this._renderer = _renderer;\n    /**\n     * Whether the badge has any content.\n     */\n\n    this._hasContent = false;\n    this._color = 'primary';\n    this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n\n    this.position = 'above after';\n    /**\n     * Size of the badge. Can be 'small', 'medium', or 'large'.\n     */\n\n    this.size = 'medium';\n    /**\n     * Unique id for the badge\n     */\n\n    this._id = nextId++;\n  }\n  /**\n   * The color of the badge. Can be `primary`, `accent`, or `warn`.\n   * @return {?}\n   */\n\n\n  get color() {\n    return this._color;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set color(value) {\n    this._setColor(value);\n\n    this._color = value;\n  }\n  /**\n   * Whether the badge should overlap its contents or not\n   * @return {?}\n   */\n\n\n  get overlap() {\n    return this._overlap;\n  }\n  /**\n   * @param {?} val\n   * @return {?}\n   */\n\n\n  set overlap(val) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  /**\n   * The content for the badge\n   * @return {?}\n   */\n\n\n  get content() {\n    return this._content;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set content(value) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n\n    this._updateTextContent();\n  }\n  /**\n   * Message used to describe the decorated element via aria-describedby\n   * @return {?}\n   */\n\n\n  get description() {\n    return this._description;\n  }\n  /**\n   * @param {?} newDescription\n   * @return {?}\n   */\n\n\n  set description(newDescription) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n\n      this._description = newDescription;\n    }\n  }\n  /**\n   * Whether the badge is hidden.\n   * @return {?}\n   */\n\n\n  get hidden() {\n    return this._hidden;\n  }\n  /**\n   * @param {?} val\n   * @return {?}\n   */\n\n\n  set hidden(val) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  /**\n   * Whether the badge is above the host or not\n   * @return {?}\n   */\n\n\n  isAbove() {\n    return this.position.indexOf('below') === -1;\n  }\n  /**\n   * Whether the badge is after the host or not\n   * @return {?}\n   */\n\n\n  isAfter() {\n    return this.position.indexOf('before') === -1;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n  /**\n   * Injects a span element into the DOM with the content.\n   * @return {?}\n   */\n\n\n  _updateTextContent() {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n\n    return this._badgeElement;\n  }\n  /**\n   * Creates the badge element\n   * @return {?}\n   */\n\n\n  _createBadgeElement() {\n    /** @type {?} */\n    const rootNode = this._renderer || this._document;\n    /** @type {?} */\n\n    const badgeElement = rootNode.createElement('span');\n    /** @type {?} */\n\n    const activeClass = 'mat-badge-active';\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n  /**\n   * Sets the aria-label property on the element\n   * @param {?} newDescription\n   * @param {?} oldDescription\n   * @return {?}\n   */\n\n\n  _updateHostAriaDescription(newDescription, oldDescription) {\n    /** @type {?} */\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n  /**\n   * Adds css theme class given the color to the component host\n   * @param {?} colorPalette\n   * @return {?}\n   */\n\n\n  _setColor(colorPalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n\nMatBadge.ɵfac = function MatBadge_Factory(t) {\n  return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nMatBadge.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 20,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: [\"matBadgeDisabled\", \"disabled\"],\n    position: [\"matBadgePosition\", \"position\"],\n    size: [\"matBadgeSize\", \"size\"],\n    color: [\"matBadgeColor\", \"color\"],\n    overlap: [\"matBadgeOverlap\", \"overlap\"],\n    content: [\"matBadge\", \"content\"],\n    description: [\"matBadgeDescription\", \"description\"],\n    hidden: [\"matBadgeHidden\", \"hidden\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatBadge.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: ElementRef\n}, {\n  type: AriaDescriber\n}, {\n  type: Renderer2\n}];\n\nMatBadge.propDecorators = {\n  color: [{\n    type: Input,\n    args: ['matBadgeColor']\n  }],\n  overlap: [{\n    type: Input,\n    args: ['matBadgeOverlap']\n  }],\n  position: [{\n    type: Input,\n    args: ['matBadgePosition']\n  }],\n  content: [{\n    type: Input,\n    args: ['matBadge']\n  }],\n  description: [{\n    type: Input,\n    args: ['matBadgeDescription']\n  }],\n  size: [{\n    type: Input,\n    args: ['matBadgeSize']\n  }],\n  hidden: [{\n    type: Input,\n    args: ['matBadgeHidden']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      inputs: ['disabled: matBadgeDisabled'],\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n        '[class.mat-badge-disabled]': 'disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.AriaDescriber\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatBadgeModule {}\n\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n  return new (t || MatBadgeModule)();\n};\n\nMatBadgeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatBadgeModule\n});\nMatBadgeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [A11yModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, {\n    declarations: function () {\n      return [MatBadge];\n    },\n    imports: function () {\n      return [A11yModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatBadge];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatBadgeModule, MatBadgeBase, _MatBadgeMixinBase, MatBadge };","map":{"version":3,"names":["AriaDescriber","A11yModule","coerceBooleanProperty","DOCUMENT","Directive","ElementRef","Inject","Input","NgZone","Optional","Renderer2","NgModule","mixinDisabled","MatCommonModule","ɵngcc0","ɵngcc1","nextId","MatBadgeBase","_MatBadgeMixinBase","MatBadge","constructor","_document","_ngZone","_elementRef","_ariaDescriber","_renderer","_hasContent","_color","_overlap","position","size","_id","color","value","_setColor","overlap","val","content","_content","trim","length","_updateTextContent","description","_description","newDescription","_updateHostAriaDescription","hidden","_hidden","isAbove","indexOf","isAfter","ngOnDestroy","_badgeElement","removeDescription","_createBadgeElement","textContent","rootNode","badgeElement","createElement","activeClass","setAttribute","classList","add","nativeElement","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","describe","colorPalette","remove","ɵfac","MatBadge_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","rf","ctx","ɵɵclassProp","disabled","inputs","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","MatBadgeModule","MatBadgeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/badge.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n/**\n * \\@docs-private\n */\nclass MatBadgeBase {\n}\n/** @type {?} */\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\nclass MatBadge extends _MatBadgeMixinBase {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _ariaDescriber\n     * @param {?=} _renderer\n     */\n    constructor(_document, _ngZone, _elementRef, _ariaDescriber, _renderer) {\n        super();\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        /**\n         * Whether the badge has any content.\n         */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /**\n         * Size of the badge. Can be 'small', 'medium', or 'large'.\n         */\n        this.size = 'medium';\n        /**\n         * Unique id for the badge\n         */\n        this._id = nextId++;\n    }\n    /**\n     * The color of the badge. Can be `primary`, `accent`, or `warn`.\n     * @return {?}\n     */\n    get color() { return this._color; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n    get overlap() { return this._overlap; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * The content for the badge\n     * @return {?}\n     */\n    get content() { return this._content; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set content(value) {\n        this._content = value;\n        this._hasContent = value != null && `${value}`.trim().length > 0;\n        this._updateTextContent();\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n    get description() { return this._description; }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n        }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n    get hidden() { return this._hidden; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.description && this._badgeElement) {\n            this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n        }\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @return {?}\n     */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this.content;\n        }\n        return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @return {?}\n     */\n    _createBadgeElement() {\n        /** @type {?} */\n        const rootNode = this._renderer || this._document;\n        /** @type {?} */\n        const badgeElement = rootNode.createElement('span');\n        /** @type {?} */\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add('mat-badge-content');\n        badgeElement.textContent = this.content;\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        /** @type {?} */\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @param {?} colorPalette\n     * @return {?}\n     */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            if (this._color) {\n                this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nMatBadge.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatBadge.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [A11yModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatBadgeModule, MatBadgeBase, _MatBadgeMixinBase, MatBadge };\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,mBAA1C;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,MAAhC,EAAwCC,KAAxC,EAA+CC,MAA/C,EAAuDC,QAAvD,EAAiEC,SAAjE,EAA4EC,QAA5E,QAA4F,eAA5F;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,wBAA/C;AAEA;AACA;AACA;AACA;;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,IAAIC,MAAM,GAAG,CAAb;AACA;AACA;AACA;;AACA,MAAMC,YAAN,CAAmB;AAEnB;;;AACA,MAAMC,kBAAkB,GAAGN,aAAa,CAACK,YAAD,CAAxC;AACA;AACA;AACA;;;AACA,MAAME,QAAN,SAAuBD,kBAAvB,CAA0C;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,WAAW,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,WAArB,EAAkCC,cAAlC,EAAkDC,SAAlD,EAA6D;IACpE;IACA,KAAKJ,SAAL,GAAiBA,SAAjB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,WAAL,GAAmBA,WAAnB;IACA,KAAKC,cAAL,GAAsBA,cAAtB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IACA;AACR;AACA;;IACQ,KAAKC,WAAL,GAAmB,KAAnB;IACA,KAAKC,MAAL,GAAc,SAAd;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,QAAL,GAAgB,aAAhB;IACA;AACR;AACA;;IACQ,KAAKC,IAAL,GAAY,QAAZ;IACA;AACR;AACA;;IACQ,KAAKC,GAAL,GAAWf,MAAM,EAAjB;EACH;EACD;AACJ;AACA;AACA;;;EACa,IAALgB,KAAK,GAAG;IAAE,OAAO,KAAKL,MAAZ;EAAqB;EACnC;AACJ;AACA;AACA;;;EACa,IAALK,KAAK,CAACC,KAAD,EAAQ;IACb,KAAKC,SAAL,CAAeD,KAAf;;IACA,KAAKN,MAAL,GAAcM,KAAd;EACH;EACD;AACJ;AACA;AACA;;;EACe,IAAPE,OAAO,GAAG;IAAE,OAAO,KAAKP,QAAZ;EAAuB;EACvC;AACJ;AACA;AACA;;;EACe,IAAPO,OAAO,CAACC,GAAD,EAAM;IACb,KAAKR,QAAL,GAAgB1B,qBAAqB,CAACkC,GAAD,CAArC;EACH;EACD;AACJ;AACA;AACA;;;EACe,IAAPC,OAAO,GAAG;IAAE,OAAO,KAAKC,QAAZ;EAAuB;EACvC;AACJ;AACA;AACA;;;EACe,IAAPD,OAAO,CAACJ,KAAD,EAAQ;IACf,KAAKK,QAAL,GAAgBL,KAAhB;IACA,KAAKP,WAAL,GAAmBO,KAAK,IAAI,IAAT,IAAkB,GAAEA,KAAM,EAAT,CAAWM,IAAX,GAAkBC,MAAlB,GAA2B,CAA/D;;IACA,KAAKC,kBAAL;EACH;EACD;AACJ;AACA;AACA;;;EACmB,IAAXC,WAAW,GAAG;IAAE,OAAO,KAAKC,YAAZ;EAA2B;EAC/C;AACJ;AACA;AACA;;;EACmB,IAAXD,WAAW,CAACE,cAAD,EAAiB;IAC5B,IAAIA,cAAc,KAAK,KAAKD,YAA5B,EAA0C;MACtC,KAAKE,0BAAL,CAAgCD,cAAhC,EAAgD,KAAKD,YAArD;;MACA,KAAKA,YAAL,GAAoBC,cAApB;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACc,IAANE,MAAM,GAAG;IAAE,OAAO,KAAKC,OAAZ;EAAsB;EACrC;AACJ;AACA;AACA;;;EACc,IAAND,MAAM,CAACV,GAAD,EAAM;IACZ,KAAKW,OAAL,GAAe7C,qBAAqB,CAACkC,GAAD,CAApC;EACH;EACD;AACJ;AACA;AACA;;;EACIY,OAAO,GAAG;IACN,OAAO,KAAKnB,QAAL,CAAcoB,OAAd,CAAsB,OAAtB,MAAmC,CAAC,CAA3C;EACH;EACD;AACJ;AACA;AACA;;;EACIC,OAAO,GAAG;IACN,OAAO,KAAKrB,QAAL,CAAcoB,OAAd,CAAsB,QAAtB,MAAoC,CAAC,CAA5C;EACH;EACD;AACJ;AACA;;;EACIE,WAAW,GAAG;IACV,IAAI,KAAKT,WAAL,IAAoB,KAAKU,aAA7B,EAA4C;MACxC,KAAK5B,cAAL,CAAoB6B,iBAApB,CAAsC,KAAKD,aAA3C,EAA0D,KAAKV,WAA/D;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACID,kBAAkB,GAAG;IACjB,IAAI,CAAC,KAAKW,aAAV,EAAyB;MACrB,KAAKA,aAAL,GAAqB,KAAKE,mBAAL,EAArB;IACH,CAFD,MAGK;MACD,KAAKF,aAAL,CAAmBG,WAAnB,GAAiC,KAAKlB,OAAtC;IACH;;IACD,OAAO,KAAKe,aAAZ;EACH;EACD;AACJ;AACA;AACA;;;EACIE,mBAAmB,GAAG;IAClB;IACA,MAAME,QAAQ,GAAG,KAAK/B,SAAL,IAAkB,KAAKJ,SAAxC;IACA;;IACA,MAAMoC,YAAY,GAAGD,QAAQ,CAACE,aAAT,CAAuB,MAAvB,CAArB;IACA;;IACA,MAAMC,WAAW,GAAG,kBAApB;IACAF,YAAY,CAACG,YAAb,CAA0B,IAA1B,EAAiC,qBAAoB,KAAK7B,GAAI,EAA9D;IACA0B,YAAY,CAACI,SAAb,CAAuBC,GAAvB,CAA2B,mBAA3B;IACAL,YAAY,CAACF,WAAb,GAA2B,KAAKlB,OAAhC;;IACA,IAAI,KAAKK,WAAT,EAAsB;MAClBe,YAAY,CAACG,YAAb,CAA0B,YAA1B,EAAwC,KAAKlB,WAA7C;IACH;;IACD,KAAKnB,WAAL,CAAiBwC,aAAjB,CAA+BC,WAA/B,CAA2CP,YAA3C,EAbkB,CAclB;;;IACA,IAAI,OAAOQ,qBAAP,KAAiC,UAArC,EAAiD;MAC7C,KAAK3C,OAAL,CAAa4C,iBAAb,CAA+B,MAAM;QACjCD,qBAAqB,CAAC,MAAM;UACxBR,YAAY,CAACI,SAAb,CAAuBC,GAAvB,CAA2BH,WAA3B;QACH,CAFoB,CAArB;MAGH,CAJD;IAKH,CAND,MAOK;MACDF,YAAY,CAACI,SAAb,CAAuBC,GAAvB,CAA2BH,WAA3B;IACH;;IACD,OAAOF,YAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIZ,0BAA0B,CAACD,cAAD,EAAiBuB,cAAjB,EAAiC;IACvD;IACA,MAAM9B,OAAO,GAAG,KAAKI,kBAAL,EAAhB;;IACA,IAAI0B,cAAJ,EAAoB;MAChB,KAAK3C,cAAL,CAAoB6B,iBAApB,CAAsChB,OAAtC,EAA+C8B,cAA/C;IACH;;IACD,IAAIvB,cAAJ,EAAoB;MAChB,KAAKpB,cAAL,CAAoB4C,QAApB,CAA6B/B,OAA7B,EAAsCO,cAAtC;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIV,SAAS,CAACmC,YAAD,EAAe;IACpB,IAAIA,YAAY,KAAK,KAAK1C,MAA1B,EAAkC;MAC9B,IAAI,KAAKA,MAAT,EAAiB;QACb,KAAKJ,WAAL,CAAiBwC,aAAjB,CAA+BF,SAA/B,CAAyCS,MAAzC,CAAiD,aAAY,KAAK3C,MAAO,EAAzE;MACH;;MACD,IAAI0C,YAAJ,EAAkB;QACd,KAAK9C,WAAL,CAAiBwC,aAAjB,CAA+BF,SAA/B,CAAyCC,GAAzC,CAA8C,aAAYO,YAAa,EAAvE;MACH;IACJ;EACJ;;AArMqC;;AAuM1ClD,QAAQ,CAACoD,IAAT,GAAgB,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;EAAE,OAAO,KAAKA,CAAC,IAAItD,QAAV,EAAoBL,MAAM,CAAC4D,iBAAP,CAAyBvE,QAAzB,EAAmC,CAAnC,CAApB,EAA2DW,MAAM,CAAC4D,iBAAP,CAAyB5D,MAAM,CAACN,MAAhC,CAA3D,EAAoGM,MAAM,CAAC4D,iBAAP,CAAyB5D,MAAM,CAACT,UAAhC,CAApG,EAAiJS,MAAM,CAAC4D,iBAAP,CAAyB3D,MAAM,CAACf,aAAhC,CAAjJ,EAAiMc,MAAM,CAAC4D,iBAAP,CAAyB5D,MAAM,CAACJ,SAAhC,CAAjM,CAAP;AAAsP,CAArS;;AACAS,QAAQ,CAACwD,IAAT,GAAgB,aAAc7D,MAAM,CAAC8D,iBAAP,CAAyB;EAAEC,IAAI,EAAE1D,QAAR;EAAkB2D,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,UAAL,EAAiB,EAAjB,CAAD,CAA7B;EAAqDC,SAAS,EAAE,CAAC,CAAD,EAAI,WAAJ,CAAhE;EAAkFC,QAAQ,EAAE,EAA5F;EAAgGC,YAAY,EAAE,SAASC,qBAAT,CAA+BC,EAA/B,EAAmCC,GAAnC,EAAwC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACnNrE,MAAM,CAACuE,WAAP,CAAmB,mBAAnB,EAAwCD,GAAG,CAACjD,OAA5C,EAAqD,iBAArD,EAAwEiD,GAAG,CAACpC,OAAJ,EAAxE,EAAuF,iBAAvF,EAA0G,CAACoC,GAAG,CAACpC,OAAJ,EAA3G,EAA0H,kBAA1H,EAA8I,CAACoC,GAAG,CAAClC,OAAJ,EAA/I,EAA8J,iBAA9J,EAAiLkC,GAAG,CAAClC,OAAJ,EAAjL,EAAgM,iBAAhM,EAAmNkC,GAAG,CAACtD,IAAJ,KAAa,OAAhO,EAAyO,kBAAzO,EAA6PsD,GAAG,CAACtD,IAAJ,KAAa,QAA1Q,EAAoR,iBAApR,EAAuSsD,GAAG,CAACtD,IAAJ,KAAa,OAApT,EAA6T,kBAA7T,EAAiVsD,GAAG,CAACtC,MAAJ,IAAc,CAACsC,GAAG,CAAC1D,WAApW,EAAiX,oBAAjX,EAAuY0D,GAAG,CAACE,QAA3Y;IACH;EAAE,CAFgD;EAE9CC,MAAM,EAAE;IAAED,QAAQ,EAAE,CAAC,kBAAD,EAAqB,UAArB,CAAZ;IAA8CzD,QAAQ,EAAE,CAAC,kBAAD,EAAqB,UAArB,CAAxD;IAA0FC,IAAI,EAAE,CAAC,cAAD,EAAiB,MAAjB,CAAhG;IAA0HE,KAAK,EAAE,CAAC,eAAD,EAAkB,OAAlB,CAAjI;IAA6JG,OAAO,EAAE,CAAC,iBAAD,EAAoB,SAApB,CAAtK;IAAsME,OAAO,EAAE,CAAC,UAAD,EAAa,SAAb,CAA/M;IAAwOK,WAAW,EAAE,CAAC,qBAAD,EAAwB,aAAxB,CAArP;IAA6RI,MAAM,EAAE,CAAC,gBAAD,EAAmB,QAAnB;EAArS,CAFsC;EAE+R0C,QAAQ,EAAE,CAAC1E,MAAM,CAAC2E,0BAAR;AAFzS,CAAzB,CAA9B;AAGA;;AACAtE,QAAQ,CAACuE,cAAT,GAA0B,MAAM,CAC5B;EAAEb,IAAI,EAAEc,SAAR;EAAmBC,UAAU,EAAE,CAAC;IAAEf,IAAI,EAAEpE;EAAR,CAAD,EAAqB;IAAEoE,IAAI,EAAEvE,MAAR;IAAgBuF,IAAI,EAAE,CAAC1F,QAAD;EAAtB,CAArB;AAA/B,CAD4B,EAE5B;EAAE0E,IAAI,EAAErE;AAAR,CAF4B,EAG5B;EAAEqE,IAAI,EAAExE;AAAR,CAH4B,EAI5B;EAAEwE,IAAI,EAAE7E;AAAR,CAJ4B,EAK5B;EAAE6E,IAAI,EAAEnE;AAAR,CAL4B,CAAhC;;AAOAS,QAAQ,CAAC2E,cAAT,GAA0B;EACtB9D,KAAK,EAAE,CAAC;IAAE6C,IAAI,EAAEtE,KAAR;IAAesF,IAAI,EAAE,CAAC,eAAD;EAArB,CAAD,CADe;EAEtB1D,OAAO,EAAE,CAAC;IAAE0C,IAAI,EAAEtE,KAAR;IAAesF,IAAI,EAAE,CAAC,iBAAD;EAArB,CAAD,CAFa;EAGtBhE,QAAQ,EAAE,CAAC;IAAEgD,IAAI,EAAEtE,KAAR;IAAesF,IAAI,EAAE,CAAC,kBAAD;EAArB,CAAD,CAHY;EAItBxD,OAAO,EAAE,CAAC;IAAEwC,IAAI,EAAEtE,KAAR;IAAesF,IAAI,EAAE,CAAC,UAAD;EAArB,CAAD,CAJa;EAKtBnD,WAAW,EAAE,CAAC;IAAEmC,IAAI,EAAEtE,KAAR;IAAesF,IAAI,EAAE,CAAC,qBAAD;EAArB,CAAD,CALS;EAMtB/D,IAAI,EAAE,CAAC;IAAE+C,IAAI,EAAEtE,KAAR;IAAesF,IAAI,EAAE,CAAC,cAAD;EAArB,CAAD,CANgB;EAOtB/C,MAAM,EAAE,CAAC;IAAE+B,IAAI,EAAEtE,KAAR;IAAesF,IAAI,EAAE,CAAC,gBAAD;EAArB,CAAD;AAPc,CAA1B;;AASA,CAAC,YAAY;EAAE,CAAC,OAAOE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDjF,MAAM,CAACkF,iBAAP,CAAyB7E,QAAzB,EAAmC,CAAC;IAC9F0D,IAAI,EAAEzE,SADwF;IAE9FyF,IAAI,EAAE,CAAC;MACCI,QAAQ,EAAE,YADX;MAECV,MAAM,EAAE,CAAC,4BAAD,CAFT;MAGCW,IAAI,EAAE;QACF,SAAS,WADP;QAEF,6BAA6B,SAF3B;QAGF,2BAA2B,WAHzB;QAIF,2BAA2B,YAJzB;QAKF,4BAA4B,YAL1B;QAMF,2BAA2B,WANzB;QAOF,2BAA2B,kBAPzB;QAQF,4BAA4B,mBAR1B;QASF,2BAA2B,kBATzB;QAUF,4BAA4B,wBAV1B;QAWF,8BAA8B;MAX5B;IAHP,CAAD;EAFwF,CAAD,CAAnC,EAmB1D,YAAY;IAAE,OAAO,CAAC;MAAErB,IAAI,EAAEc,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAC9Cf,IAAI,EAAEpE;MADwC,CAAD,EAE9C;QACCoE,IAAI,EAAEvE,MADP;QAECuF,IAAI,EAAE,CAAC1F,QAAD;MAFP,CAF8C;IAA/B,CAAD,EAKX;MAAE0E,IAAI,EAAE/D,MAAM,CAACN;IAAf,CALW,EAKc;MAAEqE,IAAI,EAAE/D,MAAM,CAACT;IAAf,CALd,EAK2C;MAAEwE,IAAI,EAAE9D,MAAM,CAACf;IAAf,CAL3C,EAK2E;MAAE6E,IAAI,EAAE/D,MAAM,CAACJ;IAAf,CAL3E,CAAP;EAKgH,CAxBpE,EAwBsE;IAAEmB,QAAQ,EAAE,CAAC;MACzIgD,IAAI,EAAEtE,KADmI;MAEzIsF,IAAI,EAAE,CAAC,kBAAD;IAFmI,CAAD,CAAZ;IAG5H/D,IAAI,EAAE,CAAC;MACP+C,IAAI,EAAEtE,KADC;MAEPsF,IAAI,EAAE,CAAC,cAAD;IAFC,CAAD,CAHsH;IAM5H7D,KAAK,EAAE,CAAC;MACR6C,IAAI,EAAEtE,KADE;MAERsF,IAAI,EAAE,CAAC,eAAD;IAFE,CAAD,CANqH;IAS5H1D,OAAO,EAAE,CAAC;MACV0C,IAAI,EAAEtE,KADI;MAEVsF,IAAI,EAAE,CAAC,iBAAD;IAFI,CAAD,CATmH;IAY5HxD,OAAO,EAAE,CAAC;MACVwC,IAAI,EAAEtE,KADI;MAEVsF,IAAI,EAAE,CAAC,UAAD;IAFI,CAAD,CAZmH;IAe5HnD,WAAW,EAAE,CAAC;MACdmC,IAAI,EAAEtE,KADQ;MAEdsF,IAAI,EAAE,CAAC,qBAAD;IAFQ,CAAD,CAf+G;IAkB5H/C,MAAM,EAAE,CAAC;MACT+B,IAAI,EAAEtE,KADG;MAETsF,IAAI,EAAE,CAAC,gBAAD;IAFG,CAAD;EAlBoH,CAxBtE,CAAnD;AA6CC,CA7ChB;AA+CA;AACA;AACA;AACA;;;AACA,MAAMM,cAAN,CAAqB;;AAErBA,cAAc,CAAC5B,IAAf,GAAsB,SAAS6B,sBAAT,CAAgC3B,CAAhC,EAAmC;EAAE,OAAO,KAAKA,CAAC,IAAI0B,cAAV,GAAP;AAAqC,CAAhG;;AACAA,cAAc,CAACE,IAAf,GAAsB,aAAcvF,MAAM,CAACwF,gBAAP,CAAwB;EAAEzB,IAAI,EAAEsB;AAAR,CAAxB,CAApC;AACAA,cAAc,CAACI,IAAf,GAAsB,aAAczF,MAAM,CAAC0F,gBAAP,CAAwB;EAAEC,OAAO,EAAE,CAACxG,UAAD,EAC/DY,eAD+D;AAAX,CAAxB,CAApC;;AAEA,CAAC,YAAY;EAAE,CAAC,OAAOkF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDjF,MAAM,CAACkF,iBAAP,CAAyBG,cAAzB,EAAyC,CAAC;IACpGtB,IAAI,EAAElE,QAD8F;IAEpGkF,IAAI,EAAE,CAAC;MACCY,OAAO,EAAE,CACLxG,UADK,EAELY,eAFK,CADV;MAKC6F,OAAO,EAAE,CAACvF,QAAD,CALV;MAMCwF,YAAY,EAAE,CAACxF,QAAD;IANf,CAAD;EAF8F,CAAD,CAAzC,EAU1D,IAV0D,EAUpD,IAVoD,CAAnD;AAUO,CAVtB;;AAWA,CAAC,YAAY;EAAE,CAAC,OAAOyF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD9F,MAAM,CAAC+F,kBAAP,CAA0BV,cAA1B,EAA0C;IAAEQ,YAAY,EAAE,YAAY;MAAE,OAAO,CAACxF,QAAD,CAAP;IAAoB,CAAlD;IAAoDsF,OAAO,EAAE,YAAY;MAAE,OAAO,CAACxG,UAAD,EACtLY,eADsL,CAAP;IAC5J,CADiF;IAC/E6F,OAAO,EAAE,YAAY;MAAE,OAAO,CAACvF,QAAD,CAAP;IAAoB;EADoC,CAA1C,CAAnD;AAC+D,CAD9E;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA,SAASgF,cAAT,EAAyBlF,YAAzB,EAAuCC,kBAAvC,EAA2DC,QAA3D"},"metadata":{},"sourceType":"module"}