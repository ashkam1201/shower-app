{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription, defer, fromEvent, merge, of, Subject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nconst _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n  }\n}\n\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\n\nclass MatAutocompleteSelectedEvent {\n  /**\n   * @param {?} source\n   * @param {?} option\n   */\n  constructor(source, option) {\n    this.source = source;\n    this.option = option;\n  }\n\n}\n/**\n * \\@docs-private\n */\n\n\nclass MatAutocompleteBase {}\n/** @type {?} */\n\n\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** *\n * Injection token to be used to override the default options for `mat-autocomplete`.\n  @type {?} */\n\n\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} defaults\n   */\n  constructor(_changeDetectorRef, _elementRef, defaults) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     */\n\n    this.showPanel = false;\n    this._isOpen = false;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     */\n\n    this.displayWith = null;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     */\n\n    this.optionSelected = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     */\n\n    this.opened = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     */\n\n    this.closed = new EventEmitter();\n    this._classList = {};\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     */\n\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n  /**\n   * Whether the autocomplete panel is open.\n   * @return {?}\n   */\n\n\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   * @return {?}\n   */\n\n\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set classList(value) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap(); // Set the initial visibility state.\n\n    this._setVisibility();\n  }\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   * @param {?} scrollTop\n   * @return {?}\n   */\n\n\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /**\n   * Returns the panel's scrollTop.\n   * @return {?}\n   */\n\n\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /**\n   * Panel should hide itself when the option list is empty.\n   * @return {?}\n   */\n\n\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Emits the `select` event.\n   * @param {?} option\n   * @return {?}\n   */\n\n\n  _emitSelectEvent(option) {\n    /** @type {?} */\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n}\n\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) {\n  return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS));\n};\n\nMatAutocomplete.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  viewQuery: function MatAutocomplete_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\",\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    classList: [\"class\", \"classList\"],\n    panelWidth: \"panelWidth\"\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    }\n  },\n  dependencies: [ɵngcc1.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatAutocomplete.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n  }]\n}];\n\nMatAutocomplete.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    displayWith: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }],\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup]\n    }],\n    panelWidth: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nclass MatAutocompleteOrigin {\n  /**\n   * @param {?} elementRef\n   */\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n  }\n\n}\n\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) {\n  return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"]\n});\n/** @nocollapse */\n\nMatAutocompleteOrigin.ctorParameters = () => [{\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The height of each autocomplete option.\n  @type {?} */\n\n\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** *\n * The total height of the autocomplete panel.\n  @type {?} */\n\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** *\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n  @type {?} */\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/** *\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n  @type {?} */\n\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\nclass MatAutocompleteTrigger {\n  /**\n   * @param {?} _element\n   * @param {?} _overlay\n   * @param {?} _viewContainerRef\n   * @param {?} _zone\n   * @param {?} _changeDetectorRef\n   * @param {?} scrollStrategy\n   * @param {?} _dir\n   * @param {?} _formField\n   * @param {?} _document\n   * @param {?=} _viewportRuler\n   */\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /**\n     * Whether or not the label state is being overridden.\n     */\n\n    this._manuallyFloatingLabel = false;\n    /**\n     * Subscription to viewport size changes.\n     */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n\n    this._canOpenOnNextFocus = true;\n    /**\n     * Stream of keyboard events that can close the panel.\n     */\n\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /**\n     * `View -> model callback called when value changes`\n     */\n\n\n    this._onChange = () => {};\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     */\n\n\n    this._onTouched = () => {};\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     */\n\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /**\n     * Stream of autocomplete option selections.\n     */\n\n    this.optionSelections = defer(() => {\n      if (this.autocomplete && this.autocomplete.options) {\n        return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return this._zone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   * @return {?}\n   */\n\n\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n\n    this._componentDestroyed = true;\n\n    this._destroyPanel();\n\n    this._closeKeyEventStream.complete();\n  }\n  /**\n   * Whether or not the autocomplete panel is open.\n   * @return {?}\n   */\n\n\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /**\n   * Opens the autocomplete suggestion panel.\n   * @return {?}\n   */\n\n\n  openPanel() {\n    this._attachOverlay();\n\n    this._floatLabel();\n  }\n  /**\n   * Closes the autocomplete suggestion panel.\n   * @return {?}\n   */\n\n\n  closePanel() {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n\n      this._closingActionsSubscription.unsubscribe();\n    } // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   * @return {?}\n   */\n\n\n  updatePosition() {\n    if (this._overlayAttached) {\n      /** @type {?} */\n      this._overlayRef.updatePosition();\n    }\n  }\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   * @return {?}\n   */\n\n\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe( // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /**\n   * The currently active option, coerced to MatOption type.\n   * @return {?}\n   */\n\n\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n  /**\n   * Stream of clicks outside of the autocomplete panel.\n   * @return {?}\n   */\n\n\n  _getOutsideClickStream() {\n    if (!this._document) {\n      return of(null);\n    }\n\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      /** @type {?} */\n      const clickTarget =\n      /** @type {?} */\n      event.target;\n      /** @type {?} */\n\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  writeValue(value) {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n\n\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n\n      this._resetActiveItem();\n\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      /** @type {?} */\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      /** @type {?} */\n\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleInput(event) {\n    /** @type {?} */\n    let target =\n    /** @type {?} */\n    event.target;\n    /** @type {?} */\n\n    let value = target.value; // Based on `NumberValueAccessor` from forms.\n\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    } // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n\n      this._attachOverlay();\n\n      this._floatLabel(true);\n    }\n  }\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n   * @return {?}\n   */\n\n\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /**\n   * If the label has been manually elevated, return it to its normal state.\n   * @return {?}\n   */\n\n\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   * @return {?}\n   */\n\n\n  _scrollToOption() {\n    /** @type {?} */\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    /** @type {?} */\n\n    const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n    /** @type {?} */\n\n\n    const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   * @return {?}\n   */\n\n\n  _subscribeToClosingActions() {\n    /** @type {?} */\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    /** @type {?} */\n\n\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0)); // When the zone is stable initially, and when the option list changes...\n\n    return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      this._resetActiveItem();\n\n      this.autocomplete._setVisibility();\n\n      if (this.panelOpen) {\n        /** @type {?} */\n        this._overlayRef.updatePosition();\n      }\n\n      return this.panelClosingActions;\n    }), // when the first closing event occurs...\n    take(1)) // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /**\n   * Destroys the autocomplete suggestion panel.\n   * @return {?}\n   */\n\n\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n\n      this._overlayRef.dispose();\n\n      this._overlayRef = null;\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _setTriggerValue(value) {\n    /** @type {?} */\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    /** @type {?} */\n\n    const inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _setValueAndClose(event) {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n\n      this._setTriggerValue(event.source.value);\n\n      this._onChange(event.source.value);\n\n      this._element.nativeElement.focus();\n\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   * @param {?} skip\n   * @return {?}\n   */\n\n\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _attachOverlay() {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig()); // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || event.keyCode === UP_ARROW && event.altKey) {\n          this._resetActiveItem();\n\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({\n              width: this._getPanelWidth()\n            });\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n    /** @type {?} */\n\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n\n    this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _getOverlayPosition() {\n    this._positionStrategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false).withPositions([{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    }]);\n    return this._positionStrategy;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /**\n   * Returns the width of the input element, so the panel width can match it.\n   * @return {?}\n   */\n\n\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   * @return {?}\n   */\n\n\n  _resetActiveItem() {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n  /**\n   * Determines whether the panel can be opened.\n   * @return {?}\n   */\n\n\n  _canOpen() {\n    /** @type {?} */\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) {\n  return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MatFormField, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler));\n};\n\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostVars: 6,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.activeOption == null ? null : ctx.activeOption.id)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id);\n    }\n  },\n  inputs: {\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR])]\n});\n/** @nocollapse */\n\nMatAutocompleteTrigger.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Overlay\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Host\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ViewportRuler\n}];\n\nMatAutocompleteTrigger.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n      host: {\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': 'activeOption?.id',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.Overlay\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc5.ViewportRuler\n    }];\n  }, {\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }],\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatAutocompleteModule {}\n\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n  return new (t || MatAutocompleteModule)();\n};\n\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function () {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function () {\n      return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule];\n    },\n    exports: function () {\n      return [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MatAutocompleteBase, _MatAutocompleteMixinBase, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin as ɵa30 };","map":{"version":3,"names":["ActiveDescendantKeyManager","coerceBooleanProperty","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","ElementRef","EventEmitter","Inject","InjectionToken","Input","Output","TemplateRef","ViewChild","ViewEncapsulation","Directive","forwardRef","Host","NgZone","Optional","ViewContainerRef","NgModule","MAT_OPTION_PARENT_COMPONENT","MatOptgroup","MatOption","mixinDisableRipple","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionSelectionChange","MatOptionModule","MatCommonModule","Directionality","DOWN_ARROW","ENTER","ESCAPE","TAB","UP_ARROW","Overlay","OverlayConfig","OverlayModule","TemplatePortal","DOCUMENT","CommonModule","filter","take","switchMap","delay","tap","map","ViewportRuler","NG_VALUE_ACCESSOR","MatFormField","Subscription","defer","fromEvent","merge","of","Subject","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵproperty","id","_classList","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","showPanel","_isOpen","displayWith","optionSelected","opened","closed","_autoActiveFirstOption","isOpen","value","classList","length","split","forEach","className","trim","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","_setVisibility","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","emit","ɵfac","MatAutocomplete_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","optionGroups","viewQuery","MatAutocomplete_Query","ɵɵviewQuery","template","first","hostAttrs","inputs","disableRipple","panelWidth","outputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","dependencies","NgClass","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","descendants","ngDevMode","ɵsetClassMetadata","selector","None","OnPush","host","providers","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","ɵɵdefineDirective","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","EMPTY","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","document","activeElement","panelOpen","_onChange","_onTouched","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","asObservable","pipe","window","runOutsideAngular","addEventListener","_scrollStrategy","autocompleteDisabled","ngOnDestroy","removeEventListener","unsubscribe","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_overlayRef","hasAttached","detach","_closingActionsSubscription","detectChanges","updatePosition","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","target","formField","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","_handleInput","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","index","activeItemIndex","labelCount","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","changes","_positionStrategy","reapplyLastPosition","subscribe","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","selected","deselect","_portal","create","_getOverlayConfig","keydownEvents","altKey","next","change","updateSize","width","_getPanelWidth","attach","wasOpen","positionStrategy","_getOverlayPosition","direction","position","flexibleConnectedTo","_getConnectedElement","withFlexibleDimensions","withPush","withPositions","originX","originY","overlayX","overlayY","panelClass","connectedTo","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","MatAutocompleteTrigger_keydown_HostBindingHandler","ɵɵattribute","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵa30"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/autocomplete.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription, defer, fromEvent, merge, of, Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** *\n * Injection token to be used to override the default options for `mat-autocomplete`.\n  @type {?} */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            value.split(' ').forEach(className => this._classList[className.trim()] = true);\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mat-autocomplete-visible'] = this.showPanel;\n        this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, dependencies: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef,] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{ selector: 'mat-autocomplete', template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                    'class': 'mat-autocomplete'\n                }, providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"] }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The height of each autocomplete option.\n  @type {?} */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** *\n * The total height of the autocomplete panel.\n  @type {?} */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** *\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n  @type {?} */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** *\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n  @type {?} */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = () => { };\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = () => { };\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        if (typeof window !== 'undefined') {\n            _zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            });\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            /** @type {?} */ ((this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        if (!this._document) {\n            return of(null);\n        }\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            /** @type {?} */\n            const clickTarget = /** @type {?} */ (event.target);\n            /** @type {?} */\n            const formField = this._formField ?\n                this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = /** @type {?} */ (event.target);\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value && document.activeElement === event.target) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen()) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        /** @type {?} */\n        const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n        this.autocomplete._setScrollTop(newScrollPosition);\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                /** @type {?} */ ((this._overlayRef)).updatePosition();\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        if (!this._overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            this._overlayRef = this._overlay.create(this._getOverlayConfig());\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            this._overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                }\n            });\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && this._overlayRef) {\n                        this._overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                });\n            }\n        }\n        else {\n            // Update the panel width and direction, in case anything has changed.\n            this._overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (this._overlayRef && !this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        this._positionStrategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                // The overlay edge connected to the trigger should have squared corners, while\n                // the opposite end has rounded corners. We apply a CSS class to swap the\n                // border-radius based on the overlay position.\n                panelClass: 'mat-autocomplete-panel-above'\n            }\n        ]);\n        return this._positionStrategy;\n    }\n    /**\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MatFormField, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostVars: 6, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.activeOption == null ? null : ctx.activeOption.id)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id);\n    } }, inputs: { autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR])] });\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': 'activeOption?.id',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }]; }, { autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule, MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MatAutocompleteBase, _MatAutocompleteMixinBase, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin as ɵa30 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}