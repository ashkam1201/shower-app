{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Used to generate unique ID for each accordion.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n\nclass CdkAccordion {\n  constructor() {\n    /**\n     * Emits when the state of the accordion changes\n     */\n    this._stateChanges = new Subject();\n    /**\n     * Stream that emits true/false when openAll/closeAll is triggered.\n     */\n\n    this._openCloseAllActions = new Subject();\n    /**\n     * A readonly id value to use for unique selection coordination.\n     */\n\n    this.id = `cdk-accordion-${nextId++}`;\n    this._multi = false;\n  }\n  /**\n   * Whether the accordion should allow multiple expanded accordion items simultaneously.\n   * @return {?}\n   */\n\n\n  get multi() {\n    return this._multi;\n  }\n  /**\n   * @param {?} multi\n   * @return {?}\n   */\n\n\n  set multi(multi) {\n    this._multi = coerceBooleanProperty(multi);\n  }\n  /**\n   * Opens all enabled accordion items in an accordion where multi is enabled.\n   * @return {?}\n   */\n\n\n  openAll() {\n    this._openCloseAll(true);\n  }\n  /**\n   * Closes all enabled accordion items in an accordion where multi is enabled.\n   * @return {?}\n   */\n\n\n  closeAll() {\n    this._openCloseAll(false);\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    this._stateChanges.next(changes);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n  /**\n   * @param {?} expanded\n   * @return {?}\n   */\n\n\n  _openCloseAll(expanded) {\n    if (this.multi) {\n      this._openCloseAllActions.next(expanded);\n    }\n  }\n\n}\n\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) {\n  return new (t || CdkAccordion)();\n};\n\nCdkAccordion.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAccordion,\n  selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]],\n  inputs: {\n    multi: \"multi\"\n  },\n  exportAs: [\"cdkAccordion\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkAccordion.propDecorators = {\n  multi: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion, [cdkAccordion]',\n      exportAs: 'cdkAccordion'\n    }]\n  }], function () {\n    return [];\n  }, {\n    multi: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Used to generate unique ID for each accordion item.\n  @type {?} */\n\n\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n\nclass CdkAccordionItem {\n  /**\n   * @param {?} accordion\n   * @param {?} _changeDetectorRef\n   * @param {?} _expansionDispatcher\n   */\n  constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n    this.accordion = accordion;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._expansionDispatcher = _expansionDispatcher;\n    /**\n     * Subscription to openAll/closeAll events.\n     */\n\n    this._openCloseAllSubscription = Subscription.EMPTY;\n    /**\n     * Event emitted every time the AccordionItem is closed.\n     */\n\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted every time the AccordionItem is opened.\n     */\n\n    this.opened = new EventEmitter();\n    /**\n     * Event emitted when the AccordionItem is destroyed.\n     */\n\n    this.destroyed = new EventEmitter();\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * \\@docs-private\n     */\n\n    this.expandedChange = new EventEmitter();\n    /**\n     * The unique AccordionItem id.\n     */\n\n    this.id = `cdk-accordion-child-${nextId$1++}`;\n    this._expanded = false;\n    this._disabled = false;\n    /**\n     * Unregister function for _expansionDispatcher.\n     */\n\n    this._removeUniqueSelectionListener = () => {};\n\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen((id, accordionId) => {\n      if (this.accordion && !this.accordion.multi && this.accordion.id === accordionId && this.id !== id) {\n        this.expanded = false;\n      }\n    }); // When an accordion item is hosted in an accordion, subscribe to open/close events.\n\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n  /**\n   * Whether the AccordionItem is expanded.\n   * @return {?}\n   */\n\n\n  get expanded() {\n    return this._expanded;\n  }\n  /**\n   * @param {?} expanded\n   * @return {?}\n   */\n\n\n  set expanded(expanded) {\n    expanded = coerceBooleanProperty(expanded); // Only emit events and update the internal value if the value changes.\n\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /** *\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n          @type {?} */\n\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      } // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the AccordionItem is disabled.\n   * @return {?}\n   */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} disabled\n   * @return {?}\n   */\n\n\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  /**\n   * Emits an event for the accordion item being destroyed.\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n\n    this._removeUniqueSelectionListener();\n\n    this._openCloseAllSubscription.unsubscribe();\n  }\n  /**\n   * Toggles the expanded state of the accordion item.\n   * @return {?}\n   */\n\n\n  toggle() {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n  /**\n   * Sets the expanded state of the accordion item to false.\n   * @return {?}\n   */\n\n\n  close() {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n  /**\n   * Sets the expanded state of the accordion item to true.\n   * @return {?}\n   */\n\n\n  open() {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _subscribeToOpenCloseAllActions() {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n\n}\n\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) {\n  return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher));\n};\n\nCdkAccordionItem.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAccordionItem,\n  selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]],\n  inputs: {\n    expanded: \"expanded\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    closed: \"closed\",\n    opened: \"opened\",\n    destroyed: \"destroyed\",\n    expandedChange: \"expandedChange\"\n  },\n  exportAs: [\"cdkAccordionItem\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([// Provide CdkAccordion as undefined to prevent nested accordion items from registering\n  // to the same accordion.\n  {\n    provide: CdkAccordion,\n    useValue: ɵ0\n  }])]\n});\n/** @nocollapse */\n\nCdkAccordionItem.ctorParameters = () => [{\n  type: CdkAccordion,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: UniqueSelectionDispatcher\n}];\n\nCdkAccordionItem.propDecorators = {\n  closed: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  expandedChange: [{\n    type: Output\n  }],\n  expanded: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion-item, [cdkAccordionItem]',\n      exportAs: 'cdkAccordionItem',\n      providers: [// Provide CdkAccordion as undefined to prevent nested accordion items from registering\n      // to the same accordion.\n      {\n        provide: CdkAccordion,\n        useValue: ɵ0\n      }]\n    }]\n  }], function () {\n    return [{\n      type: CdkAccordion,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.UniqueSelectionDispatcher\n    }];\n  }, {\n    closed: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    expandedChange: [{\n      type: Output\n    }],\n    expanded: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass CdkAccordionModule {}\n\nCdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) {\n  return new (t || CdkAccordionModule)();\n};\n\nCdkAccordionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkAccordionModule\n});\nCdkAccordionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkAccordion, CdkAccordionItem],\n      declarations: [CdkAccordion, CdkAccordionItem]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, {\n    declarations: [CdkAccordion, CdkAccordionItem],\n    exports: [CdkAccordion, CdkAccordionItem]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule };","map":{"version":3,"names":["coerceBooleanProperty","Directive","Input","Output","EventEmitter","Optional","ChangeDetectorRef","SkipSelf","NgModule","Subject","Subscription","UniqueSelectionDispatcher","ɵngcc0","ɵngcc1","nextId","CdkAccordion","constructor","_stateChanges","_openCloseAllActions","id","_multi","multi","openAll","_openCloseAll","closeAll","ngOnChanges","changes","next","ngOnDestroy","complete","expanded","ɵfac","CdkAccordion_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","inputs","exportAs","features","ɵɵNgOnChangesFeature","propDecorators","ngDevMode","ɵsetClassMetadata","args","selector","nextId$1","ɵ0","undefined","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","EMPTY","closed","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","unsubscribe","toggle","close","open","subscribe","CdkAccordionItem_Factory","ɵɵdirectiveInject","outputs","ɵɵProvidersFeature","provide","useValue","ctorParameters","decorators","providers","CdkAccordionModule","CdkAccordionModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/accordion.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Used to generate unique ID for each accordion.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /**\n         * Emits when the state of the accordion changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * Stream that emits true/false when openAll/closeAll is triggered.\n         */\n        this._openCloseAllActions = new Subject();\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = `cdk-accordion-${nextId++}`;\n        this._multi = false;\n    }\n    /**\n     * Whether the accordion should allow multiple expanded accordion items simultaneously.\n     * @return {?}\n     */\n    get multi() { return this._multi; }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    openAll() {\n        this._openCloseAll(true);\n    }\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    closeAll() {\n        this._openCloseAll(false);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    _openCloseAll(expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    }\n}\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkAccordion.propDecorators = {\n    multi: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion'\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Used to generate unique ID for each accordion item.\n  @type {?} */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Subscription to openAll/closeAll events.\n         */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * \\@docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = `cdk-accordion-child-${nextId$1++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /**\n         * Unregister function for _expansionDispatcher.\n         */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /**\n     * Whether the AccordionItem is expanded.\n     * @return {?}\n     */\n    get expanded() { return this._expanded; }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /** *\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                  @type {?} */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the AccordionItem is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n}\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n            // to the same accordion.\n            { provide: CdkAccordion, useValue: ɵ0 },\n        ])] });\n/** @nocollapse */\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher }\n];\nCdkAccordionItem.propDecorators = {\n    closed: [{ type: Output }],\n    opened: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    expandedChange: [{ type: Output }],\n    expanded: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); };\nCdkAccordionModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}