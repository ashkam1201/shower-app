{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\nimport { MatLine, MatLineSetter, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\";\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nclass MatGridTile {\n  /**\n   * @param {?} _element\n   * @param {?=} _gridList\n   */\n  constructor(_element, _gridList) {\n    this._element = _element;\n    this._gridList = _gridList;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /**\n   * Amount of rows that the grid tile takes up.\n   * @return {?}\n   */\n\n\n  get rowspan() {\n    return this._rowspan;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set rowspan(value) {\n    this._rowspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Amount of columns that the grid tile takes up.\n   * @return {?}\n   */\n\n\n  get colspan() {\n    return this._colspan;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set colspan(value) {\n    this._colspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   * @param {?} property\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _setStyle(property, value) {\n    /** @type {?} */\n    this._element.nativeElement.style[property] = value;\n  }\n\n}\n\nMatGridTile.ɵfac = function MatGridTile_Factory(t) {\n  return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n};\n\nMatGridTile.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTile,\n  selectors: [[\"mat-grid-tile\"]],\n  hostAttrs: [1, \"mat-grid-tile\"],\n  inputs: {\n    rowspan: \"rowspan\",\n    colspan: \"colspan\"\n  },\n  exportAs: [\"matGridTile\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-figure\"]],\n  template: function MatGridTile_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTile.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_GRID_LIST]\n  }]\n}];\n\nMatGridTile.propDecorators = {\n  rowspan: [{\n    type: Input\n  }],\n  colspan: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile'\n      },\n      template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_GRID_LIST]\n      }]\n    }];\n  }, {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatGridTileText {\n  /**\n   * @param {?} _element\n   */\n  constructor(_element) {\n    this._element = _element;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n}\n\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) {\n  return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatGridTileText.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTileText,\n  selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n  contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"mat-grid-list-text\"]],\n  template: function MatGridTileText_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(3, 2);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTileText.ctorParameters = () => [{\n  type: ElementRef\n}];\n\nMatGridTileText.propDecorators = {\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nclass MatGridAvatarCssMatStyler {}\n\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) {\n  return new (t || MatGridAvatarCssMatStyler)();\n};\n\nMatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-grid-avatar\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nclass MatGridTileHeaderCssMatStyler {}\n\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) {\n  return new (t || MatGridTileHeaderCssMatStyler)();\n};\n\nMatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileHeaderCssMatStyler,\n  selectors: [[\"mat-grid-tile-header\"]],\n  hostAttrs: [1, \"mat-grid-tile-header\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nclass MatGridTileFooterCssMatStyler {}\n\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) {\n  return new (t || MatGridTileFooterCssMatStyler)();\n};\n\nMatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileFooterCssMatStyler,\n  selectors: [[\"mat-grid-tile-footer\"]],\n  hostAttrs: [1, \"mat-grid-tile-footer\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\n\n\nclass TileCoordinator {\n  constructor() {\n    /**\n     * Index at which the search for the next gap will start.\n     */\n    this.columnIndex = 0;\n    /**\n     * The current row index.\n     */\n\n    this.rowIndex = 0;\n  }\n  /**\n   * Gets the total number of rows occupied by tiles\n   * @return {?}\n   */\n\n\n  get rowCount() {\n    return this.rowIndex + 1;\n  }\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   * @return {?}\n   */\n\n\n  get rowspan() {\n    /** @type {?} */\n    const lastRowMax = Math.max(...this.tracker); // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n  /**\n   * Updates the tile positions.\n   * @param {?} numColumns Amount of columns in the grid.\n   * @param {?} tiles\n   * @return {?}\n   */\n\n\n  update(numColumns, tiles) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n  /**\n   * Calculates the row and col position of a tile.\n   * @param {?} tile\n   * @return {?}\n   */\n\n\n  _trackTile(tile) {\n    /** @type {?} */\n    const gapStartIndex = this._findMatchingGap(tile.colspan); // Place tile in the resulting gap.\n\n\n    this._markTilePosition(gapStartIndex, tile); // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n\n\n    this.columnIndex = gapStartIndex + tile.colspan;\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n  /**\n   * Finds the next available space large enough to fit the tile.\n   * @param {?} tileCols\n   * @return {?}\n   */\n\n\n  _findMatchingGap(tileCols) {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` + `grid with cols=\"${this.tracker.length}\".`);\n    }\n    /** @type {?} */\n\n\n    let gapStartIndex = -1;\n    /** @type {?} */\n\n    let gapEndIndex = -1; // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex); // If there are no more empty spaces in this row at all, move on to the next row.\n\n      if (gapStartIndex == -1) {\n        this._nextRow();\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex); // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n\n      this.columnIndex = gapStartIndex + 1; // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0); // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n\n\n    return Math.max(gapStartIndex, 0);\n  }\n  /**\n   * Move \"down\" to the next row.\n   * @return {?}\n   */\n\n\n  _nextRow() {\n    this.columnIndex = 0;\n    this.rowIndex++; // Decrement all spaces by one to reflect moving down one row.\n\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   * @param {?} gapStartIndex\n   * @return {?}\n   */\n\n\n  _findGapEndIndex(gapStartIndex) {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    } // The gap ends with the end of the row.\n\n\n    return this.tracker.length;\n  }\n  /**\n   * Update the tile tracker to account for the given tile in the given space.\n   * @param {?} start\n   * @param {?} tile\n   * @return {?}\n   */\n\n\n  _markTilePosition(start, tile) {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\n\n\nclass TilePosition {\n  /**\n   * @param {?} row\n   * @param {?} col\n   */\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n  @type {?} */\n\n\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\n\nclass TileStyler {\n  constructor() {\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param {?} gutterSize Size of the grid's gutter.\n   * @param {?} tracker Instance of the TileCoordinator.\n   * @param {?} cols Amount of columns in the grid.\n   * @param {?} direction Layout direction of the grid.\n   * @return {?}\n   */\n\n\n  init(gutterSize, tracker, cols, direction) {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n\n\n  getBaseTileSize(sizePercent, gutterFraction) {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param {?} offset Number of tiles that have already been rendered in the row/column.\n   * @return {?} Position of the tile as a CSS calc() expression.\n   */\n\n\n  getTilePosition(baseSize, offset) {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param {?} span The tile's rowspan or colspan.\n   * @return {?} Size of the tile as a CSS calc() expression.\n   */\n\n\n  getTileSize(baseSize, span) {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param {?} tile Tile to which to apply the styling.\n   * @param {?} rowIndex Index of the tile's row.\n   * @param {?} colIndex Index of the tile's column.\n   * @return {?}\n   */\n\n\n  setStyle(tile, rowIndex, colIndex) {\n    /** @type {?} */\n    let percentWidthPerTile = 100 / this._cols;\n    /** @type {?} */\n\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n  /**\n   * Sets the horizontal placement of the tile in the list.\n   * @param {?} tile\n   * @param {?} colIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n\n\n  setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n    /** @type {?} */\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n    /** @type {?} */\n\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   * @return {?}\n   */\n\n\n  getGutterSpan() {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param {?} tileHeight Height of the tile.\n   * @return {?}\n   */\n\n\n  getTileSpan(tileHeight) {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  getComputedHeight() {\n    return null;\n  }\n\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\n\n\nclass FixedTileStyler extends TileStyler {\n  /**\n   * @param {?} fixedRowHeight\n   */\n  constructor(fixedRowHeight) {\n    super();\n    this.fixedRowHeight = fixedRowHeight;\n  }\n  /**\n   * @param {?} gutterSize\n   * @param {?} tracker\n   * @param {?} cols\n   * @param {?} direction\n   * @return {?}\n   */\n\n\n  init(gutterSize, tracker, cols, direction) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @return {?}\n   */\n\n\n  setRowStyles(tile, rowIndex) {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  getComputedHeight() {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n  /**\n   * @param {?} list\n   * @return {?}\n   */\n\n\n  reset(list) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n\n        tile._setStyle('height', null);\n      });\n    }\n  }\n\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\n\n\nclass RatioTileStyler extends TileStyler {\n  /**\n   * @param {?} value\n   */\n  constructor(value) {\n    super();\n\n    this._parseRatio(value);\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n\n\n  setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n    /** @type {?} */\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth); // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  getComputedHeight() {\n    return ['paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)];\n  }\n  /**\n   * @param {?} list\n   * @return {?}\n   */\n\n\n  reset(list) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n\n      tile._setStyle('paddingTop', null);\n    });\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _parseRatio(value) {\n    /** @type {?} */\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\n\n\nclass FitTileStyler extends TileStyler {\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @return {?}\n   */\n  setRowStyles(tile, rowIndex) {\n    /** @type {?} */\n    let percentHeightPerTile = 100 / this._rowspan;\n    /** @type {?} */\n\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n    /** @type {?} */\n\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n  /**\n   * @param {?} list\n   * @return {?}\n   */\n\n\n  reset(list) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n\n        tile._setStyle('height', null);\n      });\n    }\n  }\n\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\n\n\nfunction calc(exp) {\n  return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\n\n\nfunction normalizeUnits(value) {\n  return value.match(/px|em|rem/) ? value : value + 'px';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst MAT_FIT_MODE = 'fit';\n\nclass MatGridList {\n  /**\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  constructor(_element, _dir) {\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     */\n\n    this._gutter = '1px';\n  }\n  /**\n   * Amount of columns in the grid list.\n   * @return {?}\n   */\n\n\n  get cols() {\n    return this._cols;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set cols(value) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n  /**\n   * Size of the grid list's gutter in pixels.\n   * @return {?}\n   */\n\n\n  get gutterSize() {\n    return this._gutter;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set gutterSize(value) {\n    this._gutter = `${value || ''}`;\n  }\n  /**\n   * Set internal representation of row height from the user-provided value.\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set rowHeight(value) {\n    /** @type {?} */\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this._checkCols();\n\n    this._checkRowHeight();\n  }\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   * @return {?}\n   */\n\n\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n  /**\n   * Throw a friendly error if cols property is missing\n   * @return {?}\n   */\n\n\n  _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n  /**\n   * Default to equal width:height if rowHeight property is missing\n   * @return {?}\n   */\n\n\n  _checkRowHeight() {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n  /**\n   * Creates correct Tile Styler subtype based on rowHeight passed in by user\n   * @param {?} rowHeight\n   * @return {?}\n   */\n\n\n  _setTileStyler(rowHeight) {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n  /**\n   * Computes and applies the size and position for all children grid tiles.\n   * @return {?}\n   */\n\n\n  _layoutTiles() {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n    /** @type {?} */\n\n\n    const tracker = this._tileCoordinator;\n    /** @type {?} */\n\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    /** @type {?} */\n\n\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      /** @type {?} */\n      const pos = tracker.positions[index];\n\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n  /**\n   * Sets style on the main grid-list element, given the style name and value.\n   * @param {?} style\n   * @return {?}\n   */\n\n\n  _setListStyle(style) {\n    if (style) {\n      /** @type {?} */\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n\n}\n\nMatGridList.ɵfac = function MatGridList_Factory(t) {\n  return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nMatGridList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridList,\n  selectors: [[\"mat-grid-list\"]],\n  contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-grid-list\"],\n  inputs: {\n    cols: \"cols\",\n    gutterSize: \"gutterSize\",\n    rowHeight: \"rowHeight\"\n  },\n  exportAs: [\"matGridList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }])],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  template: function MatGridList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nMatGridList.propDecorators = {\n  _tiles: [{\n    type: ContentChildren,\n    args: [MatGridTile, {\n      descendants: true\n    }]\n  }],\n  cols: [{\n    type: Input\n  }],\n  gutterSize: [{\n    type: Input\n  }],\n  rowHeight: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      template: \"<div><ng-content></ng-content></div>\",\n      host: {\n        'class': 'mat-grid-list'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatGridListModule {}\n\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) {\n  return new (t || MatGridListModule)();\n};\n\nMatGridListModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatGridListModule\n});\nMatGridListModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [MatLineModule, MatCommonModule, MatLineModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      declarations: [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, {\n    declarations: function () {\n      return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    },\n    imports: function () {\n      return [MatLineModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa5 };","map":{"version":3,"names":["InjectionToken","Component","ViewEncapsulation","ElementRef","Input","Optional","ContentChildren","Directive","ChangeDetectionStrategy","Inject","NgModule","MatLine","MatLineSetter","MatLineModule","MatCommonModule","coerceNumberProperty","Directionality","ɵngcc0","ɵngcc1","_c0","_c1","_c2","_c3","MAT_GRID_LIST","MatGridTile","constructor","_element","_gridList","_rowspan","_colspan","rowspan","value","Math","round","colspan","_setStyle","property","nativeElement","style","ɵfac","MatGridTile_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","rf","ctx","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","None","OnPush","MatGridTileText","ngAfterContentInit","_lineSetter","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatGridTileText_Template","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","ɵɵdefineDirective","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","TileCoordinator","columnIndex","rowIndex","rowCount","lastRowMax","max","tracker","update","numColumns","tiles","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","rowHeight","newValue","_rowHeight","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","_tileStyler","_tileCoordinator","filter","index","pos","MatGridList_Factory","MatGridList_ContentQueries","features","ɵɵProvidersFeature","provide","useExisting","MatGridList_Template","descendants","providers","MatGridListModule","MatGridListModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵa5"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/grid-list.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\nimport { MatLine, MatLineSetter, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\";\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     * @param {?=} _gridList\n     */\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        (/** @type {?} */ (this._element.nativeElement.style))[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-tile', exportAs: 'matGridTile', host: {\n                    'class': 'mat-grid-tile'\n                }, template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._lineSetter = new MatLineSetter(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        /** @type {?} */\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles\n     * @return {?}\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        /** @type {?} */\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        /** @type {?} */\n        let gapStartIndex = -1;\n        /** @type {?} */\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n  @type {?} */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        /** @type {?} */\n        let percentWidthPerTile = 100 / this._cols;\n        /** @type {?} */\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        /** @type {?} */\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        /** @type {?} */\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        /** @type {?} */\n        let percentHeightPerTile = 100 / this._rowspan;\n        /** @type {?} */\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        /** @type {?} */\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = `${value || ''}`; }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        /** @type {?} */\n        const newValue = `${value || ''}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        /** @type {?} */\n        const tracker = this._tileCoordinator;\n        /** @type {?} */\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            /** @type {?} */\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            (/** @type {?} */ (this._element.nativeElement.style))[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-list', exportAs: 'matGridList', template: \"<div><ng-content></ng-content></div>\", host: {\n                    'class': 'mat-grid-list'\n                }, providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [MatLineModule, MatCommonModule, MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa5 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}