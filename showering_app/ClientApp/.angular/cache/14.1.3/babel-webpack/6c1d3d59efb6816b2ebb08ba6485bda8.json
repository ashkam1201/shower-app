{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable, BehaviorSubject, of, Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Directive, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Optional, Renderer2, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nclass BaseTreeControl {\n  constructor() {\n    /**\n     * A selection model with multi-selection to track expansion status.\n     */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /**\n   * Toggles one single data node's expanded/collapsed state.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  toggle(dataNode) {\n    this.expansionModel.toggle(dataNode);\n  }\n  /**\n   * Expands one single data node.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  expand(dataNode) {\n    this.expansionModel.select(dataNode);\n  }\n  /**\n   * Collapses one single data node.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  collapse(dataNode) {\n    this.expansionModel.deselect(dataNode);\n  }\n  /**\n   * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  isExpanded(dataNode) {\n    return this.expansionModel.isSelected(dataNode);\n  }\n  /**\n   * Toggles a subtree rooted at `node` recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  toggleDescendants(dataNode) {\n    this.expansionModel.isSelected(dataNode) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n  }\n  /**\n   * Collapse all dataNodes in the tree.\n   * @return {?}\n   */\n\n\n  collapseAll() {\n    this.expansionModel.clear();\n  }\n  /**\n   * Expands a subtree rooted at given data node recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  expandDescendants(dataNode) {\n    /** @type {?} */\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed);\n  }\n  /**\n   * Collapses a subtree rooted at given data node recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  collapseDescendants(dataNode) {\n    /** @type {?} */\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed);\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\n\n\nclass FlatTreeControl extends BaseTreeControl {\n  /**\n   * Construct with flat tree data node functions getLevel and isExpandable.\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   */\n  constructor(getLevel, isExpandable) {\n    super();\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  getDescendants(dataNode) {\n    /** @type {?} */\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    /** @type {?} */\n\n    const results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n\n    for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n      results.push(this.dataNodes[i]);\n    }\n\n    return results;\n  }\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   * @return {?}\n   */\n\n\n  expandAll() {\n    this.expansionModel.select(...this.dataNodes);\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\n\n\nclass NestedTreeControl extends BaseTreeControl {\n  /**\n   * Construct with nested tree function getChildren.\n   * @param {?} getChildren\n   */\n  constructor(getChildren) {\n    super();\n    this.getChildren = getChildren;\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   * @return {?}\n   */\n\n\n  expandAll() {\n    this.expansionModel.clear();\n    /** @type {?} */\n\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes);\n  }\n  /**\n   * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  getDescendants(dataNode) {\n    /** @type {?} */\n    const descendants = [];\n\n    this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n    return descendants.splice(1);\n  }\n  /**\n   * A helper function to get descendants recursively.\n   * @param {?} descendants\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  _getDescendants(descendants, dataNode) {\n    descendants.push(dataNode);\n    /** @type {?} */\n\n    const childrenNodes = this.getChildren(dataNode);\n\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach(child => this._getDescendants(descendants, child));\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(take(1)).subscribe(children => {\n        children.forEach(child => this._getDescendants(descendants, child));\n      });\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Context provided to the tree node component.\n * @template T\n */\n\n\nclass CdkTreeNodeOutletContext {\n  /**\n   * @param {?} data\n   */\n  constructor(data) {\n    this.$implicit = data;\n  }\n\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\n\n\nclass CdkTreeNodeDef {\n  /**\n   * \\@docs-private\n   * @param {?} template\n   */\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n  return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeDef,\n  selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"cdkTreeNodeDefWhen\", \"when\"]\n  }\n});\n/** @nocollapse */\n\nCdkTreeNodeDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeDef]',\n      inputs: ['when: cdkTreeNodeDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nclass CdkTreeNodeOutlet {\n  /**\n   * @param {?} viewContainer\n   */\n  constructor(viewContainer) {\n    this.viewContainer = viewContainer;\n  }\n\n}\n\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n  return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeOutlet,\n  selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nCdkTreeNodeOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\n\n\nclass CdkTree {\n  /**\n   * @param {?} _differs\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_differs, _changeDetectorRef) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    this._onDestroy = new Subject();\n    /**\n     * Level of nodes\n     */\n\n    this._levels = new Map();\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n  }\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   * @return {?}\n   */\n\n\n  get dataSource() {\n    return this._dataSource;\n  }\n  /**\n   * @param {?} dataSource\n   * @return {?}\n   */\n\n\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n    if (!this.treeControl) {\n      throw getTreeControlMissingError();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n\n    this._onDestroy.next();\n\n    this._onDestroy.complete();\n\n    if (this._dataSource && typeof\n    /** @type {?} */\n    this._dataSource.disconnect === 'function') {\n      /** @type {?} */\n      this.dataSource.disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n\n      this._dataSubscription = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentChecked() {\n    /** @type {?} */\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n\n    if (defaultNodeDefs.length > 1) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n\n    this._defaultNodeDef = defaultNodeDefs[0];\n\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   * @param {?} dataSource\n   * @return {?}\n   */\n\n\n  _switchDataSource(dataSource) {\n    if (this._dataSource && typeof\n    /** @type {?} */\n    this._dataSource.disconnect === 'function') {\n      /** @type {?} */\n      this.dataSource.disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n\n      this._dataSubscription = null;\n    } // Remove the all dataNodes if there is now no data source\n\n\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n  /**\n   * Set up a subscription for the data provided by the data source.\n   * @return {?}\n   */\n\n\n  _observeRenderChanges() {\n    /** @type {?} */\n    let dataStream; // Cannot use `instanceof DataSource` since the data source could be a literal with\n    // `connect` function and may not extends DataSource.\n\n    if (typeof\n    /** @type {?} */\n    this._dataSource.connect === 'function') {\n      dataStream =\n      /** @type {?} */\n      this._dataSource.connect(this);\n    } else if (this._dataSource instanceof Observable) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = of(this._dataSource);\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => this.renderNodeChanges(data));\n    } else {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n  /**\n   * Check for changes made in the data and render each change (node added/removed/moved).\n   * @param {?} data\n   * @param {?=} dataDiffer\n   * @param {?=} viewContainer\n   * @param {?=} parentData\n   * @return {?}\n   */\n\n\n  renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n    /** @type {?} */\n    const changes = dataDiffer.diff(data);\n\n    if (!changes) {\n      return;\n    }\n\n    changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n      if (item.previousIndex == null) {\n        this.insertNode(data[\n        /** @type {?} */\n        currentIndex],\n        /** @type {?} */\n        currentIndex, viewContainer, parentData);\n      } else if (currentIndex == null) {\n        viewContainer.remove(\n        /** @type {?} */\n        adjustedPreviousIndex);\n\n        this._levels.delete(item.item);\n      } else {\n        /** @type {?} */\n        const view = viewContainer.get(\n        /** @type {?} */\n        adjustedPreviousIndex);\n        viewContainer.move(\n        /** @type {?} */\n        view, currentIndex);\n      }\n    });\n\n    this._changeDetectorRef.detectChanges();\n  }\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   * @param {?} data\n   * @param {?} i\n   * @return {?}\n   */\n\n\n  _getNodeDef(data, i) {\n    if (this._nodeDefs.length === 1) {\n      return this._nodeDefs.first;\n    }\n    /** @type {?} */\n\n\n    const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n    if (!nodeDef) {\n      throw getTreeMissingMatchingNodeDefError();\n    }\n\n    return nodeDef;\n  }\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   * @param {?} nodeData\n   * @param {?} index\n   * @param {?=} viewContainer\n   * @param {?=} parentData\n   * @return {?}\n   */\n\n\n  insertNode(nodeData, index, viewContainer, parentData) {\n    /** @type {?} */\n    const node = this._getNodeDef(nodeData, index);\n    /** @type {?} */\n\n\n    const context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level =\n      /** @type {?} */\n      this._levels.get(parentData) + 1;\n    } else {\n      context.level = 0;\n    }\n\n    this._levels.set(nodeData, context.level);\n    /** @type {?} */\n\n\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n\n}\n\nCdkTree.ɵfac = function CdkTree_Factory(t) {\n  return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nCdkTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTree,\n  selectors: [[\"cdk-tree\"]],\n  contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    }\n  },\n  viewQuery: function CdkTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n  inputs: {\n    dataSource: \"dataSource\",\n    treeControl: \"treeControl\",\n    trackBy: \"trackBy\"\n  },\n  exportAs: [\"cdkTree\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n  template: function CdkTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkTreeNodeOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nCdkTree.ctorParameters = () => [{\n  type: IterableDiffers\n}, {\n  type: ChangeDetectorRef\n}];\n\nCdkTree.propDecorators = {\n  dataSource: [{\n    type: Input\n  }],\n  treeControl: [{\n    type: Input\n  }],\n  trackBy: [{\n    type: Input\n  }],\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [CdkTreeNodeOutlet]\n  }],\n  _nodeDefs: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeDef]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-tree',\n      exportAs: 'cdkTree',\n      template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    dataSource: [{\n      type: Input\n    }],\n    treeControl: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [CdkTreeNodeOutlet]\n    }],\n    _nodeDefs: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeDef]\n    }]\n  });\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\n\n\nclass CdkTreeNode {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   */\n  constructor(_elementRef, _tree) {\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    this._destroyed = new Subject();\n    /**\n     * The role of the node should be 'group' if it's an internal node,\n     * and 'treeitem' if it's a leaf node.\n     */\n\n    this.role = 'treeitem';\n    CdkTreeNode.mostRecentTreeNode =\n    /** @type {?} */\n    this;\n  }\n  /**\n   * The tree node's data.\n   * @return {?}\n   */\n\n\n  get data() {\n    return this._data;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set data(value) {\n    this._data = value;\n\n    this._setRoleFromData();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isExpanded() {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get level() {\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /**\n   * Focuses the menu item. Implements for FocusableOption.\n   * @return {?}\n   */\n\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _setRoleFromData() {\n    if (this._tree.treeControl.isExpandable) {\n      this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n    } else {\n      if (!this._tree.treeControl.getChildren) {\n        throw getTreeControlFunctionsMissingError();\n      }\n      /** @type {?} */\n\n\n      const childrenNodes = this._tree.treeControl.getChildren(this._data);\n\n      if (Array.isArray(childrenNodes)) {\n        this._setRoleFromChildren(\n        /** @type {?} */\n        childrenNodes);\n      } else if (childrenNodes instanceof Observable) {\n        childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(children => this._setRoleFromChildren(children));\n      }\n    }\n  }\n  /**\n   * @param {?} children\n   * @return {?}\n   */\n\n\n  _setRoleFromChildren(children) {\n    this.role = children && children.length ? 'group' : 'treeitem';\n  }\n\n}\n\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n  return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree));\n};\n\nCdkTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNode,\n  selectors: [[\"cdk-tree-node\"]],\n  hostAttrs: [1, \"cdk-tree-node\"],\n  hostVars: 3,\n  hostBindings: function CdkTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    role: \"role\"\n  },\n  exportAs: [\"cdkTreeNode\"]\n});\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\n\nCdkTreeNode.mostRecentTreeNode = null;\n/** @nocollapse */\n\nCdkTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}];\n\nCdkTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-tree-node',\n      exportAs: 'cdkTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        'class': 'cdk-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n * @template T\n */\n\n\nclass CdkNestedTreeNode extends CdkTreeNode {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} _differs\n   */\n  constructor(_elementRef, _tree, _differs) {\n    super(_elementRef, _tree);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this._differs = _differs;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n    if (!this._tree.treeControl.getChildren) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    /** @type {?} */\n\n\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes(\n      /** @type {?} */\n      childrenNodes);\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(result => this.updateChildrenNodes(result));\n    }\n\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateChildrenNodes());\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._clear();\n\n    super.ngOnDestroy();\n  }\n  /**\n   * Add children dataNodes to the NodeOutlet\n   * @param {?=} children\n   * @return {?}\n   */\n\n\n  updateChildrenNodes(children) {\n    if (children) {\n      this._children = children;\n    }\n\n    if (this.nodeOutlet.length && this._children) {\n      /** @type {?} */\n      const viewContainer = this.nodeOutlet.first.viewContainer;\n\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n  /**\n   * Clear the children dataNodes.\n   * @return {?}\n   */\n\n\n  _clear() {\n    if (this.nodeOutlet && this.nodeOutlet.first) {\n      this.nodeOutlet.first.viewContainer.clear();\n\n      this._dataDiffer.diff([]);\n    }\n  }\n\n}\n\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n  return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkNestedTreeNode,\n  selectors: [[\"cdk-nested-tree-node\"]],\n  contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"],\n  hostVars: 2,\n  hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    }\n  },\n  exportAs: [\"cdkNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: CdkNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkNestedTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: IterableDiffers\n}];\n\nCdkNestedTreeNode.propDecorators = {\n  nodeOutlet: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeOutlet]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-nested-tree-node',\n      exportAs: 'cdkNestedTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        'class': 'cdk-tree-node cdk-nested-tree-node'\n      },\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: CdkNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, {\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Regex used to split a string on its CSS units.\n  @type {?} */\n\n\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\n\nclass CdkTreeNodePadding {\n  /**\n   * @param {?} _treeNode\n   * @param {?} _tree\n   * @param {?} _renderer\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  constructor(_treeNode, _tree, _renderer, _element, _dir) {\n    this._treeNode = _treeNode;\n    this._tree = _tree;\n    this._renderer = _renderer;\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    this._destroyed = new Subject();\n    /**\n     * CSS units used for the indentation value.\n     */\n\n    this.indentUnits = 'px';\n    this._indent = 40;\n\n    this._setPadding();\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n    }\n  }\n  /**\n   * The level of depth of the tree node. The padding will be `level * indent` pixels.\n   * @return {?}\n   */\n\n\n  get level() {\n    return this._level;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set level(value) {\n    this._level = coerceNumberProperty(value);\n\n    this._setPadding();\n  }\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   * @return {?}\n   */\n\n\n  get indent() {\n    return this._indent;\n  }\n  /**\n   * @param {?} indent\n   * @return {?}\n   */\n\n\n  set indent(indent) {\n    /** @type {?} */\n    let value = indent;\n    /** @type {?} */\n\n    let units = 'px';\n\n    if (typeof indent === 'string') {\n      /** @type {?} */\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n\n    this._setPadding();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /**\n   * The padding indent value for the tree node. Returns a string with px numbers if not null.\n   * @return {?}\n   */\n\n\n  _paddingIndent() {\n    /** @type {?} */\n    const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n    /** @type {?} */\n\n    const level = this._level || nodeLevel;\n    return level ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _setPadding() {\n    /** @type {?} */\n    const padding = this._paddingIndent();\n    /** @type {?} */\n\n\n    const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n    this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n  }\n\n}\n\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n  return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodePadding,\n  selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"cdkTreeNodePadding\", \"level\"],\n    indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n  }\n});\n/** @nocollapse */\n\nCdkTreeNodePadding.ctorParameters = () => [{\n  type: CdkTreeNode\n}, {\n  type: CdkTree\n}, {\n  type: Renderer2\n}, {\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nCdkTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['cdkTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['cdkTreeNodePaddingIndent']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodePadding]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTreeNode\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    level: [{\n      type: Input,\n      args: ['cdkTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['cdkTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\n\n\nclass CdkTreeNodeToggle {\n  /**\n   * @param {?} _tree\n   * @param {?} _treeNode\n   */\n  constructor(_tree, _treeNode) {\n    this._tree = _tree;\n    this._treeNode = _treeNode;\n    this._recursive = false;\n  }\n  /**\n   * Whether expand/collapse the node recursively.\n   * @return {?}\n   */\n\n\n  get recursive() {\n    return this._recursive;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set recursive(value) {\n    this._recursive = coerceBooleanProperty(value);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _toggle(event) {\n    this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n    event.stopPropagation();\n  }\n\n}\n\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n  return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode));\n};\n\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeToggle,\n  selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n  hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n        return ctx._toggle($event);\n      });\n    }\n  },\n  inputs: {\n    recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n  }\n});\n/** @nocollapse */\n\nCdkTreeNodeToggle.ctorParameters = () => [{\n  type: CdkTree\n}, {\n  type: CdkTreeNode\n}];\n\nCdkTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['cdkTreeNodeToggleRecursive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeToggle]',\n      host: {\n        '(click)': '_toggle($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkTree\n    }, {\n      type: CdkTreeNode\n    }];\n  }, {\n    recursive: [{\n      type: Input,\n      args: ['cdkTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n\nclass CdkTreeModule {}\n\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n  return new (t || CdkTreeModule)();\n};\n\nCdkTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTreeModule\n});\nCdkTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [FocusMonitor, CdkTreeNodeDef],\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS,\n      providers: [FocusMonitor, CdkTreeNodeDef]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, {\n    declarations: function () {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle };","map":{"version":3,"names":["SelectionModel","Observable","BehaviorSubject","of","Subject","take","takeUntil","Directive","TemplateRef","ViewContainerRef","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","ElementRef","Input","IterableDiffers","ViewChild","ViewEncapsulation","Optional","Renderer2","NgModule","Directionality","coerceNumberProperty","coerceBooleanProperty","FocusMonitor","CommonModule","ɵngcc0","ɵngcc1","BaseTreeControl","constructor","expansionModel","toggle","dataNode","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","getDescendants","FlatTreeControl","getLevel","isExpandable","startIndex","dataNodes","indexOf","results","i","length","expandAll","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","subscribe","children","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","ɵfac","CdkTreeNodeDef_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","inputs","when","ctorParameters","ngDevMode","ɵsetClassMetadata","args","selector","CdkTreeNodeOutlet","viewContainer","CdkTreeNodeOutlet_Factory","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","dataSource","_dataSource","_switchDataSource","ngOnInit","_dataDiffer","find","create","trackBy","treeControl","ngOnDestroy","_nodeOutlet","next","complete","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","filter","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","node","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","CdkTree_Factory","ɵcmp","ɵɵdefineComponent","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","CdkTree_Query","ɵɵviewQuery","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","ɵɵelementContainer","dependencies","encapsulation","changeDetection","propDecorators","host","None","OnPush","_elementRef","_tree","_destroyed","role","_data","value","_setRoleFromData","focus","nativeElement","_setRoleFromChildren","CdkTreeNode_Factory","hostVars","hostBindings","CdkTreeNode_HostBindings","ɵɵattribute","CdkNestedTreeNode","ngAfterContentInit","updateChildrenNodes","result","nodeOutlet","_clear","_children","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","CdkNestedTreeNode_HostBindings","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","providers","cssUnitPattern","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","indentUnits","_indent","_setPadding","change","_level","indent","units","parts","split","_paddingIndent","nodeLevel","padding","paddingProp","setStyle","CdkTreeNodePadding_Factory","decorators","CdkTreeNodeToggle","_recursive","recursive","_toggle","event","stopPropagation","CdkTreeNodeToggle_Factory","CdkTreeNodeToggle_HostBindings","ɵɵlistener","CdkTreeNodeToggle_click_HostBindingHandler","$event","EXPORTED_DECLARATIONS","CdkTreeModule","CdkTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/tree.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable, BehaviorSubject, of, Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Directive, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Optional, Renderer2, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /**\n         * A selection model with multi-selection to track expansion status.\n         */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /**\n     * Toggles one single data node's expanded/collapsed state.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggle(dataNode) {\n        this.expansionModel.toggle(dataNode);\n    }\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expand(dataNode) {\n        this.expansionModel.select(dataNode);\n    }\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapse(dataNode) {\n        this.expansionModel.deselect(dataNode);\n    }\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(dataNode);\n    }\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expandDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapseDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\nclass FlatTreeControl extends BaseTreeControl {\n    /**\n     * Construct with flat tree data node functions getLevel and isExpandable.\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     */\n    constructor(getLevel, isExpandable) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        /** @type {?} */\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\nclass NestedTreeControl extends BaseTreeControl {\n    /**\n     * Construct with nested tree function getChildren.\n     * @param {?} getChildren\n     */\n    constructor(getChildren) {\n        super();\n        this.getChildren = getChildren;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        /** @type {?} */\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /**\n     * A helper function to get descendants recursively.\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        /** @type {?} */\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (childrenNodes instanceof Observable) {\n            childrenNodes.pipe(take(1)).subscribe(children => {\n                children.forEach((child) => this._getDescendants(descendants, child));\n            });\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Context provided to the tree node component.\n * @template T\n */\nclass CdkTreeNodeOutletContext {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\nclass CdkTreeNodeDef {\n    /**\n     * \\@docs-private\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\n/** @nocollapse */\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     */\n    constructor(viewContainer) {\n        this.viewContainer = viewContainer;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\n/** @nocollapse */\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\nclass CdkTree {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Level of nodes\n         */\n        this._levels = new Map();\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     * @return {?}\n     */\n    get dataSource() { return this._dataSource; }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof (/** @type {?} */ (this._dataSource)).disconnect === 'function') {\n            (/** @type {?} */ (this.dataSource)).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        /** @type {?} */\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof (/** @type {?} */ (this._dataSource)).disconnect === 'function') {\n            (/** @type {?} */ (this.dataSource)).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        /** @type {?} */\n        let dataStream;\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        if (typeof (/** @type {?} */ (this._dataSource)).connect === 'function') {\n            dataStream = (/** @type {?} */ (this._dataSource)).connect(this);\n        }\n        else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        /** @type {?} */\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[/** @type {?} */ ((currentIndex))], /** @type {?} */ ((currentIndex)), viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(/** @type {?} */ ((adjustedPreviousIndex)));\n                this._levels.delete(item.item);\n            }\n            else {\n                /** @type {?} */\n                const view = viewContainer.get(/** @type {?} */ ((adjustedPreviousIndex)));\n                viewContainer.move(/** @type {?} */ ((view)), currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        /** @type {?} */\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        /** @type {?} */\n        const node = this._getNodeDef(nodeData, index);\n        /** @type {?} */\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = /** @type {?} */ ((this._levels.get(parentData))) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        /** @type {?} */\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkTreeNodeOutlet], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet,] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{ selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef]\n        }] }); })();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\nclass CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     */\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * The role of the node should be 'group' if it's an internal node,\n         * and 'treeitem' if it's a leaf node.\n         */\n        this.role = 'treeitem';\n        CdkTreeNode.mostRecentTreeNode = /** @type {?} */ (this);\n    }\n    /**\n     * The tree node's data.\n     * @return {?}\n     */\n    get data() { return this._data; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data = value;\n        this._setRoleFromData();\n    }\n    /**\n     * @return {?}\n     */\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    get level() {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n    _setRoleFromData() {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        }\n        else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            /** @type {?} */\n            const childrenNodes = this._tree.treeControl.getChildren(this._data);\n            if (Array.isArray(childrenNodes)) {\n                this._setRoleFromChildren(/** @type {?} */ (childrenNodes));\n            }\n            else if (childrenNodes instanceof Observable) {\n                childrenNodes.pipe(takeUntil(this._destroyed))\n                    .subscribe(children => this._setRoleFromChildren(children));\n            }\n        }\n    }\n    /**\n     * @param {?} children\n     * @return {?}\n     */\n    _setRoleFromChildren(children) {\n        this.role = children && children.length ? 'group' : 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], hostAttrs: [1, \"cdk-tree-node\"], hostVars: 3, hostBindings: function CdkTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\n/** @nocollapse */\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n * @template T\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     */\n    constructor(_elementRef, _tree, _differs) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(/** @type {?} */ (childrenNodes));\n        }\n        else if (childrenNodes instanceof Observable) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @param {?=} children\n     * @return {?}\n     */\n    updateChildrenNodes(children) {\n        if (children) {\n            this._children = children;\n        }\n        if (this.nodeOutlet.length && this._children) {\n            /** @type {?} */\n            const viewContainer = this.nodeOutlet.first.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Clear the children dataNodes.\n     * @return {?}\n     */\n    _clear() {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"], hostVars: 2, hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node cdk-nested-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Regex used to split a string on its CSS units.\n  @type {?} */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\nclass CdkTreeNodePadding {\n    /**\n     * @param {?} _treeNode\n     * @param {?} _tree\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_treeNode, _tree, _renderer, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * CSS units used for the indentation value.\n         */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n        }\n    }\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @return {?}\n     */\n    get level() { return this._level; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set level(value) {\n        this._level = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     * @return {?}\n     */\n    get indent() { return this._indent; }\n    /**\n     * @param {?} indent\n     * @return {?}\n     */\n    set indent(indent) {\n        /** @type {?} */\n        let value = indent;\n        /** @type {?} */\n        let units = 'px';\n        if (typeof indent === 'string') {\n            /** @type {?} */\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n    _paddingIndent() {\n        /** @type {?} */\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        /** @type {?} */\n        const level = this._level || nodeLevel;\n        return level ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    /**\n     * @return {?}\n     */\n    _setPadding() {\n        /** @type {?} */\n        const padding = this._paddingIndent();\n        /** @type {?} */\n        const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n        this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\n/** @nocollapse */\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\nclass CdkTreeNodeToggle {\n    /**\n     * @param {?} _tree\n     * @param {?} _treeNode\n     */\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /**\n     * Whether expand/collapse the node recursively.\n     * @return {?}\n     */\n    get recursive() { return this._recursive; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\n/** @nocollapse */\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeToggle]',\n                host: {\n                    '(click)': '_toggle($event)'\n                }\n            }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); };\nCdkTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [FocusMonitor, CdkTreeNodeDef], imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                providers: [FocusMonitor, CdkTreeNodeDef]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: function () { return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle };\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,0BAA/B;AACA,SAASC,UAAT,EAAqBC,eAArB,EAAsCC,EAAtC,EAA0CC,OAA1C,QAAyD,MAAzD;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,gBAAhC;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,gBAAjC,EAAmDC,uBAAnD,EAA4EC,iBAA5E,EAA+FC,SAA/F,EAA0GC,eAA1G,EAA2HC,UAA3H,EAAuIC,KAAvI,EAA8IC,eAA9I,EAA+JC,SAA/J,EAA0KC,iBAA1K,EAA6LC,QAA7L,EAAuMC,SAAvM,EAAkNC,QAAlN,QAAkO,eAAlO;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,oBAAT,EAA+BC,qBAA/B,QAA4D,uBAA5D;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;;AACA,MAAMC,eAAN,CAAsB;EAClBC,WAAW,GAAG;IACV;AACR;AACA;IACQ,KAAKC,cAAL,GAAsB,IAAI/B,cAAJ,CAAmB,IAAnB,CAAtB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIgC,MAAM,CAACC,QAAD,EAAW;IACb,KAAKF,cAAL,CAAoBC,MAApB,CAA2BC,QAA3B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,MAAM,CAACD,QAAD,EAAW;IACb,KAAKF,cAAL,CAAoBI,MAApB,CAA2BF,QAA3B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIG,QAAQ,CAACH,QAAD,EAAW;IACf,KAAKF,cAAL,CAAoBM,QAApB,CAA6BJ,QAA7B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIK,UAAU,CAACL,QAAD,EAAW;IACjB,OAAO,KAAKF,cAAL,CAAoBQ,UAApB,CAA+BN,QAA/B,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIO,iBAAiB,CAACP,QAAD,EAAW;IACxB,KAAKF,cAAL,CAAoBQ,UAApB,CAA+BN,QAA/B,IACM,KAAKQ,mBAAL,CAAyBR,QAAzB,CADN,GAEM,KAAKS,iBAAL,CAAuBT,QAAvB,CAFN;EAGH;EACD;AACJ;AACA;AACA;;;EACIU,WAAW,GAAG;IACV,KAAKZ,cAAL,CAAoBa,KAApB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIF,iBAAiB,CAACT,QAAD,EAAW;IACxB;IACA,IAAIY,aAAa,GAAG,CAACZ,QAAD,CAApB;IACAY,aAAa,CAACC,IAAd,CAAmB,GAAG,KAAKC,cAAL,CAAoBd,QAApB,CAAtB;IACA,KAAKF,cAAL,CAAoBI,MAApB,CAA2B,GAAGU,aAA9B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIJ,mBAAmB,CAACR,QAAD,EAAW;IAC1B;IACA,IAAIY,aAAa,GAAG,CAACZ,QAAD,CAApB;IACAY,aAAa,CAACC,IAAd,CAAmB,GAAG,KAAKC,cAAL,CAAoBd,QAApB,CAAtB;IACA,KAAKF,cAAL,CAAoBM,QAApB,CAA6B,GAAGQ,aAAhC;EACH;;AA7EiB;AAgFtB;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMG,eAAN,SAA8BnB,eAA9B,CAA8C;EAC1C;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACmB,QAAD,EAAWC,YAAX,EAAyB;IAChC;IACA,KAAKD,QAAL,GAAgBA,QAAhB;IACA,KAAKC,YAAL,GAAoBA,YAApB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIH,cAAc,CAACd,QAAD,EAAW;IACrB;IACA,MAAMkB,UAAU,GAAG,KAAKC,SAAL,CAAeC,OAAf,CAAuBpB,QAAvB,CAAnB;IACA;;IACA,MAAMqB,OAAO,GAAG,EAAhB,CAJqB,CAKrB;IACA;IACA;IACA;IACA;IACA;;IACA,KAAK,IAAIC,CAAC,GAAGJ,UAAU,GAAG,CAA1B,EAA6BI,CAAC,GAAG,KAAKH,SAAL,CAAeI,MAAnB,IAA6B,KAAKP,QAAL,CAAchB,QAAd,IAA0B,KAAKgB,QAAL,CAAc,KAAKG,SAAL,CAAeG,CAAf,CAAd,CAApF,EAAsHA,CAAC,EAAvH,EAA2H;MACvHD,OAAO,CAACR,IAAR,CAAa,KAAKM,SAAL,CAAeG,CAAf,CAAb;IACH;;IACD,OAAOD,OAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIG,SAAS,GAAG;IACR,KAAK1B,cAAL,CAAoBI,MAApB,CAA2B,GAAG,KAAKiB,SAAnC;EACH;;AA5CyC;AA+C9C;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMM,iBAAN,SAAgC7B,eAAhC,CAAgD;EAC5C;AACJ;AACA;AACA;EACIC,WAAW,CAAC6B,WAAD,EAAc;IACrB;IACA,KAAKA,WAAL,GAAmBA,WAAnB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIF,SAAS,GAAG;IACR,KAAK1B,cAAL,CAAoBa,KAApB;IACA;;IACA,MAAMgB,QAAQ,GAAG,KAAKR,SAAL,CAAeS,MAAf,CAAsB,CAACC,WAAD,EAAc7B,QAAd,KAA2B,CAAC,GAAG6B,WAAJ,EAAiB,GAAG,KAAKf,cAAL,CAAoBd,QAApB,CAApB,EAAmDA,QAAnD,CAAjD,EAA+G,EAA/G,CAAjB;IACA,KAAKF,cAAL,CAAoBI,MAApB,CAA2B,GAAGyB,QAA9B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIb,cAAc,CAACd,QAAD,EAAW;IACrB;IACA,MAAM8B,WAAW,GAAG,EAApB;;IACA,KAAKC,eAAL,CAAqBD,WAArB,EAAkC9B,QAAlC,EAHqB,CAIrB;;;IACA,OAAO8B,WAAW,CAACE,MAAZ,CAAmB,CAAnB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACID,eAAe,CAACD,WAAD,EAAc9B,QAAd,EAAwB;IACnC8B,WAAW,CAACjB,IAAZ,CAAiBb,QAAjB;IACA;;IACA,MAAMiC,aAAa,GAAG,KAAKP,WAAL,CAAiB1B,QAAjB,CAAtB;;IACA,IAAIkC,KAAK,CAACC,OAAN,CAAcF,aAAd,CAAJ,EAAkC;MAC9BA,aAAa,CAACG,OAAd,CAAuBC,KAAD,IAAW,KAAKN,eAAL,CAAqBD,WAArB,EAAkCO,KAAlC,CAAjC;IACH,CAFD,MAGK,IAAIJ,aAAa,YAAYjE,UAA7B,EAAyC;MAC1CiE,aAAa,CAACK,IAAd,CAAmBlE,IAAI,CAAC,CAAD,CAAvB,EAA4BmE,SAA5B,CAAsCC,QAAQ,IAAI;QAC9CA,QAAQ,CAACJ,OAAT,CAAkBC,KAAD,IAAW,KAAKN,eAAL,CAAqBD,WAArB,EAAkCO,KAAlC,CAA5B;MACH,CAFD;IAGH;EACJ;;AApD2C;AAuDhD;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMI,wBAAN,CAA+B;EAC3B;AACJ;AACA;EACI5C,WAAW,CAAC6C,IAAD,EAAO;IACd,KAAKC,SAAL,GAAiBD,IAAjB;EACH;;AAN0B;AAQ/B;AACA;AACA;AACA;AACA;;;AACA,MAAME,cAAN,CAAqB;EACjB;AACJ;AACA;AACA;EACI/C,WAAW,CAACgD,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;EACH;;AAPgB;;AASrBD,cAAc,CAACE,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;EAAE,OAAO,KAAKA,CAAC,IAAIJ,cAAV,EAA0BlD,MAAM,CAACuD,iBAAP,CAAyBvD,MAAM,CAACnB,WAAhC,CAA1B,CAAP;AAAiF,CAA5I;;AACAqE,cAAc,CAACM,IAAf,GAAsB,aAAcxD,MAAM,CAACyD,iBAAP,CAAyB;EAAEC,IAAI,EAAER,cAAR;EAAwBS,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,gBAAL,EAAuB,EAAvB,CAAD,CAAnC;EAAiEC,MAAM,EAAE;IAAEC,IAAI,EAAE,CAAC,oBAAD,EAAuB,MAAvB;EAAR;AAAzE,CAAzB,CAApC;AACA;;AACAX,cAAc,CAACY,cAAf,GAAgC,MAAM,CAClC;EAAEJ,IAAI,EAAE7E;AAAR,CADkC,CAAtC;;AAGA,CAAC,YAAY;EAAE,CAAC,OAAOkF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/D,MAAM,CAACgE,iBAAP,CAAyBd,cAAzB,EAAyC,CAAC;IACpGQ,IAAI,EAAE9E,SAD8F;IAEpGqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,kBADX;MAECN,MAAM,EAAE,CACJ,0BADI;IAFT,CAAD;EAF8F,CAAD,CAAzC,EAQ1D,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAE1D,MAAM,CAACnB;IAAf,CAAD,CAAP;EAAwC,CARI,EAQF,IARE,CAAnD;AAQyD,CARxE;AAUA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMsF,iBAAN,CAAwB;EACpB;AACJ;AACA;EACIhE,WAAW,CAACiE,aAAD,EAAgB;IACvB,KAAKA,aAAL,GAAqBA,aAArB;EACH;;AANmB;;AAQxBD,iBAAiB,CAACf,IAAlB,GAAyB,SAASiB,yBAAT,CAAmCf,CAAnC,EAAsC;EAAE,OAAO,KAAKA,CAAC,IAAIa,iBAAV,EAA6BnE,MAAM,CAACuD,iBAAP,CAAyBvD,MAAM,CAAClB,gBAAhC,CAA7B,CAAP;AAAyF,CAA1J;;AACAqF,iBAAiB,CAACX,IAAlB,GAAyB,aAAcxD,MAAM,CAACyD,iBAAP,CAAyB;EAAEC,IAAI,EAAES,iBAAR;EAA2BR,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,mBAAL,EAA0B,EAA1B,CAAD;AAAtC,CAAzB,CAAvC;AACA;;AACAQ,iBAAiB,CAACL,cAAlB,GAAmC,MAAM,CACrC;EAAEJ,IAAI,EAAE5E;AAAR,CADqC,CAAzC;;AAGA,CAAC,YAAY;EAAE,CAAC,OAAOiF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/D,MAAM,CAACgE,iBAAP,CAAyBG,iBAAzB,EAA4C,CAAC;IACvGT,IAAI,EAAE9E,SADiG;IAEvGqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE;IADX,CAAD;EAFiG,CAAD,CAA5C,EAK1D,YAAY;IAAE,OAAO,CAAC;MAAER,IAAI,EAAE1D,MAAM,CAAClB;IAAf,CAAD,CAAP;EAA6C,CALD,EAKG,IALH,CAAnD;AAK8D,CAL7E;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASwF,6BAAT,GAAyC;EACrC,OAAOC,KAAK,CAAE,uCAAF,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,mCAAT,GAA+C;EAC3C,OAAOD,KAAK,CAAE,sEAAF,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,kCAAT,GAA8C;EAC1C,OAAOF,KAAK,CAAE,uEAAF,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASG,0BAAT,GAAsC;EAClC,OAAOH,KAAK,CAAE,6CAAF,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASI,mCAAT,GAA+C;EAC3C,OAAOJ,KAAK,CAAE,gEAAF,CAAZ;AACH;AAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,OAAN,CAAc;EACV;AACJ;AACA;AACA;EACIzE,WAAW,CAAC0E,QAAD,EAAWC,kBAAX,EAA+B;IACtC,KAAKD,QAAL,GAAgBA,QAAhB;IACA,KAAKC,kBAAL,GAA0BA,kBAA1B;IACA;AACR;AACA;;IACQ,KAAKC,UAAL,GAAkB,IAAItG,OAAJ,EAAlB;IACA;AACR;AACA;;IACQ,KAAKuG,OAAL,GAAe,IAAIC,GAAJ,EAAf;IACA;AACR;AACA;AACA;;IACQ,KAAKC,UAAL,GAAkB,IAAI3G,eAAJ,CAAoB;MAAE4G,KAAK,EAAE,CAAT;MAAYC,GAAG,EAAEC,MAAM,CAACC;IAAxB,CAApB,CAAlB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACkB,IAAVC,UAAU,GAAG;IAAE,OAAO,KAAKC,WAAZ;EAA0B;EAC7C;AACJ;AACA;AACA;;;EACkB,IAAVD,UAAU,CAACA,UAAD,EAAa;IACvB,IAAI,KAAKC,WAAL,KAAqBD,UAAzB,EAAqC;MACjC,KAAKE,iBAAL,CAAuBF,UAAvB;IACH;EACJ;EACD;AACJ;AACA;;;EACIG,QAAQ,GAAG;IACP,KAAKC,WAAL,GAAmB,KAAKd,QAAL,CAAce,IAAd,CAAmB,EAAnB,EAAuBC,MAAvB,CAA8B,KAAKC,OAAnC,CAAnB;;IACA,IAAI,CAAC,KAAKC,WAAV,EAAuB;MACnB,MAAMrB,0BAA0B,EAAhC;IACH;EACJ;EACD;AACJ;AACA;;;EACIsB,WAAW,GAAG;IACV,KAAKC,WAAL,CAAiB7B,aAAjB,CAA+BnD,KAA/B;;IACA,KAAK8D,UAAL,CAAgBmB,IAAhB;;IACA,KAAKnB,UAAL,CAAgBoB,QAAhB;;IACA,IAAI,KAAKX,WAAL,IAAoB;IAAQ;IAAkB,KAAKA,WAAxB,CAAsCY,UAA7C,KAA4D,UAApF,EAAgG;MAC3F;MAAkB,KAAKb,UAAxB,CAAqCa,UAArC,CAAgD,IAAhD;IACH;;IACD,IAAI,KAAKC,iBAAT,EAA4B;MACxB,KAAKA,iBAAL,CAAuBC,WAAvB;;MACA,KAAKD,iBAAL,GAAyB,IAAzB;IACH;EACJ;EACD;AACJ;AACA;;;EACIE,qBAAqB,GAAG;IACpB;IACA,MAAMC,eAAe,GAAG,KAAKC,SAAL,CAAeC,MAAf,CAAsBC,GAAG,IAAI,CAACA,GAAG,CAAC9C,IAAlC,CAAxB;;IACA,IAAI2C,eAAe,CAAC3E,MAAhB,GAAyB,CAA7B,EAAgC;MAC5B,MAAM2C,mCAAmC,EAAzC;IACH;;IACD,KAAKoC,eAAL,GAAuBJ,eAAe,CAAC,CAAD,CAAtC;;IACA,IAAI,KAAKjB,UAAL,IAAmB,KAAKkB,SAAxB,IAAqC,CAAC,KAAKJ,iBAA/C,EAAkE;MAC9D,KAAKQ,qBAAL;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIpB,iBAAiB,CAACF,UAAD,EAAa;IAC1B,IAAI,KAAKC,WAAL,IAAoB;IAAQ;IAAkB,KAAKA,WAAxB,CAAsCY,UAA7C,KAA4D,UAApF,EAAgG;MAC3F;MAAkB,KAAKb,UAAxB,CAAqCa,UAArC,CAAgD,IAAhD;IACH;;IACD,IAAI,KAAKC,iBAAT,EAA4B;MACxB,KAAKA,iBAAL,CAAuBC,WAAvB;;MACA,KAAKD,iBAAL,GAAyB,IAAzB;IACH,CAPyB,CAQ1B;;;IACA,IAAI,CAACd,UAAL,EAAiB;MACb,KAAKU,WAAL,CAAiB7B,aAAjB,CAA+BnD,KAA/B;IACH;;IACD,KAAKuE,WAAL,GAAmBD,UAAnB;;IACA,IAAI,KAAKkB,SAAT,EAAoB;MAChB,KAAKI,qBAAL;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACIA,qBAAqB,GAAG;IACpB;IACA,IAAIC,UAAJ,CAFoB,CAGpB;IACA;;IACA,IAAI;IAAQ;IAAkB,KAAKtB,WAAxB,CAAsCuB,OAA7C,KAAyD,UAA7D,EAAyE;MACrED,UAAU;MAAI;MAAkB,KAAKtB,WAAxB,CAAsCuB,OAAtC,CAA8C,IAA9C,CAAb;IACH,CAFD,MAGK,IAAI,KAAKvB,WAAL,YAA4BlH,UAAhC,EAA4C;MAC7CwI,UAAU,GAAG,KAAKtB,WAAlB;IACH,CAFI,MAGA,IAAIhD,KAAK,CAACC,OAAN,CAAc,KAAK+C,WAAnB,CAAJ,EAAqC;MACtCsB,UAAU,GAAGtI,EAAE,CAAC,KAAKgH,WAAN,CAAf;IACH;;IACD,IAAIsB,UAAJ,EAAgB;MACZ,KAAKT,iBAAL,GAAyBS,UAAU,CAAClE,IAAX,CAAgBjE,SAAS,CAAC,KAAKoG,UAAN,CAAzB,EACpBlC,SADoB,CACVG,IAAI,IAAI,KAAKgE,iBAAL,CAAuBhE,IAAvB,CADE,CAAzB;IAEH,CAHD,MAIK;MACD,MAAMsB,6BAA6B,EAAnC;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI0C,iBAAiB,CAAChE,IAAD,EAAOiE,UAAU,GAAG,KAAKtB,WAAzB,EAAsCvB,aAAa,GAAG,KAAK6B,WAAL,CAAiB7B,aAAvE,EAAsF8C,UAAtF,EAAkG;IAC/G;IACA,MAAMC,OAAO,GAAGF,UAAU,CAACG,IAAX,CAAgBpE,IAAhB,CAAhB;;IACA,IAAI,CAACmE,OAAL,EAAc;MACV;IACH;;IACDA,OAAO,CAACE,gBAAR,CAAyB,CAACC,IAAD,EAAOC,qBAAP,EAA8BC,YAA9B,KAA+C;MACpE,IAAIF,IAAI,CAACG,aAAL,IAAsB,IAA1B,EAAgC;QAC5B,KAAKC,UAAL,CAAgB1E,IAAI;QAAC;QAAmBwE,YAApB,CAApB;QAAyD;QAAmBA,YAA5E,EAA4FpD,aAA5F,EAA2G8C,UAA3G;MACH,CAFD,MAGK,IAAIM,YAAY,IAAI,IAApB,EAA0B;QAC3BpD,aAAa,CAACuD,MAAd;QAAqB;QAAmBJ,qBAAxC;;QACA,KAAKvC,OAAL,CAAa4C,MAAb,CAAoBN,IAAI,CAACA,IAAzB;MACH,CAHI,MAIA;QACD;QACA,MAAMO,IAAI,GAAGzD,aAAa,CAAC0D,GAAd;QAAkB;QAAmBP,qBAArC,CAAb;QACAnD,aAAa,CAAC2D,IAAd;QAAmB;QAAmBF,IAAtC,EAA8CL,YAA9C;MACH;IACJ,CAbD;;IAcA,KAAK1C,kBAAL,CAAwBkD,aAAxB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,WAAW,CAACjF,IAAD,EAAOpB,CAAP,EAAU;IACjB,IAAI,KAAK6E,SAAL,CAAe5E,MAAf,KAA0B,CAA9B,EAAiC;MAC7B,OAAO,KAAK4E,SAAL,CAAeyB,KAAtB;IACH;IACD;;;IACA,MAAMC,OAAO,GAAG,KAAK1B,SAAL,CAAeb,IAAf,CAAoBe,GAAG,IAAIA,GAAG,CAAC9C,IAAJ,IAAY8C,GAAG,CAAC9C,IAAJ,CAASjC,CAAT,EAAYoB,IAAZ,CAAvC,KAA6D,KAAK4D,eAAlF;;IACA,IAAI,CAACuB,OAAL,EAAc;MACV,MAAM1D,kCAAkC,EAAxC;IACH;;IACD,OAAO0D,OAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIT,UAAU,CAACU,QAAD,EAAWC,KAAX,EAAkBjE,aAAlB,EAAiC8C,UAAjC,EAA6C;IACnD;IACA,MAAMoB,IAAI,GAAG,KAAKL,WAAL,CAAiBG,QAAjB,EAA2BC,KAA3B,CAAb;IACA;;;IACA,MAAME,OAAO,GAAG,IAAIxF,wBAAJ,CAA6BqF,QAA7B,CAAhB,CAJmD,CAKnD;IACA;;IACA,IAAI,KAAKrC,WAAL,CAAiBzE,QAArB,EAA+B;MAC3BiH,OAAO,CAACC,KAAR,GAAgB,KAAKzC,WAAL,CAAiBzE,QAAjB,CAA0B8G,QAA1B,CAAhB;IACH,CAFD,MAGK,IAAI,OAAOlB,UAAP,KAAsB,WAAtB,IAAqC,KAAKlC,OAAL,CAAayD,GAAb,CAAiBvB,UAAjB,CAAzC,EAAuE;MACxEqB,OAAO,CAACC,KAAR;MAAgB;MAAmB,KAAKxD,OAAL,CAAa8C,GAAb,CAAiBZ,UAAjB,CAAF,GAAmC,CAApE;IACH,CAFI,MAGA;MACDqB,OAAO,CAACC,KAAR,GAAgB,CAAhB;IACH;;IACD,KAAKxD,OAAL,CAAa0D,GAAb,CAAiBN,QAAjB,EAA2BG,OAAO,CAACC,KAAnC;IACA;;;IACA,MAAMG,SAAS,GAAGvE,aAAa,GAAGA,aAAH,GAAmB,KAAK6B,WAAL,CAAiB7B,aAAnE;IACAuE,SAAS,CAACC,kBAAV,CAA6BN,IAAI,CAACnF,QAAlC,EAA4CoF,OAA5C,EAAqDF,KAArD,EAnBmD,CAoBnD;IACA;IACA;;IACA,IAAIQ,WAAW,CAACC,kBAAhB,EAAoC;MAChCD,WAAW,CAACC,kBAAZ,CAA+B9F,IAA/B,GAAsCoF,QAAtC;IACH;EACJ;;AAnNS;;AAqNdxD,OAAO,CAACxB,IAAR,GAAe,SAAS2F,eAAT,CAAyBzF,CAAzB,EAA4B;EAAE,OAAO,KAAKA,CAAC,IAAIsB,OAAV,EAAmB5E,MAAM,CAACuD,iBAAP,CAAyBvD,MAAM,CAACX,eAAhC,CAAnB,EAAqEW,MAAM,CAACuD,iBAAP,CAAyBvD,MAAM,CAAChB,iBAAhC,CAArE,CAAP;AAAkI,CAA/K;;AACA4F,OAAO,CAACoE,IAAR,GAAe,aAAchJ,MAAM,CAACiJ,iBAAP,CAAyB;EAAEvF,IAAI,EAAEkB,OAAR;EAAiBjB,SAAS,EAAE,CAAC,CAAC,UAAD,CAAD,CAA5B;EAA4CuF,cAAc,EAAE,SAASC,sBAAT,CAAgCC,EAAhC,EAAoCC,GAApC,EAAyCC,QAAzC,EAAmD;IAAE,IAAIF,EAAE,GAAG,CAAT,EAAY;MAC3KpJ,MAAM,CAACuJ,cAAP,CAAsBD,QAAtB,EAAgCpG,cAAhC,EAAgD,CAAhD;IACH;;IAAC,IAAIkG,EAAE,GAAG,CAAT,EAAY;MACV,IAAII,EAAJ;;MACAxJ,MAAM,CAACyJ,cAAP,CAAsBD,EAAE,GAAGxJ,MAAM,CAAC0J,WAAP,EAA3B,MAAqDL,GAAG,CAAC5C,SAAJ,GAAgB+C,EAArE;IACH;EAAE,CAL+C;EAK7CG,SAAS,EAAE,SAASC,aAAT,CAAuBR,EAAvB,EAA2BC,GAA3B,EAAgC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MAC1DpJ,MAAM,CAAC6J,WAAP,CAAmB1F,iBAAnB,EAAsC,CAAtC;IACH;;IAAC,IAAIiF,EAAE,GAAG,CAAT,EAAY;MACV,IAAII,EAAJ;;MACAxJ,MAAM,CAACyJ,cAAP,CAAsBD,EAAE,GAAGxJ,MAAM,CAAC0J,WAAP,EAA3B,MAAqDL,GAAG,CAACpD,WAAJ,GAAkBuD,EAAE,CAACtB,KAA1E;IACH;EAAE,CAV+C;EAU7C4B,SAAS,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,CAAjB,EAAoB,UAApB,CAVkC;EAUDlG,MAAM,EAAE;IAAE2B,UAAU,EAAE,YAAd;IAA4BQ,WAAW,EAAE,aAAzC;IAAwDD,OAAO,EAAE;EAAjE,CAVP;EAUqFiE,QAAQ,EAAE,CAAC,SAAD,CAV/F;EAU4GC,KAAK,EAAE,CAVnH;EAUsHC,IAAI,EAAE,CAV5H;EAU+HC,MAAM,EAAE,CAAC,CAAC,mBAAD,EAAsB,EAAtB,CAAD,CAVvI;EAUoK/G,QAAQ,EAAE,SAASgH,gBAAT,CAA0Bf,EAA1B,EAA8BC,GAA9B,EAAmC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MAC7QpJ,MAAM,CAACoK,kBAAP,CAA0B,CAA1B,EAA6B,CAA7B;IACH;EAAE,CAZ+C;EAY7CC,YAAY,EAAE,CAAClG,iBAAD,CAZ+B;EAYVmG,aAAa,EAAE,CAZL;EAYQC,eAAe,EAAE;AAZzB,CAAzB,CAA7B;AAaA;;AACA3F,OAAO,CAACd,cAAR,GAAyB,MAAM,CAC3B;EAAEJ,IAAI,EAAErE;AAAR,CAD2B,EAE3B;EAAEqE,IAAI,EAAE1E;AAAR,CAF2B,CAA/B;;AAIA4F,OAAO,CAAC4F,cAAR,GAAyB;EACrBjF,UAAU,EAAE,CAAC;IAAE7B,IAAI,EAAEtE;EAAR,CAAD,CADS;EAErB2G,WAAW,EAAE,CAAC;IAAErC,IAAI,EAAEtE;EAAR,CAAD,CAFQ;EAGrB0G,OAAO,EAAE,CAAC;IAAEpC,IAAI,EAAEtE;EAAR,CAAD,CAHY;EAIrB6G,WAAW,EAAE,CAAC;IAAEvC,IAAI,EAAEpE,SAAR;IAAmB2E,IAAI,EAAE,CAACE,iBAAD;EAAzB,CAAD,CAJQ;EAKrBsC,SAAS,EAAE,CAAC;IAAE/C,IAAI,EAAExE,eAAR;IAAyB+E,IAAI,EAAE,CAACf,cAAD;EAA/B,CAAD;AALU,CAAzB;;AAOA,CAAC,YAAY;EAAE,CAAC,OAAOa,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/D,MAAM,CAACgE,iBAAP,CAAyBY,OAAzB,EAAkC,CAAC;IAC7FlB,IAAI,EAAEzE,SADuF;IAE7FgF,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAE,UAAZ;MACC6F,QAAQ,EAAE,SADX;MAEC5G,QAAQ,EAAG,iDAFZ;MAGCsH,IAAI,EAAE;QACF,SAAS,UADP;QAEF,QAAQ;MAFN,CAHP;MAOCH,aAAa,EAAE/K,iBAAiB,CAACmL,IAPlC;MAQCH,eAAe,EAAExL,uBAAuB,CAAC4L;IAR1C,CAAD;EAFuF,CAAD,CAAlC,EAW1D,YAAY;IAAE,OAAO,CAAC;MAAEjH,IAAI,EAAE1D,MAAM,CAACX;IAAf,CAAD,EAAmC;MAAEqE,IAAI,EAAE1D,MAAM,CAAChB;IAAf,CAAnC,CAAP;EAAgF,CAXpC,EAWsC;IAAEuG,UAAU,EAAE,CAAC;MAC3G7B,IAAI,EAAEtE;IADqG,CAAD,CAAd;IAE5F2G,WAAW,EAAE,CAAC;MACdrC,IAAI,EAAEtE;IADQ,CAAD,CAF+E;IAI5F0G,OAAO,EAAE,CAAC;MACVpC,IAAI,EAAEtE;IADI,CAAD,CAJmF;IAM5F6G,WAAW,EAAE,CAAC;MACdvC,IAAI,EAAEpE,SADQ;MAEd2E,IAAI,EAAE,CAACE,iBAAD;IAFQ,CAAD,CAN+E;IAS5FsC,SAAS,EAAE,CAAC;MACZ/C,IAAI,EAAExE,eADM;MAEZ+E,IAAI,EAAE,CAACf,cAAD;IAFM,CAAD;EATiF,CAXtC,CAAnD;AAuBC,CAvBhB;AAwBA;AACA;AACA;AACA;;;AACA,MAAM2F,WAAN,CAAkB;EACd;AACJ;AACA;AACA;EACI1I,WAAW,CAACyK,WAAD,EAAcC,KAAd,EAAqB;IAC5B,KAAKD,WAAL,GAAmBA,WAAnB;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA;AACR;AACA;;IACQ,KAAKC,UAAL,GAAkB,IAAIrM,OAAJ,EAAlB;IACA;AACR;AACA;AACA;;IACQ,KAAKsM,IAAL,GAAY,UAAZ;IACAlC,WAAW,CAACC,kBAAZ;IAAiC;IAAkB,IAAnD;EACH;EACD;AACJ;AACA;AACA;;;EACY,IAAJ9F,IAAI,GAAG;IAAE,OAAO,KAAKgI,KAAZ;EAAoB;EACjC;AACJ;AACA;AACA;;;EACY,IAAJhI,IAAI,CAACiI,KAAD,EAAQ;IACZ,KAAKD,KAAL,GAAaC,KAAb;;IACA,KAAKC,gBAAL;EACH;EACD;AACJ;AACA;;;EACkB,IAAVvK,UAAU,GAAG;IACb,OAAO,KAAKkK,KAAL,CAAW9E,WAAX,CAAuBpF,UAAvB,CAAkC,KAAKqK,KAAvC,CAAP;EACH;EACD;AACJ;AACA;;;EACa,IAALxC,KAAK,GAAG;IACR,OAAO,KAAKqC,KAAL,CAAW9E,WAAX,CAAuBzE,QAAvB,GAAkC,KAAKuJ,KAAL,CAAW9E,WAAX,CAAuBzE,QAAvB,CAAgC,KAAK0J,KAArC,CAAlC,GAAgF,CAAvF;EACH;EACD;AACJ;AACA;;;EACIhF,WAAW,GAAG;IACV;IACA;IACA,IAAI6C,WAAW,CAACC,kBAAZ,KAAmC,IAAvC,EAA6C;MACzCD,WAAW,CAACC,kBAAZ,GAAiC,IAAjC;IACH;;IACD,KAAKgC,UAAL,CAAgB5E,IAAhB;;IACA,KAAK4E,UAAL,CAAgB3E,QAAhB;EACH;EACD;AACJ;AACA;AACA;;;EACIgF,KAAK,GAAG;IACJ,KAAKP,WAAL,CAAiBQ,aAAjB,CAA+BD,KAA/B;EACH;EACD;AACJ;AACA;;;EACID,gBAAgB,GAAG;IACf,IAAI,KAAKL,KAAL,CAAW9E,WAAX,CAAuBxE,YAA3B,EAAyC;MACrC,KAAKwJ,IAAL,GAAY,KAAKF,KAAL,CAAW9E,WAAX,CAAuBxE,YAAvB,CAAoC,KAAKyJ,KAAzC,IAAkD,OAAlD,GAA4D,UAAxE;IACH,CAFD,MAGK;MACD,IAAI,CAAC,KAAKH,KAAL,CAAW9E,WAAX,CAAuB/D,WAA5B,EAAyC;QACrC,MAAM2C,mCAAmC,EAAzC;MACH;MACD;;;MACA,MAAMpC,aAAa,GAAG,KAAKsI,KAAL,CAAW9E,WAAX,CAAuB/D,WAAvB,CAAmC,KAAKgJ,KAAxC,CAAtB;;MACA,IAAIxI,KAAK,CAACC,OAAN,CAAcF,aAAd,CAAJ,EAAkC;QAC9B,KAAK8I,oBAAL;QAA0B;QAAkB9I,aAA5C;MACH,CAFD,MAGK,IAAIA,aAAa,YAAYjE,UAA7B,EAAyC;QAC1CiE,aAAa,CAACK,IAAd,CAAmBjE,SAAS,CAAC,KAAKmM,UAAN,CAA5B,EACKjI,SADL,CACeC,QAAQ,IAAI,KAAKuI,oBAAL,CAA0BvI,QAA1B,CAD3B;MAEH;IACJ;EACJ;EACD;AACJ;AACA;AACA;;;EACIuI,oBAAoB,CAACvI,QAAD,EAAW;IAC3B,KAAKiI,IAAL,GAAYjI,QAAQ,IAAIA,QAAQ,CAACjB,MAArB,GAA8B,OAA9B,GAAwC,UAApD;EACH;;AA3Fa;;AA6FlBgH,WAAW,CAACzF,IAAZ,GAAmB,SAASkI,mBAAT,CAA6BhI,CAA7B,EAAgC;EAAE,OAAO,KAAKA,CAAC,IAAIuF,WAAV,EAAuB7I,MAAM,CAACuD,iBAAP,CAAyBvD,MAAM,CAACb,UAAhC,CAAvB,EAAoEa,MAAM,CAACuD,iBAAP,CAAyBqB,OAAzB,CAApE,CAAP;AAAgH,CAArK;;AACAiE,WAAW,CAACrF,IAAZ,GAAmB,aAAcxD,MAAM,CAACyD,iBAAP,CAAyB;EAAEC,IAAI,EAAEmF,WAAR;EAAqBlF,SAAS,EAAE,CAAC,CAAC,eAAD,CAAD,CAAhC;EAAqDmG,SAAS,EAAE,CAAC,CAAD,EAAI,eAAJ,CAAhE;EAAsFyB,QAAQ,EAAE,CAAhG;EAAmGC,YAAY,EAAE,SAASC,wBAAT,CAAkCrC,EAAlC,EAAsCC,GAAtC,EAA2C;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MAC5NpJ,MAAM,CAAC0L,WAAP,CAAmB,eAAnB,EAAoCrC,GAAG,CAAC1I,UAAxC,EAAoD,YAApD,EAAkE0I,GAAG,CAAC0B,IAAJ,KAAa,UAAb,GAA0B1B,GAAG,CAACb,KAA9B,GAAsC,IAAxG,EAA8G,MAA9G,EAAsHa,GAAG,CAAC0B,IAA1H;IACH;EAAE,CAFmD;EAEjDnH,MAAM,EAAE;IAAEmH,IAAI,EAAE;EAAR,CAFyC;EAEvBhB,QAAQ,EAAE,CAAC,aAAD;AAFa,CAAzB,CAAjC;AAGA;AACA;AACA;AACA;;AACAlB,WAAW,CAACC,kBAAZ,GAAiC,IAAjC;AACA;;AACAD,WAAW,CAAC/E,cAAZ,GAA6B,MAAM,CAC/B;EAAEJ,IAAI,EAAEvE;AAAR,CAD+B,EAE/B;EAAEuE,IAAI,EAAEkB;AAAR,CAF+B,CAAnC;;AAIAiE,WAAW,CAAC2B,cAAZ,GAA6B;EACzBO,IAAI,EAAE,CAAC;IAAErH,IAAI,EAAEtE;EAAR,CAAD;AADmB,CAA7B;;AAGA,CAAC,YAAY;EAAE,CAAC,OAAO2E,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/D,MAAM,CAACgE,iBAAP,CAAyB6E,WAAzB,EAAsC,CAAC;IACjGnF,IAAI,EAAE9E,SAD2F;IAEjGqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,eADX;MAEC6F,QAAQ,EAAE,aAFX;MAGCU,IAAI,EAAE;QACF,wBAAwB,YADtB;QAEF,qBAAqB,oCAFnB;QAGF,eAAe,MAHb;QAIF,SAAS;MAJP;IAHP,CAAD;EAF2F,CAAD,CAAtC,EAY1D,YAAY;IAAE,OAAO,CAAC;MAAE/G,IAAI,EAAE1D,MAAM,CAACb;IAAf,CAAD,EAA8B;MAAEuE,IAAI,EAAEkB;IAAR,CAA9B,CAAP;EAA0D,CAZd,EAYgB;IAAEmG,IAAI,EAAE,CAAC;MAC/ErH,IAAI,EAAEtE;IADyE,CAAD;EAAR,CAZhB,CAAnD;AAcC,CAdhB;AAgBA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMuM,iBAAN,SAAgC9C,WAAhC,CAA4C;EACxC;AACJ;AACA;AACA;AACA;EACI1I,WAAW,CAACyK,WAAD,EAAcC,KAAd,EAAqBhG,QAArB,EAA+B;IACtC,MAAM+F,WAAN,EAAmBC,KAAnB;IACA,KAAKD,WAAL,GAAmBA,WAAnB;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKhG,QAAL,GAAgBA,QAAhB;EACH;EACD;AACJ;AACA;;;EACI+G,kBAAkB,GAAG;IACjB,KAAKjG,WAAL,GAAmB,KAAKd,QAAL,CAAce,IAAd,CAAmB,EAAnB,EAAuBC,MAAvB,CAA8B,KAAKgF,KAAL,CAAW/E,OAAzC,CAAnB;;IACA,IAAI,CAAC,KAAK+E,KAAL,CAAW9E,WAAX,CAAuB/D,WAA5B,EAAyC;MACrC,MAAM2C,mCAAmC,EAAzC;IACH;IACD;;;IACA,MAAMpC,aAAa,GAAG,KAAKsI,KAAL,CAAW9E,WAAX,CAAuB/D,WAAvB,CAAmC,KAAKgB,IAAxC,CAAtB;;IACA,IAAIR,KAAK,CAACC,OAAN,CAAcF,aAAd,CAAJ,EAAkC;MAC9B,KAAKsJ,mBAAL;MAAyB;MAAkBtJ,aAA3C;IACH,CAFD,MAGK,IAAIA,aAAa,YAAYjE,UAA7B,EAAyC;MAC1CiE,aAAa,CAACK,IAAd,CAAmBjE,SAAS,CAAC,KAAKmM,UAAN,CAA5B,EACKjI,SADL,CACeiJ,MAAM,IAAI,KAAKD,mBAAL,CAAyBC,MAAzB,CADzB;IAEH;;IACD,KAAKC,UAAL,CAAgB5E,OAAhB,CAAwBvE,IAAxB,CAA6BjE,SAAS,CAAC,KAAKmM,UAAN,CAAtC,EACKjI,SADL,CACe,MAAM,KAAKgJ,mBAAL,EADrB;EAEH;EACD;AACJ;AACA;;;EACI7F,WAAW,GAAG;IACV,KAAKgG,MAAL;;IACA,MAAMhG,WAAN;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACI6F,mBAAmB,CAAC/I,QAAD,EAAW;IAC1B,IAAIA,QAAJ,EAAc;MACV,KAAKmJ,SAAL,GAAiBnJ,QAAjB;IACH;;IACD,IAAI,KAAKiJ,UAAL,CAAgBlK,MAAhB,IAA0B,KAAKoK,SAAnC,EAA8C;MAC1C;MACA,MAAM7H,aAAa,GAAG,KAAK2H,UAAL,CAAgB7D,KAAhB,CAAsB9D,aAA5C;;MACA,KAAKyG,KAAL,CAAW7D,iBAAX,CAA6B,KAAKiF,SAAlC,EAA6C,KAAKtG,WAAlD,EAA+DvB,aAA/D,EAA8E,KAAK4G,KAAnF;IACH,CAJD,MAKK;MACD;MACA,KAAKrF,WAAL,CAAiByB,IAAjB,CAAsB,EAAtB;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACI4E,MAAM,GAAG;IACL,IAAI,KAAKD,UAAL,IAAmB,KAAKA,UAAL,CAAgB7D,KAAvC,EAA8C;MAC1C,KAAK6D,UAAL,CAAgB7D,KAAhB,CAAsB9D,aAAtB,CAAoCnD,KAApC;;MACA,KAAK0E,WAAL,CAAiByB,IAAjB,CAAsB,EAAtB;IACH;EACJ;;AAnEuC;;AAqE5CuE,iBAAiB,CAACvI,IAAlB,GAAyB,SAAS8I,yBAAT,CAAmC5I,CAAnC,EAAsC;EAAE,OAAO,KAAKA,CAAC,IAAIqI,iBAAV,EAA6B3L,MAAM,CAACuD,iBAAP,CAAyBvD,MAAM,CAACb,UAAhC,CAA7B,EAA0Ea,MAAM,CAACuD,iBAAP,CAAyBqB,OAAzB,CAA1E,EAA6G5E,MAAM,CAACuD,iBAAP,CAAyBvD,MAAM,CAACX,eAAhC,CAA7G,CAAP;AAAwK,CAAzO;;AACAsM,iBAAiB,CAACnI,IAAlB,GAAyB,aAAcxD,MAAM,CAACyD,iBAAP,CAAyB;EAAEC,IAAI,EAAEiI,iBAAR;EAA2BhI,SAAS,EAAE,CAAC,CAAC,sBAAD,CAAD,CAAtC;EAAkEuF,cAAc,EAAE,SAASiD,gCAAT,CAA0C/C,EAA1C,EAA8CC,GAA9C,EAAmDC,QAAnD,EAA6D;IAAE,IAAIF,EAAE,GAAG,CAAT,EAAY;MACrNpJ,MAAM,CAACuJ,cAAP,CAAsBD,QAAtB,EAAgCnF,iBAAhC,EAAmD,CAAnD;IACH;;IAAC,IAAIiF,EAAE,GAAG,CAAT,EAAY;MACV,IAAII,EAAJ;;MACAxJ,MAAM,CAACyJ,cAAP,CAAsBD,EAAE,GAAGxJ,MAAM,CAAC0J,WAAP,EAA3B,MAAqDL,GAAG,CAAC0C,UAAJ,GAAiBvC,EAAtE;IACH;EAAE,CALyD;EAKvDM,SAAS,EAAE,CAAC,CAAD,EAAI,eAAJ,EAAqB,sBAArB,CAL4C;EAKEyB,QAAQ,EAAE,CALZ;EAKeC,YAAY,EAAE,SAASY,8BAAT,CAAwChD,EAAxC,EAA4CC,GAA5C,EAAiD;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACpJpJ,MAAM,CAAC0L,WAAP,CAAmB,eAAnB,EAAoCrC,GAAG,CAAC1I,UAAxC,EAAoD,MAApD,EAA4D0I,GAAG,CAAC0B,IAAhE;IACH;EAAE,CAPyD;EAOvDhB,QAAQ,EAAE,CAAC,mBAAD,CAP6C;EAOtBsC,QAAQ,EAAE,CAACrM,MAAM,CAACsM,kBAAP,CAA0B,CAAC;IAAEC,OAAO,EAAE1D,WAAX;IAAwB2D,WAAW,EAAEb;EAArC,CAAD,CAA1B,CAAD,EAAwF3L,MAAM,CAACyM,0BAA/F;AAPY,CAAzB,CAAvC;AAQA;;AACAd,iBAAiB,CAAC7H,cAAlB,GAAmC,MAAM,CACrC;EAAEJ,IAAI,EAAEvE;AAAR,CADqC,EAErC;EAAEuE,IAAI,EAAEkB;AAAR,CAFqC,EAGrC;EAAElB,IAAI,EAAErE;AAAR,CAHqC,CAAzC;;AAKAsM,iBAAiB,CAACnB,cAAlB,GAAmC;EAC/BuB,UAAU,EAAE,CAAC;IAAErI,IAAI,EAAExE,eAAR;IAAyB+E,IAAI,EAAE,CAACE,iBAAD;EAA/B,CAAD;AADmB,CAAnC;;AAGA,CAAC,YAAY;EAAE,CAAC,OAAOJ,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/D,MAAM,CAACgE,iBAAP,CAAyB2H,iBAAzB,EAA4C,CAAC;IACvGjI,IAAI,EAAE9E,SADiG;IAEvGqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,sBADX;MAEC6F,QAAQ,EAAE,mBAFX;MAGCU,IAAI,EAAE;QACF,wBAAwB,YADtB;QAEF,eAAe,MAFb;QAGF,SAAS;MAHP,CAHP;MAQCiC,SAAS,EAAE,CAAC;QAAEH,OAAO,EAAE1D,WAAX;QAAwB2D,WAAW,EAAEb;MAArC,CAAD;IARZ,CAAD;EAFiG,CAAD,CAA5C,EAY1D,YAAY;IAAE,OAAO,CAAC;MAAEjI,IAAI,EAAE1D,MAAM,CAACb;IAAf,CAAD,EAA8B;MAAEuE,IAAI,EAAEkB;IAAR,CAA9B,EAAiD;MAAElB,IAAI,EAAE1D,MAAM,CAACX;IAAf,CAAjD,CAAP;EAA4F,CAZhD,EAYkD;IAAE0M,UAAU,EAAE,CAAC;MACvHrI,IAAI,EAAExE,eADiH;MAEvH+E,IAAI,EAAE,CAACE,iBAAD;IAFiH,CAAD;EAAd,CAZlD,CAAnD;AAeC,CAfhB;AAiBA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,MAAMwI,cAAc,GAAG,eAAvB;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAN,CAAyB;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIzM,WAAW,CAAC0M,SAAD,EAAYhC,KAAZ,EAAmBiC,SAAnB,EAA8BC,QAA9B,EAAwCC,IAAxC,EAA8C;IACrD,KAAKH,SAAL,GAAiBA,SAAjB;IACA,KAAKhC,KAAL,GAAaA,KAAb;IACA,KAAKiC,SAAL,GAAiBA,SAAjB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA;AACR;AACA;;IACQ,KAAKlC,UAAL,GAAkB,IAAIrM,OAAJ,EAAlB;IACA;AACR;AACA;;IACQ,KAAKwO,WAAL,GAAmB,IAAnB;IACA,KAAKC,OAAL,GAAe,EAAf;;IACA,KAAKC,WAAL;;IACA,IAAI,KAAKH,IAAT,EAAe;MACX,KAAKA,IAAL,CAAUI,MAAV,CAAiBxK,IAAjB,CAAsBjE,SAAS,CAAC,KAAKmM,UAAN,CAA/B,EAAkDjI,SAAlD,CAA4D,MAAM,KAAKsK,WAAL,EAAlE;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACa,IAAL3E,KAAK,GAAG;IAAE,OAAO,KAAK6E,MAAZ;EAAqB;EACnC;AACJ;AACA;AACA;;;EACa,IAAL7E,KAAK,CAACyC,KAAD,EAAQ;IACb,KAAKoC,MAAL,GAAczN,oBAAoB,CAACqL,KAAD,CAAlC;;IACA,KAAKkC,WAAL;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACc,IAANG,MAAM,GAAG;IAAE,OAAO,KAAKJ,OAAZ;EAAsB;EACrC;AACJ;AACA;AACA;;;EACc,IAANI,MAAM,CAACA,MAAD,EAAS;IACf;IACA,IAAIrC,KAAK,GAAGqC,MAAZ;IACA;;IACA,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;MAC5B;MACA,MAAME,KAAK,GAAGF,MAAM,CAACG,KAAP,CAAad,cAAb,CAAd;MACA1B,KAAK,GAAGuC,KAAK,CAAC,CAAD,CAAb;MACAD,KAAK,GAAGC,KAAK,CAAC,CAAD,CAAL,IAAYD,KAApB;IACH;;IACD,KAAKN,WAAL,GAAmBM,KAAnB;IACA,KAAKL,OAAL,GAAetN,oBAAoB,CAACqL,KAAD,CAAnC;;IACA,KAAKkC,WAAL;EACH;EACD;AACJ;AACA;;;EACInH,WAAW,GAAG;IACV,KAAK8E,UAAL,CAAgB5E,IAAhB;;IACA,KAAK4E,UAAL,CAAgB3E,QAAhB;EACH;EACD;AACJ;AACA;AACA;;;EACIuH,cAAc,GAAG;IACb;IACA,MAAMC,SAAS,GAAI,KAAKd,SAAL,CAAe7J,IAAf,IAAuB,KAAK6H,KAAL,CAAW9E,WAAX,CAAuBzE,QAA/C,GACZ,KAAKuJ,KAAL,CAAW9E,WAAX,CAAuBzE,QAAvB,CAAgC,KAAKuL,SAAL,CAAe7J,IAA/C,CADY,GAEZ,IAFN;IAGA;;IACA,MAAMwF,KAAK,GAAG,KAAK6E,MAAL,IAAeM,SAA7B;IACA,OAAOnF,KAAK,GAAI,GAAEA,KAAK,GAAG,KAAK0E,OAAQ,GAAE,KAAKD,WAAY,EAA9C,GAAkD,IAA9D;EACH;EACD;AACJ;AACA;;;EACIE,WAAW,GAAG;IACV;IACA,MAAMS,OAAO,GAAG,KAAKF,cAAL,EAAhB;IACA;;;IACA,MAAMG,WAAW,GAAG,KAAKb,IAAL,IAAa,KAAKA,IAAL,CAAU/B,KAAV,KAAoB,KAAjC,GAAyC,cAAzC,GAA0D,aAA9E;;IACA,KAAK6B,SAAL,CAAegB,QAAf,CAAwB,KAAKf,QAAL,CAAc3B,aAAtC,EAAqDyC,WAArD,EAAkED,OAAlE;EACH;;AA/FoB;;AAiGzBhB,kBAAkB,CAACxJ,IAAnB,GAA0B,SAAS2K,0BAAT,CAAoCzK,CAApC,EAAuC;EAAE,OAAO,KAAKA,CAAC,IAAIsJ,kBAAV,EAA8B5M,MAAM,CAACuD,iBAAP,CAAyBsF,WAAzB,CAA9B,EAAqE7I,MAAM,CAACuD,iBAAP,CAAyBqB,OAAzB,CAArE,EAAwG5E,MAAM,CAACuD,iBAAP,CAAyBvD,MAAM,CAACP,SAAhC,CAAxG,EAAoJO,MAAM,CAACuD,iBAAP,CAAyBvD,MAAM,CAACb,UAAhC,CAApJ,EAAiMa,MAAM,CAACuD,iBAAP,CAAyBtD,MAAM,CAACN,cAAhC,EAAgD,CAAhD,CAAjM,CAAP;AAA8P,CAAjU;;AACAiN,kBAAkB,CAACpJ,IAAnB,GAA0B,aAAcxD,MAAM,CAACyD,iBAAP,CAAyB;EAAEC,IAAI,EAAEkJ,kBAAR;EAA4BjJ,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,oBAAL,EAA2B,EAA3B,CAAD,CAAvC;EAAyEC,MAAM,EAAE;IAAE4E,KAAK,EAAE,CAAC,oBAAD,EAAuB,OAAvB,CAAT;IAA0C8E,MAAM,EAAE,CAAC,0BAAD,EAA6B,QAA7B;EAAlD;AAAjF,CAAzB,CAAxC;AACA;;AACAV,kBAAkB,CAAC9I,cAAnB,GAAoC,MAAM,CACtC;EAAEJ,IAAI,EAAEmF;AAAR,CADsC,EAEtC;EAAEnF,IAAI,EAAEkB;AAAR,CAFsC,EAGtC;EAAElB,IAAI,EAAEjE;AAAR,CAHsC,EAItC;EAAEiE,IAAI,EAAEvE;AAAR,CAJsC,EAKtC;EAAEuE,IAAI,EAAE/D,cAAR;EAAwBqO,UAAU,EAAE,CAAC;IAAEtK,IAAI,EAAElE;EAAR,CAAD;AAApC,CALsC,CAA1C;;AAOAoN,kBAAkB,CAACpC,cAAnB,GAAoC;EAChChC,KAAK,EAAE,CAAC;IAAE9E,IAAI,EAAEtE,KAAR;IAAe6E,IAAI,EAAE,CAAC,oBAAD;EAArB,CAAD,CADyB;EAEhCqJ,MAAM,EAAE,CAAC;IAAE5J,IAAI,EAAEtE,KAAR;IAAe6E,IAAI,EAAE,CAAC,0BAAD;EAArB,CAAD;AAFwB,CAApC;;AAIA,CAAC,YAAY;EAAE,CAAC,OAAOF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/D,MAAM,CAACgE,iBAAP,CAAyB4I,kBAAzB,EAA6C,CAAC;IACxGlJ,IAAI,EAAE9E,SADkG;IAExGqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE;IADX,CAAD;EAFkG,CAAD,CAA7C,EAK1D,YAAY;IAAE,OAAO,CAAC;MAAER,IAAI,EAAEmF;IAAR,CAAD,EAAwB;MAAEnF,IAAI,EAAEkB;IAAR,CAAxB,EAA2C;MAAElB,IAAI,EAAE1D,MAAM,CAACP;IAAf,CAA3C,EAAuE;MAAEiE,IAAI,EAAE1D,MAAM,CAACb;IAAf,CAAvE,EAAoG;MAAEuE,IAAI,EAAEzD,MAAM,CAACN,cAAf;MAA+BqO,UAAU,EAAE,CAAC;QAC7JtK,IAAI,EAAElE;MADuJ,CAAD;IAA3C,CAApG,CAAP;EAEF,CAP8C,EAO5C;IAAEgJ,KAAK,EAAE,CAAC;MACpB9E,IAAI,EAAEtE,KADc;MAEpB6E,IAAI,EAAE,CAAC,oBAAD;IAFc,CAAD,CAAT;IAGVqJ,MAAM,EAAE,CAAC;MACT5J,IAAI,EAAEtE,KADG;MAET6E,IAAI,EAAE,CAAC,0BAAD;IAFG,CAAD;EAHE,CAP4C,CAAnD;AAaC,CAbhB;AAeA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMgK,iBAAN,CAAwB;EACpB;AACJ;AACA;AACA;EACI9N,WAAW,CAAC0K,KAAD,EAAQgC,SAAR,EAAmB;IAC1B,KAAKhC,KAAL,GAAaA,KAAb;IACA,KAAKgC,SAAL,GAAiBA,SAAjB;IACA,KAAKqB,UAAL,GAAkB,KAAlB;EACH;EACD;AACJ;AACA;AACA;;;EACiB,IAATC,SAAS,GAAG;IAAE,OAAO,KAAKD,UAAZ;EAAyB;EAC3C;AACJ;AACA;AACA;;;EACiB,IAATC,SAAS,CAAClD,KAAD,EAAQ;IAAE,KAAKiD,UAAL,GAAkBrO,qBAAqB,CAACoL,KAAD,CAAvC;EAAiD;EACxE;AACJ;AACA;AACA;;;EACImD,OAAO,CAACC,KAAD,EAAQ;IACX,KAAKF,SAAL,GACM,KAAKtD,KAAL,CAAW9E,WAAX,CAAuBlF,iBAAvB,CAAyC,KAAKgM,SAAL,CAAe7J,IAAxD,CADN,GAEM,KAAK6H,KAAL,CAAW9E,WAAX,CAAuB1F,MAAvB,CAA8B,KAAKwM,SAAL,CAAe7J,IAA7C,CAFN;IAGAqL,KAAK,CAACC,eAAN;EACH;;AA7BmB;;AA+BxBL,iBAAiB,CAAC7K,IAAlB,GAAyB,SAASmL,yBAAT,CAAmCjL,CAAnC,EAAsC;EAAE,OAAO,KAAKA,CAAC,IAAI2K,iBAAV,EAA6BjO,MAAM,CAACuD,iBAAP,CAAyBqB,OAAzB,CAA7B,EAAgE5E,MAAM,CAACuD,iBAAP,CAAyBsF,WAAzB,CAAhE,CAAP;AAAgH,CAAjL;;AACAoF,iBAAiB,CAACzK,IAAlB,GAAyB,aAAcxD,MAAM,CAACyD,iBAAP,CAAyB;EAAEC,IAAI,EAAEuK,iBAAR;EAA2BtK,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,mBAAL,EAA0B,EAA1B,CAAD,CAAtC;EAAuE6H,YAAY,EAAE,SAASgD,8BAAT,CAAwCpF,EAAxC,EAA4CC,GAA5C,EAAiD;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MAC5MpJ,MAAM,CAACyO,UAAP,CAAkB,OAAlB,EAA2B,SAASC,0CAAT,CAAoDC,MAApD,EAA4D;QAAE,OAAOtF,GAAG,CAAC+E,OAAJ,CAAYO,MAAZ,CAAP;MAA6B,CAAtH;IACH;EAAE,CAFyD;EAEvD/K,MAAM,EAAE;IAAEuK,SAAS,EAAE,CAAC,4BAAD,EAA+B,WAA/B;EAAb;AAF+C,CAAzB,CAAvC;AAGA;;AACAF,iBAAiB,CAACnK,cAAlB,GAAmC,MAAM,CACrC;EAAEJ,IAAI,EAAEkB;AAAR,CADqC,EAErC;EAAElB,IAAI,EAAEmF;AAAR,CAFqC,CAAzC;;AAIAoF,iBAAiB,CAACzD,cAAlB,GAAmC;EAC/B2D,SAAS,EAAE,CAAC;IAAEzK,IAAI,EAAEtE,KAAR;IAAe6E,IAAI,EAAE,CAAC,4BAAD;EAArB,CAAD;AADoB,CAAnC;;AAGA,CAAC,YAAY;EAAE,CAAC,OAAOF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/D,MAAM,CAACgE,iBAAP,CAAyBiK,iBAAzB,EAA4C,CAAC;IACvGvK,IAAI,EAAE9E,SADiG;IAEvGqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,qBADX;MAECuG,IAAI,EAAE;QACF,WAAW;MADT;IAFP,CAAD;EAFiG,CAAD,CAA5C,EAQ1D,YAAY;IAAE,OAAO,CAAC;MAAE/G,IAAI,EAAEkB;IAAR,CAAD,EAAoB;MAAElB,IAAI,EAAEmF;IAAR,CAApB,CAAP;EAAoD,CARR,EAQU;IAAEsF,SAAS,EAAE,CAAC;MAC9EzK,IAAI,EAAEtE,KADwE;MAE9E6E,IAAI,EAAE,CAAC,4BAAD;IAFwE,CAAD;EAAb,CARV,CAAnD;AAWC,CAXhB;AAaA;AACA;AACA;AACA;;AACA;;;AACA,MAAM2K,qBAAqB,GAAG,CAC1BjD,iBAD0B,EAE1BzI,cAF0B,EAG1B0J,kBAH0B,EAI1BqB,iBAJ0B,EAK1BrJ,OAL0B,EAM1BiE,WAN0B,EAO1B1E,iBAP0B,CAA9B;;AASA,MAAM0K,aAAN,CAAoB;;AAEpBA,aAAa,CAACzL,IAAd,GAAqB,SAAS0L,qBAAT,CAA+BxL,CAA/B,EAAkC;EAAE,OAAO,KAAKA,CAAC,IAAIuL,aAAV,GAAP;AAAoC,CAA7F;;AACAA,aAAa,CAACE,IAAd,GAAqB,aAAc/O,MAAM,CAACgP,gBAAP,CAAwB;EAAEtL,IAAI,EAAEmL;AAAR,CAAxB,CAAnC;AACAA,aAAa,CAACI,IAAd,GAAqB,aAAcjP,MAAM,CAACkP,gBAAP,CAAwB;EAAExC,SAAS,EAAE,CAAC5M,YAAD,EAAeoD,cAAf,CAAb;EAA6CiM,OAAO,EAAE,CAACpP,YAAD;AAAtD,CAAxB,CAAnC;;AACA,CAAC,YAAY;EAAE,CAAC,OAAOgE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/D,MAAM,CAACgE,iBAAP,CAAyB6K,aAAzB,EAAwC,CAAC;IACnGnL,IAAI,EAAEhE,QAD6F;IAEnGuE,IAAI,EAAE,CAAC;MACCkL,OAAO,EAAE,CAACpP,YAAD,CADV;MAECqP,OAAO,EAAER,qBAFV;MAGCS,YAAY,EAAET,qBAHf;MAIClC,SAAS,EAAE,CAAC5M,YAAD,EAAeoD,cAAf;IAJZ,CAAD;EAF6F,CAAD,CAAxC,EAQ1D,IAR0D,EAQpD,IARoD,CAAnD;AAQO,CARtB;;AASA,CAAC,YAAY;EAAE,CAAC,OAAOoM,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDtP,MAAM,CAACuP,kBAAP,CAA0BV,aAA1B,EAAyC;IAAEQ,YAAY,EAAE,YAAY;MAAE,OAAO,CAAC1D,iBAAD,EAAoBzI,cAApB,EAAoC0J,kBAApC,EAAwDqB,iBAAxD,EAA2ErJ,OAA3E,EAAoFiE,WAApF,EAAiG1E,iBAAjG,CAAP;IAA6H,CAA3J;IAA6JgL,OAAO,EAAE,YAAY;MAAE,OAAO,CAACpP,YAAD,CAAP;IAAwB,CAA5M;IAA8MqP,OAAO,EAAE,YAAY;MAAE,OAAO,CAACzD,iBAAD,EAAoBzI,cAApB,EAAoC0J,kBAApC,EAAwDqB,iBAAxD,EAA2ErJ,OAA3E,EAAoFiE,WAApF,EAAiG1E,iBAAjG,CAAP;IAA6H;EAAlW,CAAzC,CAAnD;AAAoc,CAAnd;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA,SAASjE,eAAT,EAA0BmB,eAA1B,EAA2CU,iBAA3C,EAA8D4J,iBAA9D,EAAiF5I,wBAAjF,EAA2GG,cAA3G,EAA2H0J,kBAA3H,EAA+IzI,iBAA/I,EAAkKS,OAAlK,EAA2KiE,WAA3K,EAAwLvE,6BAAxL,EAAuNE,mCAAvN,EAA4PC,kCAA5P,EAAgSC,0BAAhS,EAA4TC,mCAA5T,EAAiWkK,aAAjW,EAAgXZ,iBAAhX"},"metadata":{},"sourceType":"module"}