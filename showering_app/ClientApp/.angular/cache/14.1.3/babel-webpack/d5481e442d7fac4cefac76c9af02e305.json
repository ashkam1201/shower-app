{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r1.action());\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) {}\n\nclass MatSnackBarRef {\n  /**\n   * @param {?} containerInstance\n   * @param {?} _overlayRef\n   */\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /**\n     * Subject for notifying the user that the snack bar has been dismissed.\n     */\n\n    this._afterDismissed = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar has opened and appeared.\n     */\n\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar action was called.\n     */\n\n    this._onAction = new Subject();\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance; // Dismiss snackbar on action.\n\n    this.onAction().subscribe(() => this.dismiss());\n\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /**\n   * Dismisses the snack bar.\n   * @return {?}\n   */\n\n\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @return {?}\n   */\n\n\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n\n      this._onAction.next();\n\n      this._onAction.complete();\n    }\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n\n\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /**\n   * Dismisses the snack bar after some duration\n   * @param {?} duration\n   * @return {?}\n   */\n\n\n  _dismissAfter(duration) {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n  /**\n   * Marks the snackbar as opened\n   * @return {?}\n   */\n\n\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }\n  }\n  /**\n   * Cleans up the DOM after closing.\n   * @return {?}\n   */\n\n\n  _finishDismiss() {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n\n    this._afterDismissed.complete();\n\n    this._dismissedByAction = false;\n  }\n  /**\n   * Gets an observable that is notified when the snack bar is finished closing.\n   * @return {?}\n   */\n\n\n  afterDismissed() {\n    return this._afterDismissed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the snack bar has opened and appeared.\n   * @return {?}\n   */\n\n\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /**\n   * Gets an observable that is notified when the snack bar action is called.\n   * @return {?}\n   */\n\n\n  onAction() {\n    return this._onAction.asObservable();\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to access the data that was passed in to a snack bar.\n  @type {?} */\n\n\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\n\nclass MatSnackBarConfig {\n  constructor() {\n    /**\n     * The politeness level for the MatAriaLiveAnnouncer announcement.\n     */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n\n    this.announcementMessage = '';\n    /**\n     * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n     */\n\n    this.duration = 0;\n    /**\n     * Data being injected into the child component.\n     */\n\n    this.data = null;\n    /**\n     * The horizontal position to place the snack bar.\n     */\n\n    this.horizontalPosition = 'center';\n    /**\n     * The vertical position to place the snack bar.\n     */\n\n    this.verticalPosition = 'bottom';\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nclass SimpleSnackBar {\n  /**\n   * @param {?} snackBarRef\n   * @param {?} data\n   */\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /**\n   * Performs the action on the snack bar.\n   * @return {?}\n   */\n\n\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /**\n   * If the action button should be shown.\n   * @return {?}\n   */\n\n\n  get hasAction() {\n    return !!this.data.action;\n  }\n\n}\n\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\n\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\");\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  dependencies: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nSimpleSnackBar.ctorParameters = () => [{\n  type: MatSnackBarRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DATA]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-simple-snackbar'\n      },\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by the Material snack bar.\n * \\@docs-private\n  @type {?} */\n\n\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\n\nclass MatSnackBarContainer extends BasePortalOutlet {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} snackBarConfig\n   */\n  constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this.snackBarConfig = snackBarConfig;\n    /**\n     * Whether the component has been destroyed.\n     */\n\n    this._destroyed = false;\n    /**\n     * Subject for notifying that the snack bar has exited from view.\n     */\n\n    this._onExit = new Subject();\n    /**\n     * Subject for notifying that the snack bar has finished entering the view.\n     */\n\n    this._onEnter = new Subject();\n    /**\n     * The state of the snack bar animations.\n     */\n\n    this._animationState = 'void';\n  }\n  /**\n   * Attach a component portal as content to this snack bar container.\n   * @template T\n   * @param {?} portal\n   * @return {?}\n   */\n\n\n  attachComponentPortal(portal) {\n    this._assertNotAttached();\n\n    this._applySnackBarClasses();\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a template portal as content to this snack bar container.\n   * @template C\n   * @param {?} portal\n   * @return {?}\n   */\n\n\n  attachTemplatePortal(portal) {\n    this._assertNotAttached();\n\n    this._applySnackBarClasses();\n\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /**\n   * Handle end of animations, updating the state of the snackbar.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n\n    if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      /** @type {?} */\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /**\n   * Begin animation of snack bar entrance into view.\n   * @return {?}\n   */\n\n\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Begin animation of the snack bar exiting from view.\n   * @return {?}\n   */\n\n\n  exit() {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n  /**\n   * Makes sure the exit callbacks have been invoked when the element is destroyed.\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._destroyed = true;\n\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   * @return {?}\n   */\n\n\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n\n      this._onExit.complete();\n    });\n  }\n  /**\n   * Applies the various positioning and user-configured CSS classes to the snack bar.\n   * @return {?}\n   */\n\n\n  _applySnackBarClasses() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    /** @type {?} */\n\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n  /**\n   * Asserts that no content is already attached to the container.\n   * @return {?}\n   */\n\n\n  _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n\n}\n\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n  return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\n\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"alert\", 1, \"mat-snack-bar-container\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [ɵngcc3.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSnackBarContainer.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: MatSnackBarConfig\n}];\n\nMatSnackBarContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'role': 'alert',\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatSnackBarModule {}\n\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\n\nMatSnackBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar],\n      entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function () {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function () {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to specify default snack bar.\n  @type {?} */\n\n\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nclass MatSnackBar {\n  /**\n   * @param {?} _overlay\n   * @param {?} _live\n   * @param {?} _injector\n   * @param {?} _breakpointObserver\n   * @param {?} _parentSnackBar\n   * @param {?} _defaultConfig\n   */\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n\n    this._snackBarRefAtThisLevel = null;\n  }\n  /**\n   * Reference to the currently opened snackbar at *any* level.\n   * @return {?}\n   */\n\n\n  get _openedSnackBarRef() {\n    /** @type {?} */\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @template T\n   * @param {?} component Component to be instantiated.\n   * @param {?=} config Extra configuration for the snack bar.\n   * @return {?}\n   */\n\n\n  openFromComponent(component, config) {\n    return (\n      /** @type {?} */\n      this._attach(component, config)\n    );\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param {?} template Template to be instantiated.\n   * @param {?=} config Extra configuration for the snack bar.\n   * @return {?}\n   */\n\n\n  openFromTemplate(template, config) {\n    return this._attach(template, config);\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param {?} message The message to show in the snackbar.\n   * @param {?=} action The label for the snackbar action.\n   * @param {?=} config Additional configuration options for the snackbar.\n   * @return {?}\n   */\n\n\n  open(message, action = '', config) {\n    /** @type {?} */\n    const _config = Object.assign({}, this._defaultConfig, config); // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n\n\n    _config.data = {\n      message,\n      action\n    };\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   * @return {?}\n   */\n\n\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   * @param {?} overlayRef\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _attachSnackBarContainer(overlayRef, config) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    /** @type {?} */\n\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarConfig, config]]));\n    /** @type {?} */\n\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    /** @type {?} */\n\n    const containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   * @template T\n   * @param {?} content\n   * @param {?=} userConfig\n   * @return {?}\n   */\n\n\n  _attach(content, userConfig) {\n    /** @type {?} */\n    const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n    /** @type {?} */\n\n    const overlayRef = this._createOverlay(config);\n    /** @type {?} */\n\n\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    /** @type {?} */\n\n\n    const snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      /** @type {?} */\n      const portal = new TemplatePortal(content,\n      /** @type {?} */\n      null,\n      /** @type {?} */\n      {\n        $implicit: config.data,\n        snackBarRef\n      });\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      /** @type {?} */\n      const injector = this._createInjector(config, snackBarRef);\n      /** @type {?} */\n\n\n      const portal = new ComponentPortal(content, undefined, injector);\n      /** @type {?} */\n\n      const contentRef = container.attachComponentPortal(portal); // We can't pass this via the injector, because the injector is created earlier.\n\n      snackBarRef.instance = contentRef.instance;\n    } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n\n\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(state$$1 => {\n      if (state$$1.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /**\n   * Animates the old snack bar out and the new one in.\n   * @param {?} snackBarRef\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _animateSnackBar(snackBarRef, config) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(\n      /** @type {?} */\n      config.duration));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param {?} config The user-specified snack bar config.\n   * @return {?}\n   */\n\n\n  _createOverlay(config) {\n    /** @type {?} */\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n    /** @type {?} */\n\n    let positionStrategy = this._overlay.position().global();\n    /** @type {?} */\n\n\n    const isRtl = config.direction === 'rtl';\n    /** @type {?} */\n\n    const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    /** @type {?} */\n\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    } // Set horizontal position.\n\n\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @template T\n   * @param {?} config Config that was used to create the snack bar.\n   * @param {?} snackBarRef Reference to the snack bar.\n   * @return {?}\n   */\n\n\n  _createInjector(config, snackBarRef) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    return new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarRef, snackBarRef], [MAT_SNACK_BAR_DATA, config.data]]));\n  }\n\n}\n\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\nMatSnackBar.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatSnackBar,\n  factory: MatSnackBar.ɵfac,\n  providedIn: MatSnackBarModule\n});\n/** @nocollapse */\n\nMatSnackBar.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: LiveAnnouncer\n}, {\n  type: Injector\n}, {\n  type: BreakpointObserver\n}, {\n  type: MatSnackBar,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: MatSnackBarConfig,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n  }]\n}];\n/** @nocollapse */\n\n\nMatSnackBar.ngInjectableDef = defineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc4.Overlay\n    }, {\n      type: ɵngcc5.LiveAnnouncer\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"names":["Subject","InjectionToken","Component","ViewEncapsulation","Inject","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","NgZone","ViewChild","NgModule","Injectable","Injector","Optional","SkipSelf","TemplateRef","defineInjectable","inject","INJECTOR","animate","state","style","transition","trigger","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","PortalInjector","TemplatePortal","take","takeUntil","OverlayModule","Overlay","OverlayConfig","CommonModule","MatCommonModule","MatButtonModule","LiveAnnouncer","BreakpointObserver","Breakpoints","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","SimpleSnackBar_div_2_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate","data","MatSnackBarContainer_ng_template_0_Template","MatSnackBarRef","constructor","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","hasAction","ɵfac","SimpleSnackBar_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","dependencies","NgIf","MatButton","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","None","OnPush","host","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","ngOnDestroy","onMicrotaskEmpty","pipe","element","nativeElement","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer_Template","animation","propDecorators","animations","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","_config","Object","assign","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","WeakMap","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Handset","detachments","state$$1","matches","overlayElement","remove","_animateSnackBar","announce","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","MatSnackBar_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","ngInjectableDef"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/snack-bar.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1.action()); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to access the data that was passed in to a snack bar.\n  @type {?} */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, dependencies: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{ selector: 'simple-snack-bar', template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                    'class': 'mat-simple-snackbar'\n                }, styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"] }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Animations used by the Material snack bar.\n * \\@docs-private\n  @type {?} */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"alert\", 1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, dependencies: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] }, changeDetection: 0 });\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{ selector: 'snack-bar-container', template: \"<ng-template cdkPortalOutlet></ng-template>\", changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                    'role': 'alert',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                }, styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"] }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to specify default snack bar.\n  @type {?} */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return /** @type {?} */ (this._attach(component, config));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, /** @type {?} */ ((null)), /** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            }));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(state$$1 => {\n            if (state$$1.matches) {\n                overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n            }\n            else {\n                overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n            }\n        });\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(/** @type {?} */ ((config.duration))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatSnackBar, factory: MatSnackBar.ɵfac, providedIn: MatSnackBarModule });\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = defineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc5.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc6.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}