{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to specify the checkbox click behavior.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\nconst _c0 = [\"input\"];\n\nconst _c1 = function () {\n  return {\n    enterDuration: 150\n  };\n};\n\nconst _c2 = [\"*\"];\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nlet nextUniqueId = 0;\n/** @type {?} */\n\nlet calculatedRippleRadius = 0;\n/** *\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n  @type {?} */\n\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n/** @enum {number} */\n\nvar TransitionCheckState = {\n  /** The initial state of the component before any user interaction. */\n  Init: 0,\n\n  /** The state representing the component when it's becoming checked. */\n  Checked: 1,\n\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked: 2,\n\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate: 3\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\n\nclass MatCheckboxChange {}\n/**\n * \\@docs-private\n */\n\n\nclass MatCheckboxBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n/** @type {?} */\n\n\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n\n\nclass MatCheckbox extends _MatCheckboxMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _focusMonitor\n   * @param {?} _ngZone\n   * @param {?} tabIndex\n   * @param {?} _clickAction\n   * @param {?=} _animationMode\n   */\n  constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n    super(elementRef);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._focusMonitor = _focusMonitor;\n    this._ngZone = _ngZone;\n    this._clickAction = _clickAction;\n    this._animationMode = _animationMode;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n\n    this.ariaLabel = '';\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n\n    this.ariaLabelledby = null;\n    this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n    /**\n     * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n     */\n\n    this.id = this._uniqueId;\n    /**\n     * Whether the label should appear after or before the checkbox. Defaults to 'after'\n     */\n\n    this.labelPosition = 'after';\n    /**\n     * Name value will be applied to the input element if present\n     */\n\n    this.name = null;\n    /**\n     * Event emitted when the checkbox's `checked` value changes.\n     */\n\n    this.change = new EventEmitter();\n    /**\n     * Event emitted when the checkbox's `indeterminate` value changes.\n     */\n\n    this.indeterminateChange = new EventEmitter();\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * \\@docs-private\n     */\n\n    this._onTouched = () => {};\n\n    this._currentAnimationClass = '';\n    this._currentCheckState = TransitionCheckState.Init;\n\n    this._controlValueAccessorChangeFn = () => {};\n\n    this._checked = false;\n    this._disabled = false;\n    this._indeterminate = false;\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n  /**\n   * Returns the unique id for the visual hidden input.\n   * @return {?}\n   */\n\n\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /**\n   * Whether the checkbox is required.\n   * @return {?}\n   */\n\n\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Whether the checkbox is checked.\n   * @return {?}\n   */\n\n\n  get checked() {\n    return this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set checked(value) {\n    if (value != this.checked) {\n      this._checked = value;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   * @return {?}\n   */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set disabled(value) {\n    if (value != this.disabled) {\n      this._disabled = value;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   * @return {?}\n   */\n\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set indeterminate(value) {\n    /** @type {?} */\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  /**\n   * Method being called whenever the label text changes.\n   * @return {?}\n   */\n\n\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _getAriaChecked() {\n    return this.checked ? 'true' : this.indeterminate ? 'mixed' : 'false';\n  }\n  /**\n   * @param {?} newState\n   * @return {?}\n   */\n\n\n  _transitionCheckState(newState) {\n    /** @type {?} */\n    let oldState = this._currentCheckState;\n    /** @type {?} */\n\n    let element = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n      /** @type {?} */\n\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _emitChangeEvent() {\n    /** @type {?} */\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n\n    this.change.emit(event);\n  }\n  /**\n   * Toggles the `checked` state of the checkbox.\n   * @return {?}\n   */\n\n\n  toggle() {\n    this.checked = !this.checked;\n  }\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation(); // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n\n      this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked); // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n\n\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n  /**\n   * Focuses the checkbox.\n   * @return {?}\n   */\n\n\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _onInteractionEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n  /**\n   * @param {?} oldState\n   * @param {?} newState\n   * @return {?}\n   */\n\n\n  _getAnimationClassForCheckStateTransition(oldState, newState) {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n    /** @type {?} */\n\n\n    let animSuffix = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n\n        break;\n\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ? 'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ? 'checked-unchecked' : 'checked-indeterminate';\n        break;\n\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ? 'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   * @return {?}\n   */\n\n\n  _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      /** @type {?} */\n      const rippleWidth = this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n\n    this.ripple.radius = calculatedRippleRadius;\n  }\n\n}\n\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) {\n  return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatCheckbox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatCheckbox,\n  selectors: [[\"mat-checkbox\"]],\n  viewQuery: function MatCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(MatRipple, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-checkbox\"],\n  hostVars: 12,\n  hostBindings: function MatCheckbox_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    name: \"name\",\n    required: \"required\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    indeterminate: \"indeterminate\",\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\",\n    indeterminateChange: \"indeterminateChange\"\n  },\n  exportAs: [\"matCheckbox\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 17,\n  vars: 20,\n  consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"indeterminate\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2)(3, \"input\", 3, 4);\n      ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) {\n        return ctx._onInteractionEvent($event);\n      })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n      ɵngcc0.ɵɵelement(6, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(7, \"div\", 7);\n      ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n      ɵngcc0.ɵɵelement(10, \"path\", 10);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelement(11, \"div\", 11);\n      ɵngcc0.ɵɵelementEnd()();\n      ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n      ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(16);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n\n      const _r2 = ɵngcc0.ɵɵreference(13);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"indeterminate\", ctx.indeterminate);\n      ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    }\n  },\n  dependencies: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent],\n  styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-indeterminate.mat-checkbox-disabled .mat-checkbox-inner-container{opacity:.5}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatCheckbox.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: NgZone\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_CHECKBOX_CLICK_ACTION]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatCheckbox.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  id: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  indeterminateChange: [{\n    type: Output\n  }],\n  value: [{\n    type: Input\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }],\n  ripple: [{\n    type: ViewChild,\n    args: [MatRipple]\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  indeterminate: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'mat-checkbox',\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n      exportAs: 'matCheckbox',\n      host: {\n        'class': 'mat-checkbox',\n        '[id]': 'id',\n        '[attr.tabindex]': 'null',\n        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n        '[class.mat-checkbox-checked]': 'checked',\n        '[class.mat-checkbox-disabled]': 'disabled',\n        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n      },\n      providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n      inputs: ['disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-indeterminate.mat-checkbox-disabled .mat-checkbox-inner-container{opacity:.5}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_CHECKBOX_CLICK_ACTION]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    indeterminate: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n\nMatCheckboxRequiredValidator.ɵfac = /*@__PURE__*/function () {\n  let ɵMatCheckboxRequiredValidator_BaseFactory;\n  return function MatCheckboxRequiredValidator_Factory(t) {\n    return (ɵMatCheckboxRequiredValidator_BaseFactory || (ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator)))(t || MatCheckboxRequiredValidator);\n  };\n}();\n\nMatCheckboxRequiredValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatCheckboxRequiredValidator,\n  selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n  hostVars: 1,\n  hostBindings: function MatCheckboxRequiredValidator_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n      providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n      host: {\n        '[attr.required]': 'required ? \"\" : null'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatCheckboxModule {}\n\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) {\n  return new (t || MatCheckboxModule)();\n};\n\nMatCheckboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatCheckboxModule\n});\nMatCheckboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n      declarations: [MatCheckbox, MatCheckboxRequiredValidator]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, {\n    declarations: function () {\n      return [MatCheckbox, MatCheckboxRequiredValidator];\n    },\n    imports: function () {\n      return [CommonModule, MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function () {\n      return [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };","map":{"version":3,"names":["InjectionToken","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","EventEmitter","forwardRef","Inject","Input","NgZone","Optional","Output","ViewChild","ViewEncapsulation","Directive","NgModule","FocusMonitor","coerceBooleanProperty","NG_VALUE_ACCESSOR","CheckboxRequiredValidator","NG_VALIDATORS","MatRipple","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","ObserversModule","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","enterDuration","_c2","MAT_CHECKBOX_CLICK_ACTION","nextUniqueId","calculatedRippleRadius","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","constructor","_elementRef","_MatCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_clickAction","_animationMode","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","parseInt","monitor","subscribe","focusOrigin","Promise","resolve","then","inputId","required","_required","value","ngAfterViewChecked","_calculateRippleRadius","ngOnDestroy","stopMonitoring","checked","markForCheck","disabled","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","event","source","toggle","_onInputClick","stopPropagation","_inputElement","focus","focusVia","_onInteractionEvent","animSuffix","rippleWidth","querySelector","clientWidth","ripple","radius","ɵfac","MatCheckbox_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatCheckbox_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatCheckbox_HostBindings","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","color","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatCheckbox_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatCheckbox_Template_input_change_3_listener","$event","MatCheckbox_Template_input_click_3_listener","ɵɵelementEnd","ɵɵelement","ɵɵnamespaceSVG","ɵɵnamespaceHTML","MatCheckbox_Template_span_cdkObserveContent_12_listener","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","_r2","ɵɵadvance","textContent","trim","ɵɵproperty","ɵɵpureFunction0","dependencies","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","ɵMatCheckboxRequiredValidator_BaseFactory","MatCheckboxRequiredValidator_Factory","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","MatCheckboxRequiredValidator_HostBindings","MatCheckboxModule","MatCheckboxModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/checkbox.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to specify the checkbox click behavior.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/** @type {?} */\nlet calculatedRippleRadius = 0;\n/** *\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n  @type {?} */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true\n};\n/** @enum {number} */\nvar TransitionCheckState = {\n    /** The initial state of the component before any user interaction. */\n    Init: 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked: 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked: 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate: 3,\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {\n}\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusMonitor\n     * @param {?} _ngZone\n     * @param {?} tabIndex\n     * @param {?} _clickAction\n     * @param {?=} _animationMode\n     */\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._clickAction = _clickAction;\n        this._animationMode = _animationMode;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = TransitionCheckState.Init;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        this._calculateRippleRadius();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n    get indeterminate() { return this._indeterminate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set indeterminate(value) {\n        /** @type {?} */\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            }\n            else {\n                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and it's children.\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n    _getAriaChecked() {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n    /**\n     * @param {?} newState\n     * @return {?}\n     */\n    _transitionCheckState(newState) {\n        /** @type {?} */\n        let oldState = this._currentCheckState;\n        /** @type {?} */\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            /** @type {?} */\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    /**\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        /** @type {?} */\n        let animSuffix = '';\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n     * for the application.\n     * @return {?}\n     */\n    _calculateRippleRadius() {\n        if (!calculatedRippleRadius) {\n            /** @type {?} */\n            const rippleWidth = this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n            calculatedRippleRadius = rippleWidth / 2;\n        }\n        this.ripple.radius = calculatedRippleRadius;\n    }\n}\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) { return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatCheckbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatCheckbox, selectors: [[\"mat-checkbox\"]], viewQuery: function MatCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(MatRipple, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-checkbox\"], hostVars: 12, hostBindings: function MatCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", labelPosition: \"labelPosition\", name: \"name\", required: \"required\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\", value: \"value\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, exportAs: [\"matCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 17, vars: 20, consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"indeterminate\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]], template: function MatCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2)(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(7, \"div\", 7);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n        ɵngcc0.ɵɵelement(10, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(11, \"div\", 11);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n        ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(16);\n        ɵngcc0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r2 = ɵngcc0.ɵɵreference(13);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"indeterminate\", ctx.indeterminate);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    } }, dependencies: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-indeterminate.mat-checkbox-disabled .mat-checkbox-inner-container{opacity:.5}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }],\n    ripple: [{ type: ViewChild, args: [MatRipple,] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n        type: Component,\n        args: [{ selector: 'mat-checkbox', template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\", exportAs: 'matCheckbox', host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-indeterminate.mat-checkbox-disabled .mat-checkbox-inner-container{opacity:.5}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_CLICK_ACTION]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], indeterminate: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = /*@__PURE__*/ function () { let ɵMatCheckboxRequiredValidator_BaseFactory; return function MatCheckboxRequiredValidator_Factory(t) { return (ɵMatCheckboxRequiredValidator_BaseFactory || (ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator)))(t || MatCheckboxRequiredValidator); }; }();\nMatCheckboxRequiredValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatCheckboxRequiredValidator, selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function MatCheckboxRequiredValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) { return new (t || MatCheckboxModule)(); };\nMatCheckboxModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatCheckboxModule });\nMatCheckboxModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n                exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n                declarations: [MatCheckbox, MatCheckboxRequiredValidator]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, { declarations: function () { return [MatCheckbox, MatCheckboxRequiredValidator]; }, imports: function () { return [CommonModule, MatRippleModule, MatCommonModule, ObserversModule]; }, exports: function () { return [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,EAAyBC,SAAzB,EAAoCC,uBAApC,EAA6DC,iBAA7D,EAAgFC,SAAhF,EAA2FC,UAA3F,EAAuGC,YAAvG,EAAqHC,UAArH,EAAiIC,MAAjI,EAAyIC,KAAzI,EAAgJC,MAAhJ,EAAwJC,QAAxJ,EAAkKC,MAAlK,EAA0KC,SAA1K,EAAqLC,iBAArL,EAAwMC,SAAxM,EAAmNC,QAAnN,QAAmO,eAAnO;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,iBAAT,EAA4BC,yBAA5B,EAAuDC,aAAvD,QAA4E,gBAA5E;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,aAAhC,EAA+CC,kBAA/C,EAAmEC,aAAnE,EAAkFC,eAAlF,EAAmGC,eAAnG,QAA0H,wBAA1H;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AAEA,MAAMC,GAAG,GAAG,CAAC,OAAD,CAAZ;;AACA,MAAMC,GAAG,GAAG,YAAY;EAAE,OAAO;IAAEC,aAAa,EAAE;EAAjB,CAAP;AAAgC,CAA1D;;AACA,MAAMC,GAAG,GAAG,CAAC,GAAD,CAAZ;AACA,MAAMC,yBAAyB,GAAG,IAAIxC,cAAJ,CAAmB,2BAAnB,CAAlC;AAEA;AACA;AACA;AACA;;AACA;;AACA,IAAIyC,YAAY,GAAG,CAAnB;AACA;;AACA,IAAIC,sBAAsB,GAAG,CAA7B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mCAAmC,GAAG;EACxCC,OAAO,EAAEzB,iBAD+B;EAExC0B,WAAW,EAAEtC,UAAU,CAAC,MAAMuC,WAAP,CAFiB;EAGxCC,KAAK,EAAE;AAHiC,CAA5C;AAKA;;AACA,IAAIC,oBAAoB,GAAG;EACvB;EACAC,IAAI,EAAE,CAFiB;;EAGvB;EACAC,OAAO,EAAE,CAJc;;EAKvB;EACAC,SAAS,EAAE,CANY;;EAOvB;EACAC,aAAa,EAAE;AARQ,CAA3B;AAUAJ,oBAAoB,CAACA,oBAAoB,CAACC,IAAtB,CAApB,GAAkD,MAAlD;AACAD,oBAAoB,CAACA,oBAAoB,CAACE,OAAtB,CAApB,GAAqD,SAArD;AACAF,oBAAoB,CAACA,oBAAoB,CAACG,SAAtB,CAApB,GAAuD,WAAvD;AACAH,oBAAoB,CAACA,oBAAoB,CAACI,aAAtB,CAApB,GAA2D,eAA3D;AACA;AACA;AACA;;AACA,MAAMC,iBAAN,CAAwB;AAExB;AACA;AACA;;;AACA,MAAMC,eAAN,CAAsB;EAClB;AACJ;AACA;EACIC,WAAW,CAACC,WAAD,EAAc;IACrB,KAAKA,WAAL,GAAmBA,WAAnB;EACH;;AANiB;AAQtB;;;AACA,MAAMC,qBAAqB,GAAG/B,aAAa,CAACH,UAAU,CAACE,kBAAkB,CAACD,aAAa,CAAC8B,eAAD,CAAd,CAAnB,EAAqD,QAArD,CAAX,CAA3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMR,WAAN,SAA0BW,qBAA1B,CAAgD;EAC5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,WAAW,CAACG,UAAD,EAAaC,kBAAb,EAAiCC,aAAjC,EAAgDC,OAAhD,EAAyDC,QAAzD,EAAmEC,YAAnE,EAAiFC,cAAjF,EAAiG;IACxG,MAAMN,UAAN;IACA,KAAKC,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKE,YAAL,GAAoBA,YAApB;IACA,KAAKC,cAAL,GAAsBA,cAAtB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,SAAL,GAAiB,EAAjB;IACA;AACR;AACA;;IACQ,KAAKC,cAAL,GAAsB,IAAtB;IACA,KAAKC,SAAL,GAAkB,gBAAe,EAAE1B,YAAa,EAAhD;IACA;AACR;AACA;;IACQ,KAAK2B,EAAL,GAAU,KAAKD,SAAf;IACA;AACR;AACA;;IACQ,KAAKE,aAAL,GAAqB,OAArB;IACA;AACR;AACA;;IACQ,KAAKC,IAAL,GAAY,IAAZ;IACA;AACR;AACA;;IACQ,KAAKC,MAAL,GAAc,IAAIjE,YAAJ,EAAd;IACA;AACR;AACA;;IACQ,KAAKkE,mBAAL,GAA2B,IAAIlE,YAAJ,EAA3B;IACA;AACR;AACA;AACA;;IACQ,KAAKmE,UAAL,GAAkB,MAAM,CAAG,CAA3B;;IACA,KAAKC,sBAAL,GAA8B,EAA9B;IACA,KAAKC,kBAAL,GAA0B3B,oBAAoB,CAACC,IAA/C;;IACA,KAAK2B,6BAAL,GAAqC,MAAM,CAAG,CAA9C;;IACA,KAAKC,QAAL,GAAgB,KAAhB;IACA,KAAKC,SAAL,GAAiB,KAAjB;IACA,KAAKC,cAAL,GAAsB,KAAtB;IACA,KAAKjB,QAAL,GAAgBkB,QAAQ,CAAClB,QAAD,CAAR,IAAsB,CAAtC;;IACA,KAAKF,aAAL,CAAmBqB,OAAnB,CAA2BvB,UAA3B,EAAuC,IAAvC,EAA6CwB,SAA7C,CAAuDC,WAAW,IAAI;MAClE,IAAI,CAACA,WAAL,EAAkB;QACd;QACA;QACA;QACA;QACA;QACAC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM,KAAKb,UAAL,EAA7B;MACH;IACJ,CATD;EAUH;EACD;AACJ;AACA;AACA;;;EACe,IAAPc,OAAO,GAAG;IAAE,OAAQ,GAAE,KAAKnB,EAAL,IAAW,KAAKD,SAAU,QAApC;EAA8C;EAC9D;AACJ;AACA;AACA;;;EACgB,IAARqB,QAAQ,GAAG;IAAE,OAAO,KAAKC,SAAZ;EAAwB;EACzC;AACJ;AACA;AACA;;;EACgB,IAARD,QAAQ,CAACE,KAAD,EAAQ;IAAE,KAAKD,SAAL,GAAiBvE,qBAAqB,CAACwE,KAAD,CAAtC;EAAgD;EACtE;AACJ;AACA;;;EACIC,kBAAkB,GAAG;IACjB,KAAKC,sBAAL;EACH;EACD;AACJ;AACA;;;EACIC,WAAW,GAAG;IACV,KAAKjC,aAAL,CAAmBkC,cAAnB,CAAkC,KAAKtC,WAAvC;EACH;EACD;AACJ;AACA;AACA;;;EACe,IAAPuC,OAAO,GAAG;IAAE,OAAO,KAAKlB,QAAZ;EAAuB;EACvC;AACJ;AACA;AACA;;;EACe,IAAPkB,OAAO,CAACL,KAAD,EAAQ;IACf,IAAIA,KAAK,IAAI,KAAKK,OAAlB,EAA2B;MACvB,KAAKlB,QAAL,GAAgBa,KAAhB;;MACA,KAAK/B,kBAAL,CAAwBqC,YAAxB;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACgB,IAARC,QAAQ,GAAG;IAAE,OAAO,KAAKnB,SAAZ;EAAwB;EACzC;AACJ;AACA;AACA;;;EACgB,IAARmB,QAAQ,CAACP,KAAD,EAAQ;IAChB,IAAIA,KAAK,IAAI,KAAKO,QAAlB,EAA4B;MACxB,KAAKnB,SAAL,GAAiBY,KAAjB;;MACA,KAAK/B,kBAAL,CAAwBqC,YAAxB;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACqB,IAAbE,aAAa,GAAG;IAAE,OAAO,KAAKnB,cAAZ;EAA6B;EACnD;AACJ;AACA;AACA;;;EACqB,IAAbmB,aAAa,CAACR,KAAD,EAAQ;IACrB;IACA,MAAMS,OAAO,GAAGT,KAAK,IAAI,KAAKX,cAA9B;IACA,KAAKA,cAAL,GAAsBW,KAAtB;;IACA,IAAIS,OAAJ,EAAa;MACT,IAAI,KAAKpB,cAAT,EAAyB;QACrB,KAAKqB,qBAAL,CAA2BpD,oBAAoB,CAACI,aAAhD;MACH,CAFD,MAGK;QACD,KAAKgD,qBAAL,CAA2B,KAAKL,OAAL,GAAe/C,oBAAoB,CAACE,OAApC,GAA8CF,oBAAoB,CAACG,SAA9F;MACH;;MACD,KAAKqB,mBAAL,CAAyB6B,IAAzB,CAA8B,KAAKtB,cAAnC;IACH;EACJ;EACD;AACJ;AACA;;;EACIuB,iBAAiB,GAAG;IAChB,OAAO,KAAKC,aAAL,IAAsB,KAAKN,QAAlC;EACH;EACD;AACJ;AACA;AACA;;;EACIO,kBAAkB,GAAG;IACjB;IACA;IACA;IACA;IACA;IACA,KAAK7C,kBAAL,CAAwB8C,aAAxB;EACH;EACD;AACJ;AACA;AACA;;;EACIC,UAAU,CAAChB,KAAD,EAAQ;IACd,KAAKK,OAAL,GAAe,CAAC,CAACL,KAAjB;EACH;EACD;AACJ;AACA;AACA;;;EACIiB,gBAAgB,CAACC,EAAD,EAAK;IACjB,KAAKhC,6BAAL,GAAqCgC,EAArC;EACH;EACD;AACJ;AACA;AACA;;;EACIC,iBAAiB,CAACD,EAAD,EAAK;IAClB,KAAKnC,UAAL,GAAkBmC,EAAlB;EACH;EACD;AACJ;AACA;AACA;;;EACIE,gBAAgB,CAACC,UAAD,EAAa;IACzB,KAAKd,QAAL,GAAgBc,UAAhB;EACH;EACD;AACJ;AACA;;;EACIC,eAAe,GAAG;IACd,OAAO,KAAKjB,OAAL,GAAe,MAAf,GAAyB,KAAKG,aAAL,GAAqB,OAArB,GAA+B,OAA/D;EACH;EACD;AACJ;AACA;AACA;;;EACIE,qBAAqB,CAACa,QAAD,EAAW;IAC5B;IACA,IAAIC,QAAQ,GAAG,KAAKvC,kBAApB;IACA;;IACA,IAAIwC,OAAO,GAAG,KAAK3D,WAAL,CAAiB4D,aAA/B;;IACA,IAAIF,QAAQ,KAAKD,QAAjB,EAA2B;MACvB;IACH;;IACD,IAAI,KAAKvC,sBAAL,CAA4B2C,MAA5B,GAAqC,CAAzC,EAA4C;MACxCF,OAAO,CAACG,SAAR,CAAkBC,MAAlB,CAAyB,KAAK7C,sBAA9B;IACH;;IACD,KAAKA,sBAAL,GAA8B,KAAK8C,yCAAL,CAA+CN,QAA/C,EAAyDD,QAAzD,CAA9B;IACA,KAAKtC,kBAAL,GAA0BsC,QAA1B;;IACA,IAAI,KAAKvC,sBAAL,CAA4B2C,MAA5B,GAAqC,CAAzC,EAA4C;MACxCF,OAAO,CAACG,SAAR,CAAkBG,GAAlB,CAAsB,KAAK/C,sBAA3B;MACA;;MACA,MAAMgD,cAAc,GAAG,KAAKhD,sBAA5B;;MACA,KAAKb,OAAL,CAAa8D,iBAAb,CAA+B,MAAM;QACjCC,UAAU,CAAC,MAAM;UACbT,OAAO,CAACG,SAAR,CAAkBC,MAAlB,CAAyBG,cAAzB;QACH,CAFS,EAEP,IAFO,CAAV;MAGH,CAJD;IAKH;EACJ;EACD;AACJ;AACA;;;EACIG,gBAAgB,GAAG;IACf;IACA,MAAMC,KAAK,GAAG,IAAIzE,iBAAJ,EAAd;IACAyE,KAAK,CAACC,MAAN,GAAe,IAAf;IACAD,KAAK,CAAC/B,OAAN,GAAgB,KAAKA,OAArB;;IACA,KAAKnB,6BAAL,CAAmC,KAAKmB,OAAxC;;IACA,KAAKxB,MAAL,CAAY8B,IAAZ,CAAiByB,KAAjB;EACH;EACD;AACJ;AACA;AACA;;;EACIE,MAAM,GAAG;IACL,KAAKjC,OAAL,GAAe,CAAC,KAAKA,OAArB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIkC,aAAa,CAACH,KAAD,EAAQ;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACAA,KAAK,CAACI,eAAN,GARiB,CASjB;;IACA,IAAI,CAAC,KAAKjC,QAAN,IAAkB,KAAKlC,YAAL,KAAsB,MAA5C,EAAoD;MAChD;MACA,IAAI,KAAKmC,aAAL,IAAsB,KAAKnC,YAAL,KAAsB,OAAhD,EAAyD;QACrDqB,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;UACzB,KAAKP,cAAL,GAAsB,KAAtB;UACA,KAAKP,mBAAL,CAAyB6B,IAAzB,CAA8B,KAAKtB,cAAnC;QACH,CAHD;MAIH;;MACD,KAAKiD,MAAL;;MACA,KAAK5B,qBAAL,CAA2B,KAAKvB,QAAL,GAAgB7B,oBAAoB,CAACE,OAArC,GAA+CF,oBAAoB,CAACG,SAA/F,EATgD,CAUhD;MACA;MACA;;;MACA,KAAK0E,gBAAL;IACH,CAdD,MAeK,IAAI,CAAC,KAAK5B,QAAN,IAAkB,KAAKlC,YAAL,KAAsB,MAA5C,EAAoD;MACrD;MACA;MACA,KAAKoE,aAAL,CAAmBf,aAAnB,CAAiCrB,OAAjC,GAA2C,KAAKA,OAAhD;MACA,KAAKoC,aAAL,CAAmBf,aAAnB,CAAiClB,aAAjC,GAAiD,KAAKA,aAAtD;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACIkC,KAAK,GAAG;IACJ,KAAKxE,aAAL,CAAmByE,QAAnB,CAA4B,KAAKF,aAAjC,EAAgD,UAAhD;EACH;EACD;AACJ;AACA;AACA;;;EACIG,mBAAmB,CAACR,KAAD,EAAQ;IACvB;IACA;IACA;IACAA,KAAK,CAACI,eAAN;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIV,yCAAyC,CAACN,QAAD,EAAWD,QAAX,EAAqB;IAC1D;IACA,IAAI,KAAKjD,cAAL,KAAwB,gBAA5B,EAA8C;MAC1C,OAAO,EAAP;IACH;IACD;;;IACA,IAAIuE,UAAU,GAAG,EAAjB;;IACA,QAAQrB,QAAR;MACI,KAAKlE,oBAAoB,CAACC,IAA1B;QACI;QACA;QACA,IAAIgE,QAAQ,KAAKjE,oBAAoB,CAACE,OAAtC,EAA+C;UAC3CqF,UAAU,GAAG,mBAAb;QACH,CAFD,MAGK,IAAItB,QAAQ,IAAIjE,oBAAoB,CAACI,aAArC,EAAoD;UACrDmF,UAAU,GAAG,yBAAb;QACH,CAFI,MAGA;UACD,OAAO,EAAP;QACH;;QACD;;MACJ,KAAKvF,oBAAoB,CAACG,SAA1B;QACIoF,UAAU,GAAGtB,QAAQ,KAAKjE,oBAAoB,CAACE,OAAlC,GACT,mBADS,GACa,yBAD1B;QAEA;;MACJ,KAAKF,oBAAoB,CAACE,OAA1B;QACIqF,UAAU,GAAGtB,QAAQ,KAAKjE,oBAAoB,CAACG,SAAlC,GACT,mBADS,GACa,uBAD1B;QAEA;;MACJ,KAAKH,oBAAoB,CAACI,aAA1B;QACImF,UAAU,GAAGtB,QAAQ,KAAKjE,oBAAoB,CAACE,OAAlC,GACT,uBADS,GACiB,yBAD9B;QAEA;IAzBR;;IA2BA,OAAQ,qBAAoBqF,UAAW,EAAvC;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACI3C,sBAAsB,GAAG;IACrB,IAAI,CAAClD,sBAAL,EAA6B;MACzB;MACA,MAAM8F,WAAW,GAAG,KAAKhF,WAAL,CAAiB4D,aAAjB,CAA+BqB,aAA/B,CAA6C,sBAA7C,EAAqEC,WAArE,IAAoF,CAAxG;MACAhG,sBAAsB,GAAG8F,WAAW,GAAG,CAAvC;IACH;;IACD,KAAKG,MAAL,CAAYC,MAAZ,GAAqBlG,sBAArB;EACH;;AA1W2C;;AA4WhDI,WAAW,CAAC+F,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;EAAE,OAAO,KAAKA,CAAC,IAAIjG,WAAV,EAAuBd,MAAM,CAACgH,iBAAP,CAAyBhH,MAAM,CAAC3B,UAAhC,CAAvB,EAAoE2B,MAAM,CAACgH,iBAAP,CAAyBhH,MAAM,CAAC7B,iBAAhC,CAApE,EAAwH6B,MAAM,CAACgH,iBAAP,CAAyB/G,MAAM,CAAChB,YAAhC,CAAxH,EAAuKe,MAAM,CAACgH,iBAAP,CAAyBhH,MAAM,CAACtB,MAAhC,CAAvK,EAAgNsB,MAAM,CAACiH,iBAAP,CAAyB,UAAzB,CAAhN,EAAsPjH,MAAM,CAACgH,iBAAP,CAAyBxG,yBAAzB,EAAoD,CAApD,CAAtP,EAA8SR,MAAM,CAACgH,iBAAP,CAAyBnH,qBAAzB,EAAgD,CAAhD,CAA9S,CAAP;AAA2W,CAAha;;AACAiB,WAAW,CAACoG,IAAZ,GAAmB,aAAclH,MAAM,CAACmH,iBAAP,CAAyB;EAAEC,IAAI,EAAEtG,WAAR;EAAqBuG,SAAS,EAAE,CAAC,CAAC,cAAD,CAAD,CAAhC;EAAoDC,SAAS,EAAE,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,GAA/B,EAAoC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACnKxH,MAAM,CAAC0H,WAAP,CAAmBtH,GAAnB,EAAwB,CAAxB;MACAJ,MAAM,CAAC0H,WAAP,CAAmBpI,SAAnB,EAA8B,CAA9B;IACH;;IAAC,IAAIkI,EAAE,GAAG,CAAT,EAAY;MACV,IAAIG,EAAJ;;MACA3H,MAAM,CAAC4H,cAAP,CAAsBD,EAAE,GAAG3H,MAAM,CAAC6H,WAAP,EAA3B,MAAqDJ,GAAG,CAACtB,aAAJ,GAAoBwB,EAAE,CAACG,KAA5E;MACA9H,MAAM,CAAC4H,cAAP,CAAsBD,EAAE,GAAG3H,MAAM,CAAC6H,WAAP,EAA3B,MAAqDJ,GAAG,CAACd,MAAJ,GAAagB,EAAE,CAACG,KAArE;IACH;EAAE,CAPmD;EAOjDC,SAAS,EAAE,CAAC,CAAD,EAAI,cAAJ,CAPsC;EAOjBC,QAAQ,EAAE,EAPO;EAOHC,YAAY,EAAE,SAASC,wBAAT,CAAkCV,EAAlC,EAAsCC,GAAtC,EAA2C;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACtHxH,MAAM,CAACmI,cAAP,CAAsB,IAAtB,EAA4BV,GAAG,CAACrF,EAAhC;MACApC,MAAM,CAACoI,WAAP,CAAmB,UAAnB,EAA+B,IAA/B;MACApI,MAAM,CAACqI,WAAP,CAAmB,4BAAnB,EAAiDZ,GAAG,CAACvD,aAArD,EAAoE,sBAApE,EAA4FuD,GAAG,CAAC1D,OAAhG,EAAyG,uBAAzG,EAAkI0D,GAAG,CAACxD,QAAtI,EAAgJ,2BAAhJ,EAA6KwD,GAAG,CAACpF,aAAJ,IAAqB,QAAlM,EAA4M,yBAA5M,EAAuOoF,GAAG,CAACzF,cAAJ,KAAuB,gBAA9P;IACH;EAAE,CAXmD;EAWjDsG,MAAM,EAAE;IAAE/D,aAAa,EAAE,eAAjB;IAAkCgE,KAAK,EAAE,OAAzC;IAAkDzG,QAAQ,EAAE,UAA5D;IAAwEG,SAAS,EAAE,CAAC,YAAD,EAAe,WAAf,CAAnF;IAAgHC,cAAc,EAAE,CAAC,iBAAD,EAAoB,gBAApB,CAAhI;IAAuKE,EAAE,EAAE,IAA3K;IAAiLC,aAAa,EAAE,eAAhM;IAAiNC,IAAI,EAAE,MAAvN;IAA+NkB,QAAQ,EAAE,UAAzO;IAAqPO,OAAO,EAAE,SAA9P;IAAyQE,QAAQ,EAAE,UAAnR;IAA+RC,aAAa,EAAE,eAA9S;IAA+TR,KAAK,EAAE;EAAtU,CAXyC;EAWwS8E,OAAO,EAAE;IAAEjG,MAAM,EAAE,QAAV;IAAoBC,mBAAmB,EAAE;EAAzC,CAXjT;EAWmXiG,QAAQ,EAAE,CAAC,aAAD,CAX7X;EAW8YC,QAAQ,EAAE,CAAC1I,MAAM,CAAC2I,kBAAP,CAA0B,CAAChI,mCAAD,CAA1B,CAAD,EAAmEX,MAAM,CAAC4I,0BAA1E,CAXxZ;EAW+fC,kBAAkB,EAAEtI,GAXnhB;EAWwhBuI,KAAK,EAAE,EAX/hB;EAWmiBC,IAAI,EAAE,EAXziB;EAW6iBC,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,qBAAJ,CAAD,EAA6B,CAAC,OAAD,EAAU,EAAV,CAA7B,EAA4C,CAAC,CAAD,EAAI,8BAAJ,CAA5C,EAAiF,CAAC,MAAD,EAAS,UAAT,EAAqB,CAArB,EAAwB,oBAAxB,EAA8C,qBAA9C,EAAqE,CAArE,EAAwE,IAAxE,EAA8E,UAA9E,EAA0F,SAA1F,EAAqG,UAArG,EAAiH,UAAjH,EAA6H,eAA7H,EAA8I,QAA9I,EAAwJ,OAAxJ,CAAjF,EAAmP,CAAC,OAAD,EAAU,EAAV,CAAnP,EAAkQ,CAAC,WAAD,EAAc,EAAd,EAAkB,CAAlB,EAAqB,qBAArB,EAA4C,CAA5C,EAA+C,kBAA/C,EAAmE,mBAAnE,EAAwF,iBAAxF,EAA2G,mBAA3G,EAAgI,oBAAhI,CAAlQ,EAAyZ,CAAC,CAAD,EAAI,oBAAJ,EAA0B,gCAA1B,CAAzZ,EAAsd,CAAC,CAAD,EAAI,oBAAJ,CAAtd,EAAif,CAAC,CAAD,EAAI,yBAAJ,CAAjf,EAAihB,CAAC,SAAD,EAAY,KAAZ,EAAmB,WAAnB,EAAgC,OAAhC,EAAyC,SAAzC,EAAoD,WAApD,EAAiE,CAAjE,EAAoE,KAApE,EAA2E,OAA3E,EAAoF,UAApF,EAAgG,CAAhG,EAAmG,wBAAnG,CAAjhB,EAA+oB,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,EAA2B,OAA3B,EAAoC,GAApC,EAAyC,2BAAzC,EAAsE,CAAtE,EAAyE,6BAAzE,CAA/oB,EAAwvB,CAAC,CAAD,EAAI,wBAAJ,CAAxvB,EAAuxB,CAAC,CAAD,EAAI,oBAAJ,EAA0B,CAA1B,EAA6B,mBAA7B,CAAvxB,EAA00B,CAAC,eAAD,EAAkB,EAAlB,CAA10B,EAAi2B,CAAC,CAAD,EAAI,SAAJ,EAAe,MAAf,CAAj2B,CAXrjB;EAW+6CC,QAAQ,EAAE,SAASC,oBAAT,CAA8B1B,EAA9B,EAAkCC,GAAlC,EAAuC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MAChiDxH,MAAM,CAACmJ,eAAP;MACAnJ,MAAM,CAACoJ,cAAP,CAAsB,CAAtB,EAAyB,OAAzB,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,KAA3C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,OAAxD,EAAiE,CAAjE,EAAoE,CAApE;MACApJ,MAAM,CAACqJ,UAAP,CAAkB,QAAlB,EAA4B,SAASC,4CAAT,CAAsDC,MAAtD,EAA8D;QAAE,OAAO9B,GAAG,CAACnB,mBAAJ,CAAwBiD,MAAxB,CAAP;MAAyC,CAArI,EAAuI,OAAvI,EAAgJ,SAASC,2CAAT,CAAqDD,MAArD,EAA6D;QAAE,OAAO9B,GAAG,CAACxB,aAAJ,CAAkBsD,MAAlB,CAAP;MAAmC,CAAlP;MACAvJ,MAAM,CAACyJ,YAAP;MACAzJ,MAAM,CAACoJ,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;MACApJ,MAAM,CAAC0J,SAAP,CAAiB,CAAjB,EAAoB,KAApB,EAA2B,CAA3B;MACA1J,MAAM,CAACyJ,YAAP;MACAzJ,MAAM,CAAC0J,SAAP,CAAiB,CAAjB,EAAoB,KAApB,EAA2B,CAA3B;MACA1J,MAAM,CAACoJ,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;MACApJ,MAAM,CAAC2J,cAAP;MACA3J,MAAM,CAACoJ,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;MACApJ,MAAM,CAAC0J,SAAP,CAAiB,EAAjB,EAAqB,MAArB,EAA6B,EAA7B;MACA1J,MAAM,CAACyJ,YAAP;MACAzJ,MAAM,CAAC4J,eAAP;MACA5J,MAAM,CAAC0J,SAAP,CAAiB,EAAjB,EAAqB,KAArB,EAA4B,EAA5B;MACA1J,MAAM,CAACyJ,YAAP;MACAzJ,MAAM,CAACoJ,cAAP,CAAsB,EAAtB,EAA0B,MAA1B,EAAkC,EAAlC,EAAsC,EAAtC;MACApJ,MAAM,CAACqJ,UAAP,CAAkB,mBAAlB,EAAuC,SAASQ,uDAAT,GAAmE;QAAE,OAAOpC,GAAG,CAACjD,kBAAJ,EAAP;MAAkC,CAA9I;MACAxE,MAAM,CAACoJ,cAAP,CAAsB,EAAtB,EAA0B,MAA1B,EAAkC,EAAlC;MACApJ,MAAM,CAAC8J,MAAP,CAAc,EAAd,EAAkB,QAAlB;MACA9J,MAAM,CAACyJ,YAAP;MACAzJ,MAAM,CAAC+J,YAAP,CAAoB,EAApB;MACA/J,MAAM,CAACyJ,YAAP;IACH;;IAAC,IAAIjC,EAAE,GAAG,CAAT,EAAY;MACV,MAAMwC,GAAG,GAAGhK,MAAM,CAACiK,WAAP,CAAmB,CAAnB,CAAZ;;MACA,MAAMC,GAAG,GAAGlK,MAAM,CAACiK,WAAP,CAAmB,EAAnB,CAAZ;;MACAjK,MAAM,CAACoI,WAAP,CAAmB,KAAnB,EAA0BX,GAAG,CAAClE,OAA9B;MACAvD,MAAM,CAACmK,SAAP,CAAiB,CAAjB;MACAnK,MAAM,CAACqI,WAAP,CAAmB,6CAAnB,EAAkE,CAAC6B,GAAG,CAACE,WAAL,IAAoB,CAACF,GAAG,CAACE,WAAJ,CAAgBC,IAAhB,EAAvF;MACArK,MAAM,CAACmK,SAAP,CAAiB,CAAjB;MACAnK,MAAM,CAACsK,UAAP,CAAkB,IAAlB,EAAwB7C,GAAG,CAAClE,OAA5B,EAAqC,UAArC,EAAiDkE,GAAG,CAACjE,QAArD,EAA+D,SAA/D,EAA0EiE,GAAG,CAAC1D,OAA9E,EAAuF,UAAvF,EAAmG0D,GAAG,CAACxD,QAAvG,EAAiH,UAAjH,EAA6HwD,GAAG,CAAC3F,QAAjI,EAA2I,eAA3I,EAA4J2F,GAAG,CAACvD,aAAhK;MACAlE,MAAM,CAACoI,WAAP,CAAmB,OAAnB,EAA4BX,GAAG,CAAC/D,KAAhC,EAAuC,MAAvC,EAA+C+D,GAAG,CAACnF,IAAnD,EAAyD,YAAzD,EAAuEmF,GAAG,CAACxF,SAAJ,IAAiB,IAAxF,EAA8F,iBAA9F,EAAiHwF,GAAG,CAACvF,cAArH,EAAqI,cAArI,EAAqJuF,GAAG,CAACzC,eAAJ,EAArJ;MACAhF,MAAM,CAACmK,SAAP,CAAiB,CAAjB;MACAnK,MAAM,CAACsK,UAAP,CAAkB,kBAAlB,EAAsCN,GAAtC,EAA2C,mBAA3C,EAAgEvC,GAAG,CAACnD,iBAAJ,EAAhE,EAAyF,iBAAzF,EAA4G,EAA5G,EAAgH,mBAAhH,EAAqI,IAArI,EAA2I,oBAA3I,EAAiKtE,MAAM,CAACuK,eAAP,CAAuB,EAAvB,EAA2BlK,GAA3B,CAAjK;IACH;EAAE,CA9CmD;EA8CjDmK,YAAY,EAAE,CAACtK,MAAM,CAACZ,SAAR,EAAmBa,MAAM,CAACsK,iBAA1B,CA9CmC;EA8CWC,MAAM,EAAE,CAAC,wsMAAD,CA9CnB;EA8C+tMC,aAAa,EAAE,CA9C9uM;EA8CivMC,eAAe,EAAE;AA9ClwM,CAAzB,CAAjC;AA+CA;;AACA9J,WAAW,CAAC+J,cAAZ,GAA6B,MAAM,CAC/B;EAAEzD,IAAI,EAAE/I;AAAR,CAD+B,EAE/B;EAAE+I,IAAI,EAAEjJ;AAAR,CAF+B,EAG/B;EAAEiJ,IAAI,EAAEnI;AAAR,CAH+B,EAI/B;EAAEmI,IAAI,EAAE1I;AAAR,CAJ+B,EAK/B;EAAE0I,IAAI,EAAE0D,MAAR;EAAgBC,UAAU,EAAE,CAAC;IAAE3D,IAAI,EAAEnJ,SAAR;IAAmB+M,IAAI,EAAE,CAAC,UAAD;EAAzB,CAAD;AAA5B,CAL+B,EAM/B;EAAE5D,IAAI,EAAE6D,SAAR;EAAmBF,UAAU,EAAE,CAAC;IAAE3D,IAAI,EAAEzI;EAAR,CAAD,EAAqB;IAAEyI,IAAI,EAAE5I,MAAR;IAAgBwM,IAAI,EAAE,CAACxK,yBAAD;EAAtB,CAArB;AAA/B,CAN+B,EAO/B;EAAE4G,IAAI,EAAE0D,MAAR;EAAgBC,UAAU,EAAE,CAAC;IAAE3D,IAAI,EAAEzI;EAAR,CAAD,EAAqB;IAAEyI,IAAI,EAAE5I,MAAR;IAAgBwM,IAAI,EAAE,CAACnL,qBAAD;EAAtB,CAArB;AAA5B,CAP+B,CAAnC;;AASAiB,WAAW,CAACoK,cAAZ,GAA6B;EACzBjJ,SAAS,EAAE,CAAC;IAAEmF,IAAI,EAAE3I,KAAR;IAAeuM,IAAI,EAAE,CAAC,YAAD;EAArB,CAAD,CADc;EAEzB9I,cAAc,EAAE,CAAC;IAAEkF,IAAI,EAAE3I,KAAR;IAAeuM,IAAI,EAAE,CAAC,iBAAD;EAArB,CAAD,CAFS;EAGzB5I,EAAE,EAAE,CAAC;IAAEgF,IAAI,EAAE3I;EAAR,CAAD,CAHqB;EAIzB+E,QAAQ,EAAE,CAAC;IAAE4D,IAAI,EAAE3I;EAAR,CAAD,CAJe;EAKzB4D,aAAa,EAAE,CAAC;IAAE+E,IAAI,EAAE3I;EAAR,CAAD,CALU;EAMzB6D,IAAI,EAAE,CAAC;IAAE8E,IAAI,EAAE3I;EAAR,CAAD,CANmB;EAOzB8D,MAAM,EAAE,CAAC;IAAE6E,IAAI,EAAExI;EAAR,CAAD,CAPiB;EAQzB4D,mBAAmB,EAAE,CAAC;IAAE4E,IAAI,EAAExI;EAAR,CAAD,CARI;EASzB8E,KAAK,EAAE,CAAC;IAAE0D,IAAI,EAAE3I;EAAR,CAAD,CATkB;EAUzB0H,aAAa,EAAE,CAAC;IAAEiB,IAAI,EAAEvI,SAAR;IAAmBmM,IAAI,EAAE,CAAC,OAAD;EAAzB,CAAD,CAVU;EAWzBrE,MAAM,EAAE,CAAC;IAAES,IAAI,EAAEvI,SAAR;IAAmBmM,IAAI,EAAE,CAAC1L,SAAD;EAAzB,CAAD,CAXiB;EAYzByE,OAAO,EAAE,CAAC;IAAEqD,IAAI,EAAE3I;EAAR,CAAD,CAZgB;EAazBwF,QAAQ,EAAE,CAAC;IAAEmD,IAAI,EAAE3I;EAAR,CAAD,CAbe;EAczByF,aAAa,EAAE,CAAC;IAAEkD,IAAI,EAAE3I;EAAR,CAAD;AAdU,CAA7B;;AAgBA,CAAC,YAAY;EAAE,CAAC,OAAO0M,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDnL,MAAM,CAACoL,iBAAP,CAAyBtK,WAAzB,EAAsC,CAAC;IACjGsG,IAAI,EAAEhJ,SAD2F;IAEjG4M,IAAI,EAAE,CAAC;MAAEK,QAAQ,EAAE,cAAZ;MAA4BpC,QAAQ,EAAE,sgDAAtC;MAA8iDR,QAAQ,EAAE,aAAxjD;MAAukD6C,IAAI,EAAE;QACxkD,SAAS,cAD+jD;QAExkD,QAAQ,IAFgkD;QAGxkD,mBAAmB,MAHqjD;QAIxkD,sCAAsC,eAJkiD;QAKxkD,gCAAgC,SALwiD;QAMxkD,iCAAiC,UANuiD;QAOxkD,qCAAqC,2BAPmiD;QAQxkD,mCAAoC;MARoiD,CAA7kD;MASIC,SAAS,EAAE,CAAC5K,mCAAD,CATf;MASsD2H,MAAM,EAAE,CAAC,eAAD,EAAkB,OAAlB,EAA2B,UAA3B,CAT9D;MASsGqC,aAAa,EAAE7L,iBAAiB,CAAC0M,IATvI;MAS6IZ,eAAe,EAAE1M,uBAAuB,CAACuN,MATtL;MAS8Lf,MAAM,EAAE,CAAC,wsMAAD;IATtM,CAAD;EAF2F,CAAD,CAAtC,EAY1D,YAAY;IAAE,OAAO,CAAC;MAAEtD,IAAI,EAAEpH,MAAM,CAAC3B;IAAf,CAAD,EAA8B;MAAE+I,IAAI,EAAEpH,MAAM,CAAC7B;IAAf,CAA9B,EAAkE;MAAEiJ,IAAI,EAAEnH,MAAM,CAAChB;IAAf,CAAlE,EAAiG;MAAEmI,IAAI,EAAEpH,MAAM,CAACtB;IAAf,CAAjG,EAA0H;MAAE0I,IAAI,EAAE0D,MAAR;MAAgBC,UAAU,EAAE,CAAC;QACpK3D,IAAI,EAAEnJ,SAD8J;QAEpK+M,IAAI,EAAE,CAAC,UAAD;MAF8J,CAAD;IAA5B,CAA1H,EAGX;MAAE5D,IAAI,EAAE6D,SAAR;MAAmBF,UAAU,EAAE,CAAC;QAClC3D,IAAI,EAAEzI;MAD4B,CAAD,EAElC;QACCyI,IAAI,EAAE5I,MADP;QAECwM,IAAI,EAAE,CAACxK,yBAAD;MAFP,CAFkC;IAA/B,CAHW,EAQX;MAAE4G,IAAI,EAAE0D,MAAR;MAAgBC,UAAU,EAAE,CAAC;QAC/B3D,IAAI,EAAEzI;MADyB,CAAD,EAE/B;QACCyI,IAAI,EAAE5I,MADP;QAECwM,IAAI,EAAE,CAACnL,qBAAD;MAFP,CAF+B;IAA5B,CARW,CAAP;EAaF,CAzB8C,EAyB5C;IAAEoC,SAAS,EAAE,CAAC;MACxBmF,IAAI,EAAE3I,KADkB;MAExBuM,IAAI,EAAE,CAAC,YAAD;IAFkB,CAAD,CAAb;IAGV9I,cAAc,EAAE,CAAC;MACjBkF,IAAI,EAAE3I,KADW;MAEjBuM,IAAI,EAAE,CAAC,iBAAD;IAFW,CAAD,CAHN;IAMV5I,EAAE,EAAE,CAAC;MACLgF,IAAI,EAAE3I;IADD,CAAD,CANM;IAQV4D,aAAa,EAAE,CAAC;MAChB+E,IAAI,EAAE3I;IADU,CAAD,CARL;IAUV6D,IAAI,EAAE,CAAC;MACP8E,IAAI,EAAE3I;IADC,CAAD,CAVI;IAYV8D,MAAM,EAAE,CAAC;MACT6E,IAAI,EAAExI;IADG,CAAD,CAZE;IAcV4D,mBAAmB,EAAE,CAAC;MACtB4E,IAAI,EAAExI;IADgB,CAAD,CAdX;IAgBV4E,QAAQ,EAAE,CAAC;MACX4D,IAAI,EAAE3I;IADK,CAAD,CAhBA;IAkBVsF,OAAO,EAAE,CAAC;MACVqD,IAAI,EAAE3I;IADI,CAAD,CAlBC;IAoBVwF,QAAQ,EAAE,CAAC;MACXmD,IAAI,EAAE3I;IADK,CAAD,CApBA;IAsBVyF,aAAa,EAAE,CAAC;MAChBkD,IAAI,EAAE3I;IADU,CAAD,CAtBL;IAwBViF,KAAK,EAAE,CAAC;MACR0D,IAAI,EAAE3I;IADE,CAAD,CAxBG;IA0BV0H,aAAa,EAAE,CAAC;MAChBiB,IAAI,EAAEvI,SADU;MAEhBmM,IAAI,EAAE,CAAC,OAAD;IAFU,CAAD,CA1BL;IA6BVrE,MAAM,EAAE,CAAC;MACTS,IAAI,EAAEvI,SADG;MAETmM,IAAI,EAAE,CAAC1L,SAAD;IAFG,CAAD;EA7BE,CAzB4C,CAAnD;AAyDC,CAzDhB;AA2DA;AACA;AACA;AACA;;AACA;;;AACA,MAAMoM,+BAA+B,GAAG;EACpC9K,OAAO,EAAEvB,aAD2B;EAEpCwB,WAAW,EAAEtC,UAAU,CAAC,MAAMoN,4BAAP,CAFa;EAGpC5K,KAAK,EAAE;AAH6B,CAAxC;AAKA;AACA;AACA;AACA;AACA;;AACA,MAAM4K,4BAAN,SAA2CvM,yBAA3C,CAAqE;;AAErEuM,4BAA4B,CAAC9E,IAA7B,GAAoC,aAAc,YAAY;EAAE,IAAI+E,yCAAJ;EAA+C,OAAO,SAASC,oCAAT,CAA8C9E,CAA9C,EAAiD;IAAE,OAAO,CAAC6E,yCAAyC,KAAKA,yCAAyC,GAAG5L,MAAM,CAAC8L,qBAAP,CAA6BH,4BAA7B,CAAjD,CAA1C,EAAwJ5E,CAAC,IAAI4E,4BAA7J,CAAP;EAAoM,CAA9P;AAAiQ,CAA9T,EAAlD;;AACAA,4BAA4B,CAACI,IAA7B,GAAoC,aAAc/L,MAAM,CAACgM,iBAAP,CAAyB;EAAE5E,IAAI,EAAEuE,4BAAR;EAAsCtE,SAAS,EAAE,CAAC,CAAC,cAAD,EAAiB,UAAjB,EAA6B,EAA7B,EAAiC,iBAAjC,EAAoD,EAApD,CAAD,EAA0D,CAAC,cAAD,EAAiB,UAAjB,EAA6B,EAA7B,EAAiC,aAAjC,EAAgD,EAAhD,CAA1D,EAA+G,CAAC,cAAD,EAAiB,UAAjB,EAA6B,EAA7B,EAAiC,SAAjC,EAA4C,EAA5C,CAA/G,CAAjD;EAAkNW,QAAQ,EAAE,CAA5N;EAA+NC,YAAY,EAAE,SAASgE,yCAAT,CAAmDzE,EAAnD,EAAuDC,GAAvD,EAA4D;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MAC1XxH,MAAM,CAACoI,WAAP,CAAmB,UAAnB,EAA+BX,GAAG,CAACjE,QAAJ,GAAe,EAAf,GAAoB,IAAnD;IACH;EAAE,CAFoE;EAElEkF,QAAQ,EAAE,CAAC1I,MAAM,CAAC2I,kBAAP,CAA0B,CAAC+C,+BAAD,CAA1B,CAAD,EAA+D1L,MAAM,CAAC4I,0BAAtE;AAFwD,CAAzB,CAAlD;;AAGA,CAAC,YAAY;EAAE,CAAC,OAAOuC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDnL,MAAM,CAACoL,iBAAP,CAAyBO,4BAAzB,EAAuD,CAAC;IAClHvE,IAAI,EAAErI,SAD4G;IAElHiM,IAAI,EAAE,CAAC;MACCK,QAAQ,EAAG;AAC3B,kFAFe;MAGCE,SAAS,EAAE,CAACG,+BAAD,CAHZ;MAICJ,IAAI,EAAE;QAAE,mBAAmB;MAArB;IAJP,CAAD;EAF4G,CAAD,CAAvD,EAQ1D,IAR0D,EAQpD,IARoD,CAAnD;AAQO,CARtB;AAUA;AACA;AACA;AACA;;;AACA,MAAMY,iBAAN,CAAwB;;AAExBA,iBAAiB,CAACrF,IAAlB,GAAyB,SAASsF,yBAAT,CAAmCpF,CAAnC,EAAsC;EAAE,OAAO,KAAKA,CAAC,IAAImF,iBAAV,GAAP;AAAwC,CAAzG;;AACAA,iBAAiB,CAACE,IAAlB,GAAyB,aAAcpM,MAAM,CAACqM,gBAAP,CAAwB;EAAEjF,IAAI,EAAE8E;AAAR,CAAxB,CAAvC;AACAA,iBAAiB,CAACI,IAAlB,GAAyB,aAActM,MAAM,CAACuM,gBAAP,CAAwB;EAAEC,OAAO,EAAE,CAACzM,YAAD,EAAeH,eAAf,EAAgCD,eAAhC,EAAiDG,eAAjD,EAAkEH,eAAlE;AAAX,CAAxB,CAAvC;;AACA,CAAC,YAAY;EAAE,CAAC,OAAOwL,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDnL,MAAM,CAACoL,iBAAP,CAAyBc,iBAAzB,EAA4C,CAAC;IACvG9E,IAAI,EAAEpI,QADiG;IAEvGgM,IAAI,EAAE,CAAC;MACCwB,OAAO,EAAE,CAACzM,YAAD,EAAeH,eAAf,EAAgCD,eAAhC,EAAiDG,eAAjD,CADV;MAEC2M,OAAO,EAAE,CAAC3L,WAAD,EAAc6K,4BAAd,EAA4ChM,eAA5C,CAFV;MAGC+M,YAAY,EAAE,CAAC5L,WAAD,EAAc6K,4BAAd;IAHf,CAAD;EAFiG,CAAD,CAA5C,EAO1D,IAP0D,EAOpD,IAPoD,CAAnD;AAOO,CAPtB;;AAQA,CAAC,YAAY;EAAE,CAAC,OAAOgB,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD3M,MAAM,CAAC4M,kBAAP,CAA0BV,iBAA1B,EAA6C;IAAEQ,YAAY,EAAE,YAAY;MAAE,OAAO,CAAC5L,WAAD,EAAc6K,4BAAd,CAAP;IAAqD,CAAnF;IAAqFa,OAAO,EAAE,YAAY;MAAE,OAAO,CAACzM,YAAD,EAAeH,eAAf,EAAgCD,eAAhC,EAAiDG,eAAjD,CAAP;IAA2E,CAAvL;IAAyL2M,OAAO,EAAE,YAAY;MAAE,OAAO,CAAC3L,WAAD,EAAc6K,4BAAd,EAA4ChM,eAA5C,CAAP;IAAsE;EAAtR,CAA7C,CAAnD;AAA4X,CAA3Y;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA,SAASgB,mCAAT,EAA8CK,oBAA9C,EAAoEK,iBAApE,EAAuFC,eAAvF,EAAwGG,qBAAxG,EAA+HX,WAA/H,EAA4IN,yBAA5I,EAAuK0L,iBAAvK,EAA0LR,+BAA1L,EAA2NC,4BAA3N"},"metadata":{},"sourceType":"module"}