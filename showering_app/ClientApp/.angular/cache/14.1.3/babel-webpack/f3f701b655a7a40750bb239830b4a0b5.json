{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/core';\nimport * as ɵngcc5 from '@angular/cdk/observers';\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\n\nconst _c3 = function () {\n  return {\n    enterDuration: 150\n  };\n};\n\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: () => ({\n    disableToggleValue: false,\n    disableDragValue: false\n  })\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nlet nextUniqueId = 0;\n/** *\n * \\@docs-private\n  @type {?} */\n\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\n\nclass MatSlideToggleChange {\n  /**\n   * @param {?} source\n   * @param {?} checked\n   */\n  constructor(source, checked) {\n    this.source = source;\n    this.checked = checked;\n  }\n\n}\n/**\n * \\@docs-private\n */\n\n\nclass MatSlideToggleBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n/** @type {?} */\n\n\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\n\n\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _platform\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?} tabIndex\n   * @param {?} _ngZone\n   * @param {?} defaults\n   * @param {?=} _animationMode\n   * @param {?=} _dir\n   */\n  constructor(elementRef,\n  /**\n  * @deprecated The `_platform` parameter to be removed.\n  * @breaking-change 8.0.0\n  */\n  _platform, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n    super(elementRef);\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this.defaults = defaults;\n    this._animationMode = _animationMode;\n    this._dir = _dir;\n\n    this.onChange = _ => {};\n\n    this.onTouched = () => {};\n\n    this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n    this._required = false;\n    this._checked = false;\n    /**\n     * Whether the thumb is currently being dragged.\n     */\n\n    this._dragging = false;\n    /**\n     * Name value will be applied to the input element if present.\n     */\n\n    this.name = null;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     */\n\n    this.id = this._uniqueId;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     */\n\n    this.labelPosition = 'after';\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     */\n\n    this.ariaLabel = null;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     */\n\n    this.ariaLabelledby = null;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     */\n\n    this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed. The event does not fire when the user drags to change\n     * the slide toggle value.\n     */\n\n    this.toggleChange = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     */\n\n    this.dragChange = new EventEmitter();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n  /**\n   * Whether the slide-toggle is required.\n   * @return {?}\n   */\n\n\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the slide-toggle element is checked or not.\n   * @return {?}\n   */\n\n\n  get checked() {\n    return this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Returns the unique id for the visual hidden input.\n   * @return {?}\n   */\n\n\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state\n        // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n        // error. See https://github.com/angular/angular/issues/17793. To work around this,\n        // we defer telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this.onTouched());\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Method being called whenever the underlying input emits a change event.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _onChangeEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    } // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n\n\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    } // Sync the value from the underlying input element with the component instance.\n\n\n    this.checked = this._inputElement.nativeElement.checked; // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n\n    this._emitChangeEvent();\n  }\n  /**\n   * Method being called whenever the slide-toggle has been clicked.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Implemented as a part of ControlValueAccessor.\n   * @param {?} isDisabled\n   * @return {?}\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Focuses the slide-toggle.\n   * @return {?}\n   */\n\n\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n  /**\n   * Toggles the checked state of the slide-toggle.\n   * @return {?}\n   */\n\n\n  toggle() {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   * @return {?}\n   */\n\n\n  _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n  /**\n   * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n   * @param {?} distance\n   * @return {?}\n   */\n\n\n  _getDragPercentage(distance) {\n    /** @type {?} */\n    let percentage = distance / this._thumbBarWidth * 100; // When the toggle was initially checked, then we have to start the drag at the end.\n\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      /** @type {?} */\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _onDrag(event) {\n    if (this._dragging) {\n      /** @type {?} */\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      /** @type {?} */\n\n      const dragX = this._dragPercentage / 100 * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _onDragEnd() {\n    if (this._dragging) {\n      /** @type {?} */\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n\n          this._emitChangeEvent();\n        }\n      } // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n\n\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n\n          this._thumbEl.nativeElement.classList.remove('mat-dragging'); // Reset the transform because the component will take care\n          // of the thumb position after drag.\n\n\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n  /**\n   * Method being called whenever the label text changes.\n   * @return {?}\n   */\n\n\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n}\n\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nMatSlideToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(_c2, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 10,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\",\n    dragChange: \"dragChange\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 14,\n  vars: 16,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\", 3, \"slidestart\", \"slide\", \"slideend\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n      ɵngcc0.ɵɵlistener(\"slidestart\", function MatSlideToggle_Template_div_slidestart_6_listener() {\n        return ctx._onDragStart();\n      })(\"slide\", function MatSlideToggle_Template_div_slide_6_listener($event) {\n        return ctx._onDrag($event);\n      })(\"slideend\", function MatSlideToggle_Template_div_slideend_6_listener() {\n        return ctx._onDragEnd();\n      });\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n      ɵngcc0.ɵɵelement(10, \"div\", 10);\n      ɵngcc0.ɵɵelementEnd()()();\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵprojection(13);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n\n      const _r4 = ɵngcc0.ɵɵreference(12);\n\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(15, _c3));\n    }\n  },\n  dependencies: [ɵngcc4.MatRipple, ɵngcc5.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle.cdk-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSlideToggle.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: FocusMonitor\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer']\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar']\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  dragChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        '[attr.tabindex]': 'null',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      template: \"<label class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><ng-content></ng-content></span></label>\",\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle.cdk-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc2.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }],\n    dragChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    _thumbEl: [{\n      type: ViewChild,\n      args: ['thumbContainer']\n    }],\n    _thumbBarEl: [{\n      type: ViewChild,\n      args: ['toggleBar']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatSlideToggleModule {}\n\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) {\n  return new (t || MatSlideToggleModule)();\n};\n\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [{\n    provide: HAMMER_GESTURE_CONFIG,\n    useClass: GestureConfig\n  }],\n  imports: [MatRippleModule, MatCommonModule, ObserversModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle],\n      providers: [{\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: GestureConfig\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, {\n    declarations: function () {\n      return [MatSlideToggle];\n    },\n    imports: function () {\n      return [MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function () {\n      return [MatSlideToggle, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggleBase, _MatSlideToggleMixinBase, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS };","map":{"version":3,"names":["InjectionToken","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","EventEmitter","forwardRef","Input","Output","ViewChild","ViewEncapsulation","NgZone","Optional","Inject","NgModule","FocusMonitor","Directionality","coerceBooleanProperty","Platform","NG_VALUE_ACCESSOR","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","GestureConfig","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","ObserversModule","HAMMER_GESTURE_CONFIG","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_platform","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_inputElement","nativeElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","focus","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","Math","max","min","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","classList","add","_onDrag","direction","_dragPercentage","deltaX","dragX","style","transform","_onDragEnd","newCheckedValue","runOutsideAngular","setTimeout","remove","_onLabelTextChange","detectChanges","ɵfac","MatSlideToggle_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatSlideToggle_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatSlideToggle_HostBindings","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","disableRipple","color","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatSlideToggle_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatSlideToggle_Template_input_change_4_listener","$event","MatSlideToggle_Template_input_click_4_listener","ɵɵelementEnd","MatSlideToggle_Template_div_slidestart_6_listener","MatSlideToggle_Template_div_slide_6_listener","MatSlideToggle_Template_div_slideend_6_listener","ɵɵelement","MatSlideToggle_Template_span_cdkObserveContent_11_listener","ɵɵprojection","_r0","ɵɵreference","_r4","ɵɵadvance","textContent","trim","ɵɵproperty","ɵɵpureFunction0","dependencies","MatRipple","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MatSlideToggleModule","MatSlideToggleModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useClass","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/slide-toggle.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/core';\nimport * as ɵngcc5 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false, disableDragValue: false })\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, /**\n                   * @deprecated The `_platform` parameter to be removed.\n                   * @breaking-change 8.0.0\n                   */\n    _platform, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._dir = _dir;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Whether the thumb is currently being dragged.\n         */\n        this._dragging = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed. The event does not fire when the user drags to change\n         * the slide toggle value.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this.onTouched());\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        if (!this._dragging) {\n            this.toggleChange.emit();\n        }\n        // Releasing the pointer over the `<label>` element while dragging triggers another\n        // click event on the `<label>` element. This means that the checked state of the underlying\n        // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n        // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n        // does not change, and the checked state of the underlying input needs to be changed back.\n        if (this._dragging || this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this.onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this.onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @param {?} distance\n     * @return {?}\n     */\n    _getDragPercentage(distance) {\n        /** @type {?} */\n        let percentage = (distance / this._thumbBarWidth) * 100;\n        // When the toggle was initially checked, then we have to start the drag at the end.\n        if (this._previousChecked) {\n            percentage += 100;\n        }\n        return Math.max(0, Math.min(percentage, 100));\n    }\n    /**\n     * @return {?}\n     */\n    _onDragStart() {\n        if (!this.disabled && !this._dragging) {\n            /** @type {?} */\n            const thumbEl = this._thumbEl.nativeElement;\n            this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n            thumbEl.classList.add('mat-dragging');\n            this._previousChecked = this.checked;\n            this._dragging = true;\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onDrag(event) {\n        if (this._dragging) {\n            /** @type {?} */\n            const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n            this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n            /** @type {?} */\n            const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n            this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onDragEnd() {\n        if (this._dragging) {\n            /** @type {?} */\n            const newCheckedValue = this._dragPercentage > 50;\n            if (newCheckedValue !== this.checked) {\n                this.dragChange.emit();\n                if (!this.defaults.disableDragValue) {\n                    this.checked = newCheckedValue;\n                    this._emitChangeEvent();\n                }\n            }\n            // The drag should be stopped outside of the current event handler, otherwise the\n            // click event will be fired before it and will revert the drag change.\n            this._ngZone.runOutsideAngular(() => setTimeout(() => {\n                if (this._dragging) {\n                    this._dragging = false;\n                    this._thumbEl.nativeElement.classList.remove('mat-dragging');\n                    // Reset the transform because the component will take care\n                    // of the thumb position after drag.\n                    this._thumbEl.nativeElement.style.transform = '';\n                }\n            }));\n        }\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and it's children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nMatSlideToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 10, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 14, vars: 16, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\", 3, \"slidestart\", \"slide\", \"slideend\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵlistener(\"slidestart\", function MatSlideToggle_Template_div_slidestart_6_listener() { return ctx._onDragStart(); })(\"slide\", function MatSlideToggle_Template_div_slide_6_listener($event) { return ctx._onDrag($event); })(\"slideend\", function MatSlideToggle_Template_div_slideend_6_listener() { return ctx._onDragEnd(); });\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd()()();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵprojection(13);\n        ɵngcc0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(15, _c3));\n    } }, dependencies: [ɵngcc4.MatRipple, ɵngcc5.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle.cdk-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-slide-toggle', exportAs: 'matSlideToggle', host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                }, template: \"<label class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><ng-content></ng-content></span></label>\", providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle.cdk-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n    ], imports: [MatRippleModule, MatCommonModule, ObserversModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule, ObserversModule],\n                exports: [MatSlideToggle, MatCommonModule],\n                declarations: [MatSlideToggle],\n                providers: [\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [MatRippleModule, MatCommonModule, ObserversModule]; }, exports: function () { return [MatSlideToggle, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggleBase, _MatSlideToggleMixinBase, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}