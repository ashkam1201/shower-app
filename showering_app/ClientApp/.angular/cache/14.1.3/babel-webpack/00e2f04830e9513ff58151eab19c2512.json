{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nclass MatDialogConfig {\n  constructor() {\n    /**\n     * The ARIA role of the dialog element.\n     */\n    this.role = 'dialog';\n    /**\n     * Custom class for the overlay pane.\n     */\n\n    this.panelClass = '';\n    /**\n     * Whether the dialog has a backdrop.\n     */\n\n    this.hasBackdrop = true;\n    /**\n     * Custom class for the backdrop,\n     */\n\n    this.backdropClass = '';\n    /**\n     * Whether the user can use escape or clicking on the backdrop to close the modal.\n     */\n\n    this.disableClose = false;\n    /**\n     * Width of the dialog.\n     */\n\n    this.width = '';\n    /**\n     * Height of the dialog.\n     */\n\n    this.height = '';\n    /**\n     * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw\n     */\n\n    this.maxWidth = '80vw';\n    /**\n     * Data being injected into the child component.\n     */\n\n    this.data = null;\n    /**\n     * ID of the element that describes the dialog.\n     */\n\n    this.ariaDescribedBy = null;\n    /**\n     * Aria label to assign to the dialog element\n     */\n\n    this.ariaLabel = null;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     */\n\n    this.autoFocus = true;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n\n    this.restoreFocus = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.closeOnNavigation = true;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst animationBody = [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n// specifying the transform explicitly, causes IE both to blur the dialog content and\n// decimate the animation performance. Leaving it as `none` solves both issues.\nstate('void, exit', style({\n  opacity: 0,\n  transform: 'scale(0.7)'\n})), state('enter', style({\n  transform: 'none'\n})), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n  transform: 'none',\n  opacity: 1\n}))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n  opacity: 0\n})))];\n/** *\n * Animations used by MatDialog.\n * \\@docs-private\n  @type {?} */\n\nconst matDialogAnimations = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\n\n\nclass MatDialogContainer extends BasePortalOutlet {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _changeDetectorRef\n   * @param {?} _document\n   * @param {?} _config\n   */\n  constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n    super();\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._document = _document;\n    this._config = _config;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     */\n\n    this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * State of the dialog animation.\n     */\n\n    this._state = 'enter';\n    /**\n     * Emits when an animation state changes.\n     */\n\n    this._animationStateChanged = new EventEmitter();\n    /**\n     * ID of the element that should be considered as the dialog's label.\n     */\n\n    this._ariaLabelledBy = null;\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @template T\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n\n\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @template C\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n\n\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /**\n   * Moves the focus inside the focus trap.\n   * @return {?}\n   */\n\n\n  _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    } // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n\n\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n  /**\n   * Restores focus to the element that was focused before the dialog opened.\n   * @return {?}\n   */\n\n\n  _restoreFocus() {\n    /** @type {?} */\n    const toFocus = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /**\n   * Saves a reference to the element that was focused before the dialog was opened.\n   * @return {?}\n   */\n\n\n  _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened =\n      /** @type {?} */\n      this._document.activeElement; // Note that there is no focus method when rendering on the server.\n\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n  /**\n   * Callback, invoked whenever an animation on the host completes.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _onAnimationDone(event) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n  /**\n   * Callback, invoked when an animation on the host starts.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _onAnimationStart(event) {\n    this._animationStateChanged.emit(event);\n  }\n  /**\n   * Starts the dialog exit animation.\n   * @return {?}\n   */\n\n\n  _startExitAnimation() {\n    this._state = 'exit'; // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n}\n\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n  return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig));\n};\n\nMatDialogContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  viewQuery: function MatDialogContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [ɵngcc2.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\n/** @nocollapse */\n\nMatDialogContainer.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: MatDialogConfig\n}];\n\nMatDialogContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        'aria-modal': 'true',\n        '[attr.id]': '_id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': '_state',\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      },\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusTrapFactory\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\n\nclass MatDialogRef {\n  /**\n   * @param {?} _overlayRef\n   * @param {?} _containerInstance\n   * @param {?=} _location\n   * @param {?=} id\n   */\n  constructor(_overlayRef, _containerInstance, // @breaking-change 8.0.0 `_location` parameter to be removed.\n  _location, id = `mat-dialog-${uniqueId++}`) {\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /**\n     * Whether the user is allowed to close the dialog.\n     */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     */\n\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     */\n\n    this._afterClosed = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     */\n\n    this._beforeClosed = new Subject(); // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'enter'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'exit'), take(1)).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n\n      this._beforeClosed.complete();\n\n      this._afterClosed.next(this._result);\n\n      this._afterClosed.complete();\n\n      this.componentInstance =\n      /** @type {?} */\n      null;\n\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose)).subscribe(() => this.close());\n  }\n  /**\n   * Close the dialog.\n   * @param {?=} dialogResult Optional result to return to the dialog opener.\n   * @return {?}\n   */\n\n\n  close(dialogResult) {\n    this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1)).subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n\n      this._beforeClosed.complete();\n\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @return {?}\n   */\n\n\n  afterOpened() {\n    return this._afterOpened.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   * @return {?}\n   */\n\n\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @return {?}\n   */\n\n\n  beforeClosed() {\n    return this._beforeClosed.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   * @return {?}\n   */\n\n\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   * @return {?}\n   */\n\n\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n  /**\n   * Updates the dialog's position.\n   * @param {?=} position New dialog position.\n   * @return {?}\n   */\n\n\n  updatePosition(position) {\n    /** @type {?} */\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param {?=} width New width of the dialog.\n   * @param {?=} height New height of the dialog.\n   * @return {?}\n   */\n\n\n  updateSize(width = '', height = '') {\n    this._getPositionStrategy().width(width).height(height);\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n\n\n  afterOpen() {\n    return this.afterOpened();\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n\n\n  beforeClose() {\n    return this.beforeClosed();\n  }\n  /**\n   * Fetches the position strategy object from the overlay ref.\n   * @return {?}\n   */\n\n\n  _getPositionStrategy() {\n    return (\n      /** @type {?} */\n      this._overlayRef.getConfig().positionStrategy\n    );\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to access the data that was passed in to a dialog.\n  @type {?} */\n\n\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** *\n * Injection token that can be used to specify default dialog options.\n  @type {?} */\n\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** *\n * Injection token that determines the scroll handling while the dialog is open.\n  @type {?} */\n\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n */\n\nclass MatDialog {\n  /**\n   * @param {?} _overlay\n   * @param {?} _injector\n   * @param {?} _location\n   * @param {?} _defaultOptions\n   * @param {?} scrollStrategy\n   * @param {?} _parentDialog\n   * @param {?} _overlayContainer\n   */\n  constructor(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._location = _location;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(() => this.openDialogs.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Keeps track of the currently-open dialogs.\n   * @return {?}\n   */\n\n\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @return {?}\n   */\n\n\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n\n\n  get afterOpen() {\n    return this.afterOpened;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get _afterAllClosed() {\n    /** @type {?} */\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n  /**\n   * Opens a modal dialog containing the given component.\n   * @template T, D, R\n   * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param {?=} config Extra configuration options.\n   * @return {?} Reference to the newly-opened dialog.\n   */\n\n\n  open(componentOrTemplateRef, config) {\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n    /** @type {?} */\n\n\n    const overlayRef = this._createOverlay(config);\n    /** @type {?} */\n\n\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    /** @type {?} */\n\n\n    const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   * @return {?}\n   */\n\n\n  closeAll() {\n    this._closeDialogs(this.openDialogs);\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param {?} id ID to use when looking up the dialog.\n   * @return {?}\n   */\n\n\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to the OverlayRef for the created overlay.\n   */\n\n\n  _createOverlay(config) {\n    /** @type {?} */\n    const overlayConfig = this._getOverlayConfig(config);\n\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param {?} dialogConfig The dialog configuration.\n   * @return {?} The overlay configuration.\n   */\n\n\n  _getOverlayConfig(dialogConfig) {\n    /** @type {?} */\n    const state$$1 = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state$$1.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state$$1;\n  }\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param {?} overlay Reference to the dialog's underlying overlay.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to a ComponentRef for the attached container.\n   */\n\n\n  _attachDialogContainer(overlay, config) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    /** @type {?} */\n\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatDialogConfig, config]]));\n    /** @type {?} */\n\n    const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    /** @type {?} */\n\n    const containerRef = overlay.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @template T, R\n   * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n\n\n  _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n    /** @type {?} */\n    const dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id); // When the dialog backdrop is clicked, we want to close it.\n\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef,\n      /** @type {?} */\n      null,\n      /** @type {?} */\n      {\n        $implicit: config.data,\n        dialogRef\n      }));\n    } else {\n      /** @type {?} */\n      const injector = this._createInjector(config, dialogRef, dialogContainer);\n      /** @type {?} */\n\n\n      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n    return dialogRef;\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @template T\n   * @param {?} config Config object that is used to construct the dialog.\n   * @param {?} dialogRef Reference to the dialog.\n   * @param {?} dialogContainer\n   * @return {?} The custom injector that can be used inside the dialog.\n   */\n\n\n  _createInjector(config, dialogRef, dialogContainer) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    /** @type {?} */\n\n    const injectionTokens = new WeakMap([[MatDialogContainer, dialogContainer], [MAT_DIALOG_DATA, config.data], [MatDialogRef, dialogRef]]);\n\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: of()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param {?} dialogRef Dialog to be removed.\n   * @return {?}\n   */\n\n\n  _removeOpenDialog(dialogRef) {\n    /** @type {?} */\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n\n        this._afterAllClosed.next();\n      }\n    }\n  }\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   * @return {?}\n   */\n\n\n  _hideNonDialogContentFromAssistiveTechnology() {\n    /** @type {?} */\n    const overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n    if (overlayContainer.parentElement) {\n      /** @type {?} */\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        /** @type {?} */\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n  /**\n   * Closes all of the dialogs in an array.\n   * @param {?} dialogs\n   * @return {?}\n   */\n\n\n  _closeDialogs(dialogs) {\n    /** @type {?} */\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n};\n\nMatDialog.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n/** @nocollapse */\n\nMatDialog.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: Injector\n}, {\n  type: Location,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatDialogConfig,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_DIALOG_SCROLL_STRATEGY]\n  }]\n}, {\n  type: MatDialog,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: OverlayContainer\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Counter used to generate unique IDs for dialog elements.\n  @type {?} */\n\n\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nclass MatDialogClose {\n  /**\n   * @param {?} dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  constructor(dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /**\n     * Screenreader label for the button.\n     */\n\n    this.ariaLabel = 'Close dialog';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef =\n      /** @type {?} */\n      getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    /** @type {?} */\n    const proxiedChange = changes[\"_matDialogClose\"] || changes[\"_matDialogCloseResult\"];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n}\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"button\", \"mat-dialog-close\", \"\"], [\"button\", \"matDialogClose\", \"\"]],\n  hostAttrs: [\"type\", \"button\"],\n  hostVars: 1,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() {\n        return ctx.dialogRef.close(ctx.dialogResult);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatDialogClose.ctorParameters = () => [{\n  type: MatDialogRef,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: MatDialog\n}];\n\nMatDialogClose.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  dialogResult: [{\n    type: Input,\n    args: ['mat-dialog-close']\n  }],\n  _matDialogClose: [{\n    type: Input,\n    args: ['matDialogClose']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: `button[mat-dialog-close], button[matDialogClose]`,\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': 'dialogRef.close(dialogResult)',\n        '[attr.aria-label]': 'ariaLabel',\n        'type': 'button'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nclass MatDialogTitle {\n  /**\n   * @param {?} _dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  constructor(_dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = `mat-dialog-title-${dialogElementUid++}`;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef =\n      /** @type {?} */\n      getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        /** @type {?} */\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n\n}\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n/** @nocollapse */\n\nMatDialogTitle.ctorParameters = () => [{\n  type: MatDialogRef,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: MatDialog\n}];\n\nMatDialogTitle.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nclass MatDialogContent {}\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nclass MatDialogActions {}\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n      host: {\n        'class': 'mat-dialog-actions'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  /** @type {?} */\n  let parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id ===\n  /** @type {?} */\n  parent.id) : null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatDialogModule {}\n\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n  return new (t || MatDialogModule)();\n};\n\nMatDialogModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [CommonModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n      entryComponents: [MatDialogContainer]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };","map":{"version":3,"names":["animate","state","style","transition","trigger","Component","ElementRef","EventEmitter","Inject","Optional","ChangeDetectorRef","ViewChild","ViewEncapsulation","ChangeDetectionStrategy","Injectable","InjectionToken","Injector","SkipSelf","TemplateRef","Directive","Input","NgModule","DOCUMENT","Location","CommonModule","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","PortalInjector","TemplatePortal","PortalModule","FocusTrapFactory","ESCAPE","Subject","defer","of","filter","take","startWith","Directionality","Overlay","OverlayConfig","OverlayContainer","OverlayModule","MatCommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","animationBody","opacity","transform","matDialogAnimations","dialogContainer","slideDialog","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","attachComponentPortal","portal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","attachTemplatePortal","_trapFocus","_focusTrap","create","nativeElement","focusInitialElementWhenReady","_restoreFocus","toFocus","focus","destroy","activeElement","Promise","resolve","then","_onAnimationDone","event","toState","emit","_onAnimationStart","_startExitAnimation","markForCheck","ɵfac","MatDialogContainer_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatDialogContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","ɵɵsyntheticHostListener","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","ɵɵattribute","_id","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatDialogContainer_Template","ɵɵtemplate","dependencies","styles","encapsulation","animation","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","None","changeDetection","Default","animations","host","uniqueId","MatDialogRef","_overlayRef","_containerInstance","_location","id","_afterOpened","_afterClosed","_beforeClosed","pipe","phaseName","subscribe","next","complete","dispose","detachments","_result","componentInstance","keydownEvents","keyCode","close","dialogResult","detachBackdrop","afterOpened","asObservable","afterClosed","beforeClosed","backdropClick","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","afterOpen","beforeClose","getConfig","positionStrategy","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatDialog","_overlay","_injector","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_afterAllClosed","_scrollStrategy","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","dialog","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","state$$1","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","WeakMap","containerPortal","containerRef","attach","instance","$implicit","_createInjector","contentRef","injectionTokens","get","set","value","change","index","indexOf","splice","forEach","previousValue","element","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","getAttribute","dialogs","MatDialog_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","defaultOptions","Object","assign","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","MatDialogClose_Factory","ɵdir","ɵɵdefineDirective","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogTitle","_dialogRef","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","ɵɵhostProperty","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","contains","MatDialogModule","MatDialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/dialog.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop,\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw\n         */\n        this.maxWidth = '80vw';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * Aria label to assign to the dialog element\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the dialog should focus the first focusable element on open.\n         */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst animationBody = [\n    // Note: The `enter` animation transitions to `transform: none`, because for some reason\n    // specifying the transform explicitly, causes IE both to blur the dialog content and\n    // decimate the animation performance. Leaving it as `none` solves both issues.\n    state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n    state('enter', style({ transform: 'none' })),\n    transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n    transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n];\n/** *\n * Animations used by MatDialog.\n * \\@docs-private\n  @type {?} */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by defalt. */\n    dialogContainer: trigger('dialogContainer', animationBody),\n    /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n    slideDialog: trigger('slideDialog', animationBody)\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._document = _document;\n        this._config = _config;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        this._animationStateChanged = new EventEmitter();\n        /**\n         * ID of the element that should be considered as the dialog's label.\n         */\n        this._ariaLabelledBy = null;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n    _trapFocus() {\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @return {?}\n     */\n    _restoreFocus() {\n        /** @type {?} */\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            toFocus.focus();\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @return {?}\n     */\n    _savePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = /** @type {?} */ (this._document.activeElement);\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n            }\n        }\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig)); };\nMatDialogContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, dependencies: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{ selector: 'mat-dialog-container', template: \"<ng-template cdkPortalOutlet></ng-template>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                }, styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} _location\n     * @param {?=} id\n     */\n    constructor(_overlayRef, _containerInstance, \n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClosed = new Subject();\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'enter'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'exit'), take(1)).subscribe(() => this._overlayRef.dispose());\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = /** @type {?} */ ((null));\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n            .subscribe(() => this.close());\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1))\n            .subscribe(() => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n        });\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param {?=} position New dialog position.\n     * @return {?}\n     */\n    updatePosition(position) {\n        /** @type {?} */\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {?}\n     */\n    updateSize(width = '', height = '') {\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    afterOpen() {\n        return this.afterOpened();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    beforeClose() {\n        return this.beforeClosed();\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @return {?}\n     */\n    _getPositionStrategy() {\n        return /** @type {?} */ (this._overlayRef.getConfig().positionStrategy);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to access the data that was passed in to a dialog.\n  @type {?} */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** *\n * Injection token that can be used to specify default dialog options.\n  @type {?} */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** *\n * Injection token that determines the scroll handling while the dialog is open.\n  @type {?} */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._location = _location;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get afterOpen() {\n        return this.afterOpened;\n    }\n    /**\n     * @return {?}\n     */\n    get _afterAllClosed() {\n        /** @type {?} */\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        const state$$1 = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state$$1.backdropClass = dialogConfig.backdropClass;\n        }\n        return state$$1;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatDialogConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        /** @type {?} */\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe(() => {\n                if (!dialogRef.disableClose) {\n                    dialogRef.close();\n                }\n            });\n        }\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */ ((null)), /** @type {?} */ ({ $implicit: config.data, dialogRef })));\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            /** @type {?} */\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injectionTokens = new WeakMap([\n            [MatDialogContainer, dialogContainer],\n            [MAT_DIALOG_DATA, config.data],\n            [MatDialogRef, dialogRef]\n        ]);\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            injectionTokens.set(Directionality, {\n                value: config.direction,\n                change: of()\n            });\n        }\n        return new PortalInjector(userInjector || this._injector, injectionTokens);\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @return {?}\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            /** @type {?} */\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                /** @type {?} */\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @param {?} dialogs\n     * @return {?}\n     */\n    _closeDialogs(dialogs) {\n        /** @type {?} */\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\n/** @nocollapse */\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign({}, defaultOptions, config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Counter used to generate unique IDs for dialog elements.\n  @type {?} */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /**\n         * Screenreader label for the button.\n         */\n        this.ariaLabel = 'Close dialog';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = /** @type {?} */ ((getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const proxiedChange = changes[\"_matDialogClose\"] || changes[\"_matDialogCloseResult\"];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"button\", \"mat-dialog-close\", \"\"], [\"button\", \"matDialogClose\", \"\"]], hostAttrs: [\"type\", \"button\"], hostVars: 1, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() { return ctx.dialogRef.close(ctx.dialogResult); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: `button[mat-dialog-close], button[matDialogClose]`,\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel',\n                    'type': 'button'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = /** @type {?} */ ((getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                /** @type {?} */\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n    /** @type {?} */\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === /** @type {?} */ ((parent)).id) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\nMatDialogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [CommonModule,\n        OverlayModule,\n        PortalModule,\n        MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}