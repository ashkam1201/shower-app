{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, InjectionToken, Input, Optional, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Base reference size of the spinner.\n * \\@docs-private\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n  }\n}\n\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n  }\n}\n\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n  }\n}\n\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n  }\n}\n\nconst _c0 = \".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\";\nconst BASE_SIZE = 100;\n/** *\n * Base reference stroke width of the spinner.\n * \\@docs-private\n  @type {?} */\n\nconst BASE_STROKE_WIDTH = 10;\n/**\n * \\@docs-private\n */\n\nclass MatProgressSpinnerBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n/** @type {?} */\n\n\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/** *\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n  @type {?} */\n\n\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    diameter: BASE_SIZE\n  };\n}\n/** @type {?} */\n\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\n\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} platform\n   * @param {?} _document\n   * @param {?=} animationMode\n   * @param {?=} defaults\n   */\n  constructor(_elementRef, platform, _document, // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n  animationMode, defaults) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._document = _document;\n    this.animationMode = animationMode;\n    this.defaults = defaults;\n    this._value = 0;\n    this._fallbackAnimation = false;\n    /**\n     * Whether the _mat-animation-noopable class should be applied, disabling animations.\n     */\n\n    this._noopAnimations = this.animationMode === 'NoopAnimations' && !!this.defaults && !this.defaults._forceAnimations;\n    this._diameter = BASE_SIZE;\n    /**\n     * Mode of the progress circle\n     */\n\n    this.mode = 'determinate';\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n    /** @type {?} */\n\n\n    const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n  /**\n   * The diameter of the progress spinner (will set width and height of svg).\n   * @return {?}\n   */\n\n\n  get diameter() {\n    return this._diameter;\n  }\n  /**\n   * @param {?} size\n   * @return {?}\n   */\n\n\n  set diameter(size) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  /**\n   * Stroke width of the progress spinner.\n   * @return {?}\n   */\n\n\n  get strokeWidth() {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set strokeWidth(value) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n  /**\n   * Value of the progress circle.\n   * @return {?}\n   */\n\n\n  get value() {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n\n\n  set value(newValue) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n  /**\n   * The radius of the spinner, adjusted for stroke width.\n   * @return {?}\n   */\n\n\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n  /**\n   * The view box of the spinner's svg element.\n   * @return {?}\n   */\n\n\n  get _viewBox() {\n    /** @type {?} */\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n  /**\n   * The stroke circumference of the svg circle.\n   * @return {?}\n   */\n\n\n  get _strokeCircumference() {\n    return 2 * Math.PI * this._circleRadius;\n  }\n  /**\n   * The dash offset of the svg circle.\n   * @return {?}\n   */\n\n\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    } // In fallback mode set the circle to 80% and rotate it with CSS.\n\n\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n  /**\n   * Stroke width of the circle in percent.\n   * @return {?}\n   */\n\n\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n  /**\n   * Dynamically generates a style tag containing the correct animation for this diameter.\n   * @return {?}\n   */\n\n\n  _attachStyleNode() {\n    /** @type {?} */\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n\n      this._document.head.appendChild(styleTag);\n\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      /** @type {?} */\n      styleTag.sheet.insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n  /**\n   * Generates animation styles adjusted for the spinner's diameter.\n   * @return {?}\n   */\n\n\n  _getAnimationText() {\n    return INDETERMINATE_ANIMATION_TEMPLATE // Animation should begin at 5% and end at 80%\n    .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`).replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`).replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n}\n\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) {\n  return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n};\n\nMatProgressSpinner.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatProgressSpinner,\n  selectors: [[\"mat-progress-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"],\n  hostVars: 10,\n  hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.value)(\"mode\", ctx.mode);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    mode: \"mode\",\n    diameter: \"diameter\",\n    strokeWidth: \"strokeWidth\",\n    value: \"value\"\n  },\n  exportAs: [\"matProgressSpinner\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatProgressSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  dependencies: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n  styles: [_c0],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)\n */\n\nMatProgressSpinner.diameters = new Set([BASE_SIZE]);\n/**\n * Used for storing all of the generated keyframe animations.\n * \\@dynamic\n */\n\nMatProgressSpinner.styleTag = null;\n/** @nocollapse */\n\nMatProgressSpinner.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n  }]\n}];\n\nMatProgressSpinner.propDecorators = {\n  diameter: [{\n    type: Input\n  }],\n  strokeWidth: [{\n    type: Input\n  }],\n  mode: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-progress-spinner',\n      exportAs: 'matProgressSpinner',\n      host: {\n        'role': 'progressbar',\n        'class': 'mat-progress-spinner',\n        '[class._mat-animation-noopable]': `_noopAnimations`,\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter',\n        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n        '[attr.aria-valuenow]': 'value',\n        '[attr.mode]': 'mode'\n      },\n      inputs: ['color'],\n      template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    mode: [{\n      type: Input\n    }],\n    diameter: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n\n\nclass MatSpinner extends MatProgressSpinner {\n  /**\n   * @param {?} elementRef\n   * @param {?} platform\n   * @param {?} document\n   * @param {?=} animationMode\n   * @param {?=} defaults\n   */\n  constructor(elementRef, platform, document, // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n  animationMode, defaults) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n\n}\n\nMatSpinner.ɵfac = function MatSpinner_Factory(t) {\n  return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n};\n\nMatSpinner.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSpinner,\n  selectors: [[\"mat-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"],\n  hostVars: 6,\n  hostBindings: function MatSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  dependencies: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n  styles: [_c0],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSpinner.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-spinner',\n      host: {\n        'role': 'progressbar',\n        'mode': 'indeterminate',\n        'class': 'mat-spinner mat-progress-spinner',\n        '[class._mat-animation-noopable]': `_noopAnimations`,\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter'\n      },\n      inputs: ['color'],\n      template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatProgressSpinnerModule {}\n\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) {\n  return new (t || MatProgressSpinnerModule)();\n};\n\nMatProgressSpinnerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatProgressSpinnerModule\n});\nMatProgressSpinnerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [MatCommonModule, CommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CommonModule],\n      exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n      declarations: [MatProgressSpinner, MatSpinner]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, {\n    declarations: function () {\n      return [MatProgressSpinner, MatSpinner];\n    },\n    imports: function () {\n      return [MatCommonModule, CommonModule];\n    },\n    exports: function () {\n      return [MatProgressSpinner, MatSpinner, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatProgressSpinnerModule, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MatProgressSpinner, MatSpinner };","map":{"version":3,"names":["coerceNumberProperty","Platform","DOCUMENT","CommonModule","ChangeDetectionStrategy","Component","ElementRef","Inject","InjectionToken","Input","Optional","ViewEncapsulation","NgModule","mixinColor","MatCommonModule","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","ɵngcc2","MatProgressSpinner__svg_circle_1_Template","rf","ctx","ɵɵnamespaceSVG","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵstyleProp","diameter","_strokeDashOffset","_strokeCircumference","_circleStrokeWidth","ɵɵattribute","_circleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r1","MatSpinner__svg_circle_1_Template","MatSpinner__svg_circle_2_Template","_c0","BASE_SIZE","BASE_STROKE_WIDTH","MatProgressSpinnerBase","constructor","_elementRef","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","factory","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_document","animationMode","defaults","_value","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","mode","EDGE","TRIDENT","strokeWidth","animationClass","nativeElement","classList","add","size","diameters","has","_attachStyleNode","_strokeWidth","value","newValue","Math","max","min","_viewBox","viewBox","PI","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","ɵfac","MatProgressSpinner_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatProgressSpinner_HostBindings","ɵɵclassProp","inputs","color","exportAs","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatProgressSpinner_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","dependencies","NgSwitch","NgSwitchCase","styles","encapsulation","changeDetection","Set","ctorParameters","undefined","decorators","args","String","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","OnPush","None","MatSpinner","elementRef","document","MatSpinner_Factory","MatSpinner_HostBindings","MatSpinner_Template","MatProgressSpinnerModule","MatProgressSpinnerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/progress-spinner.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, InjectionToken, Input, Optional, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Base reference size of the spinner.\n * \\@docs-private\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nconst _c0 = \".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\";\nconst BASE_SIZE = 100;\n/** *\n * Base reference stroke width of the spinner.\n * \\@docs-private\n  @type {?} */\nconst BASE_STROKE_WIDTH = 10;\n/**\n * \\@docs-private\n */\nclass MatProgressSpinnerBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/** *\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n  @type {?} */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n/** @type {?} */\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} platform\n     * @param {?} _document\n     * @param {?=} animationMode\n     * @param {?=} defaults\n     */\n    constructor(_elementRef, platform, _document, \n    // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n    animationMode, defaults) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this.animationMode = animationMode;\n        this.defaults = defaults;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /**\n         * Whether the _mat-animation-noopable class should be applied, disabling animations.\n         */\n        this._noopAnimations = this.animationMode === 'NoopAnimations' && (!!this.defaults && !this.defaults._forceAnimations);\n        this._diameter = BASE_SIZE;\n        /**\n         * Mode of the progress circle\n         */\n        this.mode = 'determinate';\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        /** @type {?} */\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        _elementRef.nativeElement.classList.add(animationClass);\n    }\n    /**\n     * The diameter of the progress spinner (will set width and height of svg).\n     * @return {?}\n     */\n    get diameter() { return this._diameter; }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n            this._attachStyleNode();\n        }\n    }\n    /**\n     * Stroke width of the progress spinner.\n     * @return {?}\n     */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /**\n     * Value of the progress circle.\n     * @return {?}\n     */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    /**\n     * The radius of the spinner, adjusted for stroke width.\n     * @return {?}\n     */\n    get _circleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /**\n     * The view box of the spinner's svg element.\n     * @return {?}\n     */\n    get _viewBox() {\n        /** @type {?} */\n        const viewBox = this._circleRadius * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /**\n     * The stroke circumference of the svg circle.\n     * @return {?}\n     */\n    get _strokeCircumference() {\n        return 2 * Math.PI * this._circleRadius;\n    }\n    /**\n     * The dash offset of the svg circle.\n     * @return {?}\n     */\n    get _strokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._strokeCircumference * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._strokeCircumference * 0.2;\n        }\n        return null;\n    }\n    /**\n     * Stroke width of the circle in percent.\n     * @return {?}\n     */\n    get _circleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /**\n     * Dynamically generates a style tag containing the correct animation for this diameter.\n     * @return {?}\n     */\n    _attachStyleNode() {\n        /** @type {?} */\n        let styleTag = MatProgressSpinner.styleTag;\n        if (!styleTag) {\n            styleTag = this._document.createElement('style');\n            this._document.head.appendChild(styleTag);\n            MatProgressSpinner.styleTag = styleTag;\n        }\n        if (styleTag && styleTag.sheet) {\n            (/** @type {?} */ (styleTag.sheet)).insertRule(this._getAnimationText(), 0);\n        }\n        MatProgressSpinner.diameters.add(this.diameter);\n    }\n    /**\n     * Generates animation styles adjusted for the spinner's diameter.\n     * @return {?}\n     */\n    _getAnimationText() {\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this.diameter}`);\n    }\n}\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.value)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, dependencies: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)\n */\nMatProgressSpinner.diameters = new Set([BASE_SIZE]);\n/**\n * Used for storing all of the generated keyframe animations.\n * \\@dynamic\n */\nMatProgressSpinner.styleTag = null;\n/** @nocollapse */\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{ selector: 'mat-progress-spinner', exportAs: 'matProgressSpinner', host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.mode]': 'mode'\n                }, inputs: ['color'], template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\", changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    /**\n     * @param {?} elementRef\n     * @param {?} platform\n     * @param {?} document\n     * @param {?=} animationMode\n     * @param {?=} defaults\n     */\n    constructor(elementRef, platform, document, \n    // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n    animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, dependencies: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{ selector: 'mat-spinner', host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                }, inputs: ['color'], template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\", changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); };\nMatProgressSpinnerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [MatCommonModule, CommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatProgressSpinnerModule, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MatProgressSpinner, MatSpinner };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}