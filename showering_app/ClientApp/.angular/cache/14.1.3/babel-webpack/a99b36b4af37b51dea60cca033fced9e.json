{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, ViewEncapsulation, InjectionToken, inject, defineInjectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nconst _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\n\n\nclass SvgIconConfig {\n  /**\n   * @param {?} data\n   */\n  constructor(data) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!\n    /** @type {?} */\n    data.nodeName) {\n      this.svgElement =\n      /** @type {?} */\n      data;\n    } else {\n      this.url =\n      /** @type {?} */\n      data;\n    }\n  }\n\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nclass MatIconRegistry {\n  /**\n   * @param {?} _httpClient\n   * @param {?} _sanitizer\n   * @param {?} document\n   */\n  constructor(_httpClient, _sanitizer, document) {\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n\n    this._svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n\n    this._iconSetConfigs = new Map();\n    /**\n     * Cache for icons loaded by direct URLs.\n     */\n\n    this._cachedIconsByUrl = new Map();\n    /**\n     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n     */\n\n    this._inProgressUrlFetches = new Map();\n    /**\n     * Map from font identifiers to their CSS class names. Used for icon fonts.\n     */\n\n    this._fontCssClassesByAlias = new Map();\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n\n    this._defaultFontSetClass = 'material-icons';\n    this._document = document;\n  }\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @return {?}\n   */\n\n\n  addSvgIcon(iconName, url) {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} literal SVG source of the icon.\n   * @return {?}\n   */\n\n\n  addSvgIconLiteral(iconName, literal) {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param {?} namespace Namespace in which the icon should be registered.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @return {?}\n   */\n\n\n  addSvgIconInNamespace(namespace, iconName, url) {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param {?} namespace Namespace in which the icon should be registered.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} literal SVG source of the icon.\n   * @return {?}\n   */\n\n\n  addSvgIconLiteralInNamespace(namespace, iconName, literal) {\n    /** @type {?} */\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    /** @type {?} */\n\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param {?} url\n   * @return {?}\n   */\n\n\n  addSvgIconSet(url) {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param {?} literal SVG source of the icon set.\n   * @return {?}\n   */\n\n\n  addSvgIconSetLiteral(literal) {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param {?} namespace Namespace in which to register the icon set.\n   * @param {?} url\n   * @return {?}\n   */\n\n\n  addSvgIconSetInNamespace(namespace, url) {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param {?} namespace Namespace in which to register the icon set.\n   * @param {?} literal SVG source of the icon set.\n   * @return {?}\n   */\n\n\n  addSvgIconSetLiteralInNamespace(namespace, literal) {\n    /** @type {?} */\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    /** @type {?} */\n\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param {?} alias Alias for the font.\n   * @param {?=} className Class name override to be used instead of the alias.\n   * @return {?}\n   */\n\n\n  registerFontClassAlias(alias, className = alias) {\n    this._fontCssClassesByAlias.set(alias, className);\n\n    return this;\n  }\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   * @param {?} alias\n   * @return {?}\n   */\n\n\n  classNameForFontAlias(alias) {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param {?} className\n   * @return {?}\n   */\n\n\n  setDefaultFontSetClass(className) {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   * @return {?}\n   */\n\n\n  getDefaultFontSetClass() {\n    return this._defaultFontSetClass;\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param {?} safeUrl URL from which to fetch the SVG icon.\n   * @return {?}\n   */\n\n\n  getSvgIconFromUrl(safeUrl) {\n    /** @type {?} */\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n    /** @type {?} */\n\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return of(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(svg => this._cachedIconsByUrl.set(\n    /** @type {?} */\n    url, svg)), map(svg => cloneSvg(svg)));\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param {?} name Name of the icon to be retrieved.\n   * @param {?=} namespace Namespace in which to look for the icon.\n   * @return {?}\n   */\n\n\n  getNamedSvgIcon(name, namespace = '') {\n    /** @type {?} */\n    const key = iconKey(namespace, name);\n    /** @type {?} */\n\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n    /** @type {?} */\n\n\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return throwError(getMatIconNameNotFoundError(key));\n  }\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _getSvgFromConfig(config) {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return of(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(tap(svg => config.svgElement = svg), map(svg => cloneSvg(svg)));\n    }\n  }\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   * @param {?} name\n   * @param {?} iconSetConfigs\n   * @return {?}\n   */\n\n\n  _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n    /** @type {?} */\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return of(namedIcon);\n    }\n    /** @type {?} */\n\n\n    const iconSetFetchRequests = iconSetConfigs.filter(iconSetConfig => !iconSetConfig.svgElement).map(iconSetConfig => {\n      return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(err => {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n        // combined Observable won't necessarily fail.\n\n\n        console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n        return of(null);\n      }));\n    }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      /** @type {?} */\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   * @param {?} iconName\n   * @param {?} iconSetConfigs\n   * @return {?}\n   */\n\n\n  _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      const config = iconSetConfigs[i];\n\n      if (config.svgElement) {\n        /** @type {?} */\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _loadSvgIconFromConfig(config) {\n    return this._fetchUrl(config.url).pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _loadSvgIconSetFromConfig(config) {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return of(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   * @param {?} responseText\n   * @return {?}\n   */\n\n\n  _createSvgElementForSingleIcon(responseText) {\n    /** @type {?} */\n    const svg = this._svgElementFromString(responseText);\n\n    this._setSvgAttributes(svg);\n\n    return svg;\n  }\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   * @param {?} iconSet\n   * @param {?} iconName\n   * @return {?}\n   */\n\n\n  _extractSvgIconFromSet(iconSet, iconName) {\n    /** @type {?} */\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n    /** @type {?} */\n\n\n    const iconElement =\n    /** @type {?} */\n    iconSource.cloneNode(true);\n    iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(\n      /** @type {?} */\n      iconElement);\n    } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n    /** @type {?} */\n\n\n    const svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n    svg.appendChild(iconElement);\n    return this._setSvgAttributes(svg);\n  }\n  /**\n   * Creates a DOM element from the given SVG string.\n   * @param {?} str\n   * @return {?}\n   */\n\n\n  _svgElementFromString(str) {\n    /** @type {?} */\n    const div = this._document.createElement('DIV');\n\n    div.innerHTML = str;\n    /** @type {?} */\n\n    const svg =\n    /** @type {?} */\n    div.querySelector('svg');\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _toSvgElement(element) {\n    /** @type {?} */\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   * @param {?} svg\n   * @return {?}\n   */\n\n\n  _setSvgAttributes(svg) {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    return svg;\n  }\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   * @param {?} safeUrl\n   * @return {?}\n   */\n\n\n  _fetchUrl(safeUrl) {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n    /** @type {?} */\n\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n    /** @type {?} */\n\n\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n    /** @type {?} */\n\n\n    const req = this._httpClient.get(url, {\n      responseType: 'text'\n    }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n\n    this._inProgressUrlFetches.set(url, req);\n\n    return req;\n  }\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param {?} namespace Namespace in which to register the icon config.\n   * @param {?} iconName Name under which to register the config.\n   * @param {?} config Config to be registered.\n   * @return {?}\n   */\n\n\n  _addSvgIconConfig(namespace, iconName, config) {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n    return this;\n  }\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param {?} namespace Namespace in which to register the icon config.\n   * @param {?} config Config to be registered.\n   * @return {?}\n   */\n\n\n  _addSvgIconSetConfig(namespace, config) {\n    /** @type {?} */\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n\n}\n\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n  return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\n\nMatIconRegistry.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatIconRegistry,\n  factory: MatIconRegistry.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMatIconRegistry.ctorParameters = () => [{\n  type: HttpClient,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: DomSanitizer\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\n\n\nMatIconRegistry.ngInjectableDef = defineInjectable({\n  factory: function MatIconRegistry_Factory() {\n    return new MatIconRegistry(inject(HttpClient, 8), inject(DomSanitizer), inject(DOCUMENT, 8));\n  },\n  token: MatIconRegistry,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @return {?}\n */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n/** *\n * \\@docs-private\n  @type {?} */\n\n\nconst ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, [new Optional(),\n  /** @type {?} */\n  DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\n\nfunction cloneSvg(svg) {\n  return (\n    /** @type {?} */\n    svg.cloneNode(true)\n  );\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nclass MatIconBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n/** @type {?} */\n\n\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/** *\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n  @type {?} */\n\n\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  /** @type {?} */\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _document && _document.location && _document.location.pathname || ''\n  };\n}\n/** *\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n  @type {?} */\n\n\nconst funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nconst ɵ0 = attr => `[${attr}]`;\n/** *\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n  @type {?} */\n\n\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** *\n * Regex that can be used to extract the id out of a FuncIRI.\n  @type {?} */\n\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nclass MatIcon extends _MatIconMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _iconRegistry\n   * @param {?} ariaHidden\n   * @param {?=} _location\n   */\n  constructor(elementRef, _iconRegistry, ariaHidden,\n  /**\n  * @deprecated `location` parameter to be made required.\n  * @breaking-change 8.0.0\n  */\n  _location) {\n    super(elementRef);\n    this._iconRegistry = _iconRegistry;\n    this._location = _location;\n    this._inline = false; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   * @return {?}\n   */\n\n\n  get inline() {\n    return this._inline;\n  }\n  /**\n   * @param {?} inline\n   * @return {?}\n   */\n\n\n  set inline(inline) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  /**\n   * Font set that the icon is a part of.\n   * @return {?}\n   */\n\n\n  get fontSet() {\n    return this._fontSet;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set fontSet(value) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  /**\n   * Name of an icon within a font set.\n   * @return {?}\n   */\n\n\n  get fontIcon() {\n    return this._fontIcon;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set fontIcon(value) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   * @param {?} iconName\n   * @return {?}\n   */\n\n\n  _splitIconName(iconName) {\n    if (!iconName) {\n      return ['', ''];\n    }\n    /** @type {?} */\n\n\n    const parts = iconName.split(':');\n\n    switch (parts.length) {\n      case 1:\n        return ['', parts[0]];\n      // Use default namespace.\n\n      case 2:\n        return (\n          /** @type {?} */\n          parts\n        );\n\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes[\"svgIcon\"]) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), err => console.log(`Error retrieving icon: ${err.message}`));\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterViewChecked() {\n    /** @type {?} */\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      /** @type {?} */\n      const newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n\n\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _usingFontIcon() {\n    return !this.svgIcon;\n  }\n  /**\n   * @param {?} svg\n   * @return {?}\n   */\n\n\n  _setSvgElement(svg) {\n    this._clearSvgElement();\n    /** @type {?} */\n\n\n    const styleTags =\n    /** @type {?} */\n    svg.querySelectorAll('style');\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    } // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n\n\n    if (this._location) {\n      /** @type {?} */\n      const path = this._location.getPathname();\n\n      this._previousPath = path;\n\n      this._cacheChildrenWithExternalReferences(svg);\n\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _clearSvgElement() {\n    /** @type {?} */\n    const layoutElement = this._elementRef.nativeElement;\n    /** @type {?} */\n\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n    while (childCount--) {\n      /** @type {?} */\n      const child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const elem = this._elementRef.nativeElement;\n    /** @type {?} */\n\n    const fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _cleanupFontValue(value) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   * @param {?} path\n   * @return {?}\n   */\n\n\n  _prependPathToReferences(path) {\n    /** @type {?} */\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _cacheChildrenWithExternalReferences(element) {\n    /** @type {?} */\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    /** @type {?} */\n\n    const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        /** @type {?} */\n        const elementWithReference = elementsWithFuncIri[i];\n        /** @type {?} */\n\n        const value = elementWithReference.getAttribute(attr);\n        /** @type {?} */\n\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          /** @type {?} */\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n          /** @type {?} */\n\n\n          attributes.push({\n            name: attr,\n            value: match[1]\n          });\n        }\n      });\n    }\n  }\n\n}\n\nMatIcon.ɵfac = function MatIcon_Factory(t) {\n  return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8));\n};\n\nMatIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatIcon,\n  selectors: [[\"mat-icon\"]],\n  hostAttrs: [\"role\", \"img\", 1, \"mat-icon\"],\n  hostVars: 2,\n  hostBindings: function MatIcon_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    inline: \"inline\",\n    fontSet: \"fontSet\",\n    fontIcon: \"fontIcon\",\n    svgIcon: \"svgIcon\"\n  },\n  exportAs: [\"matIcon\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatIcon.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: MatIconRegistry\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['aria-hidden']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_ICON_LOCATION]\n  }]\n}];\n\nMatIcon.propDecorators = {\n  inline: [{\n    type: Input\n  }],\n  svgIcon: [{\n    type: Input\n  }],\n  fontSet: [{\n    type: Input\n  }],\n  fontIcon: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n    type: Component,\n    args: [{\n      template: '<ng-content></ng-content>',\n      selector: 'mat-icon',\n      exportAs: 'matIcon',\n      inputs: ['color'],\n      host: {\n        'role': 'img',\n        'class': 'mat-icon',\n        '[class.mat-icon-inline]': 'inline'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }];\n  }, {\n    inline: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass MatIconModule {}\n\nMatIconModule.ɵfac = function MatIconModule_Factory(t) {\n  return new (t || MatIconModule)();\n};\n\nMatIconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatIconModule\n});\nMatIconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatIcon, MatCommonModule],\n      declarations: [MatIcon]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function () {\n      return [MatIcon];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MatIconBase, _MatIconMixinBase, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };","map":{"version":3,"names":["DOCUMENT","HttpClient","Inject","Injectable","Optional","SecurityContext","SkipSelf","NgModule","Attribute","ChangeDetectionStrategy","Component","ElementRef","Input","ViewEncapsulation","InjectionToken","inject","defineInjectable","DomSanitizer","forkJoin","of","throwError","catchError","finalize","map","share","tap","take","mixinColor","MatCommonModule","coerceBooleanProperty","ɵngcc0","ɵngcc1","ɵngcc2","_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","data","nodeName","svgElement","MatIconRegistry","_httpClient","_sanitizer","document","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","className","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","console","error","message","foundIcon","i","length","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","toLowerCase","_toSvgElement","appendChild","str","div","createElement","innerHTML","element","childNodes","nodeType","ELEMENT_NODE","setAttribute","inProgressFetch","req","responseType","delete","configNamespace","push","ɵfac","MatIconRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","decorators","undefined","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","MatIconBase","_elementRef","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","getPathname","location","pathname","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_location","_inline","nativeElement","inline","fontSet","_fontSet","value","_cleanupFontValue","fontIcon","_fontIcon","_splitIconName","parts","split","ngOnChanges","changes","svgIcon","subscribe","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","ngOnDestroy","clear","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","_previousFontSetClass","classList","remove","add","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","MatIcon_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵclassProp","inputs","color","exportAs","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","String","propDecorators","selector","host","None","OnPush","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/owtgvaolt210/RiderProjects/showering_app/showering_app/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/icon.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, ViewEncapsulation, InjectionToken, inject, defineInjectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!(/** @type {?} */ (data)).nodeName) {\n            this.svgElement = /** @type {?} */ (data);\n        }\n        else {\n            this.url = /** @type {?} */ (data);\n        }\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     */\n    constructor(_httpClient, _sanitizer, document) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIcon(iconName, url) {\n        return this.addSvgIconInNamespace('', iconName, url);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {?}\n     */\n    addSvgIconLiteral(iconName, literal) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIconInNamespace(namespace, iconName, url) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {?}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal) {\n        /** @type {?} */\n        const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIconSet(url) {\n        return this.addSvgIconSetInNamespace('', url);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param {?} literal SVG source of the icon set.\n     * @return {?}\n     */\n    addSvgIconSetLiteral(literal) {\n        return this.addSvgIconSetLiteralInNamespace('', literal);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIconSetInNamespace(namespace, url) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @return {?}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal) {\n        /** @type {?} */\n        const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = this._svgElementFromString(sanitizedLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {?}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param {?} className\n     * @return {?}\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(svg => this._cachedIconsByUrl.set(/** @type {?} */ ((url)), svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap(svg => config.svgElement = svg), map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgElement)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(map(svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        }));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @param {?} responseText\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName) {\n        /** @type {?} */\n        const iconSource = iconSet.querySelector('#' + iconName);\n        if (!iconSource) {\n            return null;\n        }\n        /** @type {?} */\n        const iconElement = /** @type {?} */ (iconSource.cloneNode(true));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(/** @type {?} */ (iconElement));\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement));\n        }\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = /** @type {?} */ (div.querySelector('svg'));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        let svg = this._svgElementFromString('<svg></svg>');\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgAttributes(svg) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {?}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {?}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nMatIconRegistry.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatIconRegistry, factory: MatIconRegistry.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ MatIconRegistry.ngInjectableDef = defineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(inject(HttpClient, 8), inject(DomSanitizer), inject(DOCUMENT, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        [new Optional(), /** @type {?} */ (DOCUMENT)],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return /** @type {?} */ (svg.cloneNode(true));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/** *\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n  @type {?} */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n    };\n}\n/** *\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n  @type {?} */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** *\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n  @type {?} */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** *\n * Regex that can be used to extract the id out of a FuncIRI.\n  @type {?} */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, /**\n           * @deprecated `location` parameter to be made required.\n           * @breaking-change 8.0.0\n           */\n    _location) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._inline = false;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return /** @type {?} */ (parts);\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        if (changes[\"svgIcon\"]) {\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), (err) => console.log(`Error retrieving icon: ${err.message}`));\n            }\n            else {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        /** @type {?} */\n        const styleTags = /** @type {?} */ (svg.querySelectorAll('style'));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    } /** @type {?} */\n                    ((attributes)).push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8)); };\nMatIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\"], hostVars: 2, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline);\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                    'role': 'img',\n                    'class': 'mat-icon',\n                    '[class.mat-icon-inline]': 'inline'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MatIconBase, _MatIconMixinBase, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}